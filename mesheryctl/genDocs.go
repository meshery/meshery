package main

import (
	//"bytes"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
	//"gopkg.in/yaml.v2"

	"github.com/layer5io/meshery/mesheryctl/internal/cli/root"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/app"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/config"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/experimental"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/mesh"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/pattern"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/perf"
	//"github.com/layer5io/meshery/mesheryctl/internal/cli/root/system"
)

const markdownTemplateCommand = `---
layout: default
title: %s
permalink: /%s
redirect_from: /%s
type: reference
display-title: false
language: en
command: %s
---

`

const markdownTemplateSubcommand = `---
layout: default
title: %s
permalink: /%s
redirect_from: /%s
type: reference
display-title: false
language: en
command: %s
subcommand: %s
---

`

func prepender(filename string) string {
	file := strings.Split(filename, ".")
	title := filepath.Base(file[0])
	base := strings.TrimSuffix(title, path.Ext(title))
	url := "reference/" + strings.ToLower(base) + "/"
	words := strings.Split(title, "-")
	if len(words) <= 1 {
		return fmt.Sprintf(markdownTemplateCommand, title, url, url, words[0])
	}
	return fmt.Sprintf(markdownTemplateCommand, title, url, url, words[1])
}

func subprepender(filename string) string {
	file := strings.Split(filename, ".")
	title := filepath.Base(file[0])
	base := strings.TrimSuffix(title, path.Ext(title))
	url := "reference/" + strings.ToLower(base) + "/"
	words := strings.Split(title, "-")
	return fmt.Sprintf(markdownTemplateSubcommand, title, url, url, words[1], words[2])
}

func linkHandler(name string) string {
	base := strings.TrimSuffix(name, path.Ext(name))
	return "reference/" + strings.ToLower(base) + "/"
}

func main() {
	markDownPath := "./internal/cli/root/testDoc/" //Sample path
	//yamlPath := "./internal/cli/root/testDoc/"

	fmt.Println("Scanning available commands...")
	cmd := root.TreePath() // Takes entire tree of mesheryctl commands

	// To skip the footer part "Auto generated by spf13/cobra.."
	cmd.DisableAutoGenTag = true

	fmt.Println("Generating markdown docs...")

	err := GenMarkdownTreeCustom(cmd, markDownPath, prepender, linkHandler)

	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Generating yaml docs...")
	err = GenYamlTreeCustom(cmd, markDownPath, nil, linkHandler)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Documentation generated at " + markDownPath)
}

// Custom function to generate markdown docs with '-' as separator
func GenMarkdownTreeCustom(cmd *cobra.Command, dir string, filePrepender, linkHandler func(string) string) error {
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		if err := GenMarkdownTreeCustom(c, dir, filePrepender, linkHandler); err != nil {
			return err
		}
	}

	basename := strings.Replace(cmd.CommandPath(), " ", "-", -1) + ".md"
	filename := filepath.Join(dir, basename)
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	if _, err := io.WriteString(f, filePrepender(filename)); err != nil {
		return err
	}
	if err := doc.GenMarkdownCustom(cmd, f, linkHandler); err != nil {
		return err
	}
	return nil
}

func GenYamlTreeCustom(cmd *cobra.Command, dir string, filePrepender, linkHandler func(string) string) error {
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		if err := GenYamlTreeCustom(c, dir, filePrepender, linkHandler); err != nil {
			return err
		}
	}

	basename := "cmds.yaml"
	//filename := filepath.Join(dir, basename)
	f, err := os.OpenFile(basename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	if _, err := io.WriteString(f, ""); err != nil {
		return err
	}
	if err := doc.GenYamlCustom(cmd, f, linkHandler); err != nil {
		return err
	}
	return nil
}
