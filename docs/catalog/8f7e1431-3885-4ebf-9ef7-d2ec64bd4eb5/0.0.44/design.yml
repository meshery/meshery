{
  "id": "8f7e1431-3885-4ebf-9ef7-d2ec64bd4eb5",
  "name": "EC2-CONTROLLER-DESIGN",
  "schemaVersion": "designs.meshery.io/v1beta1",
  "version": "0.0.161",
  "metadata": {
    "resolvedAliases": {
      "2d2bc9b4-62d4-4ad2-a1a8-d660be71cdea": {
        "relationship_id": "9a34d727-5472-4c15-b653-9ba89eaf9a54",
        "alias_component_id": "2d2bc9b4-62d4-4ad2-a1a8-d660be71cdea",
        "immediate_parent_id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
        "immediate_ref_field_path": [
          "configuration",
          "spec",
          "template",
          "spec",
          "containers",
          "0"
        ],
        "resolved_parent_id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
        "resolved_ref_field_path": [
          "configuration",
          "spec",
          "template",
          "spec",
          "containers",
          "0"
        ]
      },
      "3ead23a2-c999-4fbd-9766-42e8f3323ccc": {
        "relationship_id": "6767bd4b-b556-4046-a1b3-8ac4c670920e",
        "alias_component_id": "3ead23a2-c999-4fbd-9766-42e8f3323ccc",
        "immediate_parent_id": "cf26c515-b23f-4142-8442-6f50ab75b918",
        "immediate_ref_field_path": [
          "configuration",
          "spec",
          "containers",
          "0"
        ],
        "resolved_parent_id": "cf26c515-b23f-4142-8442-6f50ab75b918",
        "resolved_ref_field_path": [
          "configuration",
          "spec",
          "containers",
          "0"
        ]
      },
      "5f20ed7a-b052-4516-b0d9-b46f84bb4b6b": {
        "relationship_id": "60834945-fa1d-4bff-820d-670168d85b97",
        "alias_component_id": "5f20ed7a-b052-4516-b0d9-b46f84bb4b6b",
        "immediate_parent_id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
        "immediate_ref_field_path": [
          "configuration",
          "spec",
          "template"
        ],
        "resolved_parent_id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
        "resolved_ref_field_path": [
          "configuration",
          "spec",
          "template"
        ]
      },
      "94e8dc45-f177-4487-a1af-b19782e364bb": {
        "relationship_id": "1115b452-0155-4709-9e25-cd2781b71b91",
        "alias_component_id": "94e8dc45-f177-4487-a1af-b19782e364bb",
        "immediate_parent_id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
        "immediate_ref_field_path": [
          "configuration",
          "spec"
        ],
        "resolved_parent_id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
        "resolved_ref_field_path": [
          "configuration",
          "spec"
        ]
      }
    }
  },
  "components": [
    {
      "id": "0ab09973-f3a1-4ebc-8d0a-3e0e67642b8a",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "The default shape for nodes, displayed as an oval. This shape is useful for general-purpose nodes where no special distinction is required.",
      "format": "JSON",
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "body-text": "3",
        "body-text-color": "#000000",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-style": "solid",
        "border-width": 0,
        "height": 30,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 1207.4872233470915,
          "y": 85.50029839102638
        },
        "primaryColor": "rgb(255,192,52)",
        "secondaryColor": "#00D3A9",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/circle-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/meshery-shapes/complete/circle-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-flowchart/white/onpagereference-white.svg",
        "width": 30,
        "z-index": 41
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "Circle",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "41f5786d-989d-4170-9a48-bd5054b7b1ea",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "The default shape for nodes, displayed as an oval. This shape is useful for general-purpose nodes where no special distinction is required.",
      "format": "JSON",
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "body-text": "4",
        "body-text-color": "#000000",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-style": "solid",
        "border-width": 0,
        "height": 30,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 1198.8985766837038,
          "y": 366.3349574247458
        },
        "primaryColor": "rgb(255,192,52)",
        "secondaryColor": "#00D3A9",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/circle-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/meshery-shapes/complete/circle-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-flowchart/white/onpagereference-white.svg",
        "width": 30,
        "z-index": 44
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "Circle",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "43edf35a-9c3b-4b67-927c-ea4705a4c121",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "The default shape for nodes, displayed as an oval. This shape is useful for general-purpose nodes where no special distinction is required.",
      "format": "JSON",
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "body-text": "1",
        "body-text-color": "#000000",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-style": "solid",
        "border-width": 0,
        "height": 30,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 1194.352984508118,
          "y": -542.0357008786145
        },
        "primaryColor": "rgb(255,192,52)",
        "secondaryColor": "#00D3A9",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/circle-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/meshery-shapes/complete/circle-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-flowchart/white/onpagereference-white.svg",
        "width": 30,
        "z-index": 37
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "Circle",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "b7da9dcc-53cb-4317-bafd-7ea38a84345b",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "The default shape for nodes, displayed as an oval. This shape is useful for general-purpose nodes where no special distinction is required.",
      "format": "JSON",
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "body-text": "2",
        "body-text-color": "#000000",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-style": "solid",
        "border-width": 0,
        "height": 30,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 1196.1684798554702,
          "y": -239.19420465151117
        },
        "primaryColor": "rgb(255,192,52)",
        "secondaryColor": "#00D3A9",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/circle-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/meshery-shapes/complete/circle-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-flowchart/white/onpagereference-white.svg",
        "width": 30,
        "z-index": 39
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "Circle",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "187ceed3-1da8-4906-997b-a9dc73a8866c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.7,
        "body-text": "To deploy this design. First you have to provide the base64 encoded values for your **AWS_ACCESS_KEY** and **AWS_SECRET_ACCESS_KEY** in the secret component.",
        "body-text-color": "rgb(225,225,225)",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-color": "rgb(225,225,225)",
        "border-style": "solid",
        "border-width": 1,
        "height": 163.42836,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 856.1682251323883,
          "y": -537.9812264856273
        },
        "primaryColor": "rgb(66,99,235)",
        "secondaryColor": "#FFDE00",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/textbox-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/textbox-white.svg",
        "width": 365.6565,
        "z-index": 36
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "TextBox",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "2371e85f-35a6-48eb-a561-c9caa93047b1",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.7,
        "body-text": "\nThis EC2 Controller Design is part of the AWS Controllers for Kubernetes (ACK). It includes the **Controller Pod**, necessary **permissions**, and **CRDs** required to provision resources for deploying an EC2 instance. The steps to deploy this controller are listed below.",
        "body-text-color": "#ffffff",
        "body-text-font-size": 30,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-color": "rgb(225,225,225)",
        "border-style": "solid",
        "border-width": 1,
        "height": 229.07767,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 215.75850150631908,
          "y": -886.730087285484
        },
        "primaryColor": "rgb(66,99,235)",
        "secondaryColor": "#FFDE00",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/textbox-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/textbox-white.svg",
        "width": 786.55255,
        "z-index": 42
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "TextBox",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "2b880ea0-2cda-4d21-9f61-a837c50068e4",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.7,
        "body-text": "EC2 CONTROLLER DESIGN",
        "body-text-color": "#ffffff",
        "body-text-font-size": 30,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-color": "rgb(225,225,225)",
        "border-style": "solid",
        "border-width": 2,
        "height": 158.36418,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 237.46200503866422,
          "y": -1159.796203411168
        },
        "primaryColor": "rgb(66,99,235)",
        "secondaryColor": "#FFDE00",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/textbox-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/textbox-white.svg",
        "width": 373.7872,
        "z-index": 35
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "TextBox",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "a465124d-a438-46a5-aaba-a7d86332a3ac",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.7,
        "body-text": "Deploy the Design by clicking on the **Actions** button at the top of the screen and selecting **Deploy**.",
        "body-text-color": "#ffffff",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-color": "rgb(225,225,225)",
        "border-style": "solid",
        "border-width": 1,
        "height": 163.42836,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 861.8313864970772,
          "y": 84.05681257740464
        },
        "primaryColor": "rgb(66,99,235)",
        "secondaryColor": "#FFDE00",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/textbox-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/textbox-white.svg",
        "width": 402.81033,
        "z-index": 40
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "TextBox",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "ae5776f8-18e0-4945-9049-af8d8a943f97",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.7,
        "body-text": "Next, the Pod connects to the Secret via environment variables. This is already configured in the design, but you can verify it by opening the Configuration tab of the Pod, then navigating to **containers** \u003e **env**.",
        "body-text-color": "#ffffff",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-color": "rgb(225,225,225)",
        "border-style": "solid",
        "border-width": 1,
        "height": 163.42836,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 859.7124577232325,
          "y": -237.88887490977777
        },
        "primaryColor": "rgb(66,99,235)",
        "secondaryColor": "#FFDE00",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/textbox-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/textbox-white.svg",
        "width": 402.81033,
        "z-index": 38
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "TextBox",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "f681839f-4093-45ff-a8cf-e17231784830",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:11.261614687Z",
          "updated_at": "2024-10-30T12:08:11.261614687Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.7,
        "body-text": "The next step is deploying the VPC workflow resources. You can do that by cloning this [design](https://playground.meshery.io/extension/meshmap?mode=design\u0026design=45bfbcaf-9fb1-4204-ace3-de33ffd6c6c1).",
        "body-text-color": "rgb(225,225,225)",
        "body-text-font-size": 20,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-color": "rgb(225,225,225)",
        "border-style": "solid",
        "border-width": 1,
        "height": 163.42836,
        "opacity": 1,
        "padding": 6,
        "position": {
          "x": 862.0329434924128,
          "y": 368.66724750008547
        },
        "primaryColor": "rgb(66,99,235)",
        "secondaryColor": "#FFDE00",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/textbox-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/textbox-white.svg",
        "width": 402.81033,
        "z-index": 43
      },
      "capabilities": [
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        },
        {
          "description": "Add text to nodes body",
          "displayName": "Body Text",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "body-text",
          "type": "style",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "TextBox",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "4162e5da-23a0-42ba-9571-b983e1200791",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-ec2-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 22,
        "position": {
          "x": 55.429152747920476,
          "y": -95.2875278999192
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrole-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrole-white.svg",
        "width": 22,
        "z-index": 23
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": null,
          "name": "ack-ec2-controller"
        },
        "rules": [
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "configmaps",
              "secrets"
            ],
            "verbs": [
              "get",
              "list",
              "patch",
              "watch"
            ]
          },
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "namespaces"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "ec2.services.k8s.aws"
            ],
            "resources": [
              "dhcpoptions",
              "elasticipaddresses",
              "flowlogs",
              "instances",
              "internetgateways",
              "natgateways",
              "networkacls",
              "routetables",
              "securitygroups",
              "subnets",
              "transitgateways",
              "vpcendpoints",
              "vpcendpointserviceconfigurations",
              "vpcpeeringconnections",
              "vpcs"
            ],
            "verbs": [
              "create",
              "delete",
              "get",
              "list",
              "patch",
              "update",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "ec2.services.k8s.aws"
            ],
            "resources": [
              "dhcpoptions/status",
              "elasticipaddresses/status",
              "flowlogs/status",
              "instances/status",
              "internetgateways/status",
              "natgateways/status",
              "networkacls/status",
              "routetables/status",
              "securitygroups/status",
              "subnets/status",
              "transitgateways/status",
              "vpcendpoints/status",
              "vpcendpointserviceconfigurations/status",
              "vpcpeeringconnections/status",
              "vpcs/status"
            ],
            "verbs": [
              "get",
              "patch",
              "update"
            ]
          },
          {
            "apiGroups": [
              "services.k8s.aws"
            ],
            "resources": [
              "adoptedresources",
              "fieldexports"
            ],
            "verbs": [
              "create",
              "delete",
              "get",
              "list",
              "patch",
              "update",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "services.k8s.aws"
            ],
            "resources": [
              "adoptedresources/status",
              "fieldexports/status"
            ],
            "verbs": [
              "get",
              "patch",
              "update"
            ]
          }
        ]
      },
      "component": {
        "kind": "ClusterRole",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "c6e41612-314b-48a7-8504-51bdabc54058",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-namespaces-cache-ec2-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 22,
        "position": {
          "x": 140,
          "y": 166
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrole-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrole-white.svg",
        "width": 22,
        "z-index": 22
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "ack-namespaces-cache-ec2-controller"
        },
        "rules": [
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "namespaces"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          }
        ]
      },
      "component": {
        "kind": "ClusterRole",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "f62840d3-3561-419e-b65a-5c7c19303361",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-namespaces-cache-ec2-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 25,
        "position": {
          "x": -97,
          "y": -237
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrolebinding-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrolebinding-white.svg",
        "width": 25,
        "z-index": 24
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "ack-namespaces-cache-ec2-controller"
        },
        "roleRef": {
          "kind": "ClusterRole",
          "name": "ack-namespaces-cache-ec2-controller"
        },
        "subjects": [
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "kind": "ServiceAccount",
            "name": "ack-ec2-controller",
            "namespace": "default"
          }
        ]
      },
      "component": {
        "kind": "ClusterRoleBinding",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "e67dd8c9-b7d3-4a59-8df7-dc20e80a7566",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ec2-chart",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 25,
        "position": {
          "x": -225,
          "y": -109
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrolebinding-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrolebinding-white.svg",
        "width": 25,
        "z-index": 25
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "ec2-chart"
        },
        "roleRef": {
          "kind": "ClusterRole",
          "name": "ack-ec2-controller"
        },
        "subjects": [
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "kind": "ServiceAccount",
            "name": "ack-ec2-controller",
            "namespace": "default"
          }
        ]
      },
      "component": {
        "kind": "ClusterRoleBinding",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "2d2bc9b4-62d4-4ad2-a1a8-d660be71cdea",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "container-pkd",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-01-05T16:57:53.70369661Z",
          "updated_at": "2025-01-05T16:57:53.70369661Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#00D3A9",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/container-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/container-white.svg",
        "z-index": 45
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "Container",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "3ead23a2-c999-4fbd-9766-42e8f3323ccc",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "container-znq",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "ca787272-67cc-ecda-9340-974f01e11ad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-core",
        "displayName": "Meshery Core",
        "status": "enabled",
        "registrant": {
          "id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
          "name": "meshery",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "meshery",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-01-05T16:57:53.70369661Z",
          "updated_at": "2025-01-05T16:57:53.70369661Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/meshery-core-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#00D3A9",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/meshery-core/color/container-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/meshery-core/white/container-white.svg",
        "z-index": 46
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "hasInvalidSchema": true,
        "isAnnotation": true,
        "isNamespaced": false,
        "published": false
      },
      "configuration": {},
      "component": {
        "kind": "Container",
        "schema": "",
        "version": "core.meshery.io/v1alpha1"
      }
    },
    {
      "id": "f82d7b47-26e6-44ad-8c51-3f7a894529b7",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "adoptedresources.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -134,
          "y": 168
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 19
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "adoptedresources.services.k8s.aws"
        },
        "spec": {
          "group": "services.k8s.aws",
          "names": {
            "kind": "AdoptedResource",
            "listKind": "AdoptedResourceList",
            "plural": "adoptedresources",
            "singular": "adoptedresource"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "AdoptedResource is the schema for the AdoptedResource API.",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "AdoptedResourceSpec defines the desired state of the AdoptedResource.",
                      "properties": {
                        "aws": {
                          "description": "AWSIdentifiers provide all unique ways to reference an AWS resource.",
                          "properties": {
                            "additionalKeys": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "AdditionalKeys represents any additional arbitrary identifiers used when\ndescribing the target resource.",
                              "type": "object"
                            },
                            "arn": {
                              "description": "ARN is the AWS Resource Name for the resource. It is a globally\nunique identifier.",
                              "type": "string"
                            },
                            "nameOrID": {
                              "description": "NameOrId is a user-supplied string identifier for the resource. It may\nor may not be globally unique, depending on the type of resource.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "kubernetes": {
                          "description": "ResourceWithMetadata provides the values necessary to create a\nKubernetes resource and override any of its metadata values.",
                          "properties": {
                            "group": {
                              "type": "string"
                            },
                            "kind": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create.\nIt is not possible to use `metav1.ObjectMeta` inside spec, as the controller-gen\nautomatically converts this to an arbitrary string-string map.\nhttps://github.com/kubernetes-sigs/controller-tools/issues/385\n\nActive discussion about inclusion of this field in the spec is happening in this PR:\nhttps://github.com/kubernetes-sigs/controller-tools/pull/395\n\nUntil this is allowed, or if it never is, we will produce a subset of the object meta\nthat contains only the fields which the user is allowed to modify in the metadata.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                                  "type": "object"
                                },
                                "generateName": {
                                  "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                                  "type": "string"
                                },
                                "labels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                                  "type": "object"
                                },
                                "name": {
                                  "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the space within each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces",
                                  "type": "string"
                                },
                                "ownerReferences": {
                                  "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.",
                                  "items": {
                                    "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.",
                                    "properties": {
                                      "apiVersion": {
                                        "description": "API version of the referent.",
                                        "type": "string"
                                      },
                                      "blockOwnerDeletion": {
                                        "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.",
                                        "type": "boolean"
                                      },
                                      "controller": {
                                        "description": "If true, this reference points to the managing controller.",
                                        "type": "boolean"
                                      },
                                      "kind": {
                                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                                        "type": "string"
                                      },
                                      "uid": {
                                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "apiVersion",
                                      "kind",
                                      "name",
                                      "uid"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "required": [
                            "group",
                            "kind"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "aws",
                        "kubernetes"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "AdoptedResourceStatus defines the observed status of the AdoptedResource.",
                      "properties": {
                        "conditions": {
                          "description": "A collection of `ackv1alpha1.Condition` objects that describe the various\nterminal states of the adopted resource CR and its target custom resource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "conditions"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "40e300ba-a2b0-47d4-8951-e968942efb64",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "dhcpoptions.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -38,
          "y": -110
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "dhcpoptions.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "DHCPOptions",
            "listKind": "DHCPOptionsList",
            "plural": "dhcpoptions",
            "singular": "dhcpoptions"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.dhcpOptionsID",
                  "name": "ID",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "DHCPOptions is the Schema for the DHCPOptions API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "DhcpOptionsSpec defines the desired state of DhcpOptions.\n\nDescribes a set of DHCP options.",
                      "properties": {
                        "dhcpConfigurations": {
                          "description": "A DHCP configuration option.",
                          "items": {
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "values": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpc": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "vpcRefs": {
                          "items": {
                            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                            "properties": {
                              "from": {
                                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "dhcpConfigurations"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "DHCPOptionsStatus defines the observed state of DHCPOptions",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "dhcpOptionsID": {
                          "description": "The ID of the set of DHCP options.",
                          "type": "string"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the DHCP options set.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "946746e4-bb92-46e5-86b4-cffae309d23b",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "elasticipaddresses.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -226,
          "y": -16
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 5
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "elasticipaddresses.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "ElasticIPAddress",
            "listKind": "ElasticIPAddressList",
            "plural": "elasticipaddresses",
            "singular": "elasticipaddress"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.allocationID",
                  "name": "ALLOCATION-ID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.publicIP",
                  "name": "PUBLIC-IP",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "ElasticIPAddress is the Schema for the ElasticIPAddresses API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "ElasticIPAddressSpec defines the desired state of ElasticIPAddress.",
                      "properties": {
                        "address": {
                          "description": "[EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address\npool.",
                          "type": "string"
                        },
                        "customerOwnedIPv4Pool": {
                          "description": "The ID of a customer-owned address pool. Use this parameter to let Amazon\nEC2 select an address from the address pool. Alternatively, specify a specific\naddress from the address pool.",
                          "type": "string"
                        },
                        "networkBorderGroup": {
                          "description": "A unique set of Availability Zones, Local Zones, or Wavelength Zones from\nwhich Amazon Web Services advertises IP addresses. Use this parameter to\nlimit the IP address to this location. IP addresses cannot move between network\nborder groups.\n\nUse DescribeAvailabilityZones (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html)\nto view the network border groups.\n\nYou cannot use a network border group with EC2 Classic. If you attempt this\noperation on EC2 Classic, you receive an InvalidParameterCombination error.",
                          "type": "string"
                        },
                        "publicIPv4Pool": {
                          "description": "The ID of an address pool that you own. Use this parameter to let Amazon\nEC2 select an address from the address pool. To specify a specific address\nfrom the address pool, use the Address parameter instead.",
                          "type": "string"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "ElasticIPAddressStatus defines the observed state of ElasticIPAddress",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "allocationID": {
                          "description": "[EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation\nof the Elastic IP address for use with instances in a VPC.",
                          "type": "string"
                        },
                        "carrierIP": {
                          "description": "The carrier IP address. This option is only available for network interfaces\nwhich reside in a subnet in a Wavelength Zone (for example an EC2 instance).",
                          "type": "string"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "customerOwnedIP": {
                          "description": "The customer-owned IP address.",
                          "type": "string"
                        },
                        "publicIP": {
                          "description": "The Elastic IP address.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "c4eb6a26-ccf6-4af2-92e8-a54775be7123",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "fieldexports.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -42,
          "y": 168
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 20
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "fieldexports.services.k8s.aws"
        },
        "spec": {
          "group": "services.k8s.aws",
          "names": {
            "kind": "FieldExport",
            "listKind": "FieldExportList",
            "plural": "fieldexports",
            "singular": "fieldexport"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "FieldExport is the schema for the FieldExport API.",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "FieldExportSpec defines the desired state of the FieldExport.",
                      "properties": {
                        "from": {
                          "description": "ResourceFieldSelector provides the values necessary to identify an individual\nfield on an individual K8s resource.",
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "resource": {
                              "description": "NamespacedResource provides all the values necessary to identify an ACK\nresource of a given type (within the same namespace as the custom resource\ncontaining this type).",
                              "properties": {
                                "group": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "group",
                                "kind",
                                "name"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "path",
                            "resource"
                          ],
                          "type": "object"
                        },
                        "to": {
                          "description": "FieldExportTarget provides the values necessary to identify the\noutput path for a field export.",
                          "properties": {
                            "key": {
                              "description": "Key overrides the default value (`\u003cnamespace\u003e.\u003cFieldExport-resource-name\u003e`) for the FieldExport target",
                              "type": "string"
                            },
                            "kind": {
                              "description": "FieldExportOutputType represents all types that can be produced by a field\nexport operation",
                              "enum": [
                                "configmap",
                                "secret"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace is marked as optional, so we cannot compose `NamespacedName`",
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "from",
                        "to"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "FieldExportStatus defines the observed status of the FieldExport.",
                      "properties": {
                        "conditions": {
                          "description": "A collection of `ackv1alpha1.Condition` objects that describe the various\nrecoverable states of the field CR",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "conditions"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "3f582b79-d6c3-4093-8762-6c73e05cff38",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "flowlogs.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -134,
          "y": -16
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 6
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "flowlogs.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "FlowLog",
            "listKind": "FlowLogList",
            "plural": "flowlogs",
            "singular": "flowlog"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "FlowLog is the Schema for the FlowLogs API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "FlowLogSpec defines the desired state of FlowLog.\n\nDescribes a flow log.",
                      "properties": {
                        "deliverLogsPermissionARN": {
                          "description": "The ARN for the IAM role that permits Amazon EC2 to publish flow logs to\na CloudWatch Logs log group in your account.\n\nIf you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn\nor LogGroupName.",
                          "type": "string"
                        },
                        "destinationOptions": {
                          "description": "The destination options.",
                          "properties": {
                            "fileFormat": {
                              "type": "string"
                            },
                            "hiveCompatiblePartitions": {
                              "type": "boolean"
                            },
                            "perHourPartition": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "logDestination": {
                          "description": "The destination to which the flow log data is to be published. Flow log data\ncan be published to a CloudWatch Logs log group or an Amazon S3 bucket. The\nvalue specified for this parameter depends on the value specified for LogDestinationType.\n\nIf LogDestinationType is not specified or cloud-watch-logs, specify the Amazon\nResource Name (ARN) of the CloudWatch Logs log group. For example, to publish\nto a log group called my-logs, specify arn:aws:logs:us-east-1:123456789012:log-group:my-logs.\nAlternatively, use LogGroupName instead.\n\nIf LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You\ncan also specify a subfolder in the bucket. To specify a subfolder in the\nbucket, use the following ARN format: bucket_ARN/subfolder_name/. For example,\nto specify a subfolder named my-logs in a bucket named my-bucket, use the\nfollowing ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as\na subfolder name. This is a reserved term.",
                          "type": "string"
                        },
                        "logDestinationType": {
                          "description": "The type of destination to which the flow log data is to be published. Flow\nlog data can be published to CloudWatch Logs or Amazon S3. To publish flow\nlog data to CloudWatch Logs, specify cloud-watch-logs. To publish flow log\ndata to Amazon S3, specify s3.\n\nIf you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn\nor LogGroupName.\n\nDefault: cloud-watch-logs",
                          "type": "string"
                        },
                        "logFormat": {
                          "description": "The fields to include in the flow log record, in the order in which they\nshould appear. For a list of available fields, see Flow log records (https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records).\nIf you omit this parameter, the flow log is created using the default format.\nIf you specify this parameter, you must specify at least one field.\n\nSpecify the fields using the ${field-id} format, separated by spaces. For\nthe CLI, surround this parameter value with single quotes on Linux or double\nquotes on Windows.",
                          "type": "string"
                        },
                        "logGroupName": {
                          "description": "The name of a new or existing CloudWatch Logs log group where Amazon EC2\npublishes your flow logs.\n\nIf you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn\nor LogGroupName.",
                          "type": "string"
                        },
                        "maxAggregationInterval": {
                          "description": "The maximum interval of time during which a flow of packets is captured and\naggregated into a flow log record. You can specify 60 seconds (1 minute)\nor 600 seconds (10 minutes).\n\nWhen a network interface is attached to a Nitro-based instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances),\nthe aggregation interval is always 60 seconds or less, regardless of the\nvalue that you specify.\n\nDefault: 600",
                          "format": "int64",
                          "type": "integer"
                        },
                        "resourceID": {
                          "type": "string"
                        },
                        "resourceType": {
                          "description": "The type of resource for which to create the flow log. For example, if you\nspecified a VPC ID for the ResourceId property, specify VPC for this property.",
                          "type": "string"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "trafficType": {
                          "description": "The type of traffic to log. You can log traffic that the resource accepts\nor rejects, or all traffic.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "resourceID",
                        "resourceType"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "FlowLogStatus defines the observed state of FlowLog",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "clientToken": {
                          "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency\nof the request.",
                          "type": "string"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "flowLogID": {
                          "type": "string"
                        },
                        "unsuccessful": {
                          "description": "Information about the flow logs that could not be created successfully.",
                          "items": {
                            "description": "Information about items that were not successfully processed in a batch call.",
                            "properties": {
                              "error": {
                                "description": "Information about the error that occurred. For more information about errors,\nsee Error codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "resourceID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "b89574d4-f253-43a0-aff9-82c3929b3edd",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "instances.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -42,
          "y": -16
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 7
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "instances.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "Instance",
            "listKind": "InstanceList",
            "plural": "instances",
            "singular": "instance"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.instanceID",
                  "name": "ID",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "Instance is the Schema for the Instances API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "InstanceSpec defines the desired state of Instance.\n\nDescribes an instance.",
                      "properties": {
                        "blockDeviceMappings": {
                          "description": "The block device mapping, which defines the EBS volumes and instance store\nvolumes to attach to the instance at launch. For more information, see Block\ndevice mappings (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)\nin the Amazon EC2 User Guide.",
                          "items": {
                            "description": "Describes a block device mapping, which defines the EBS volumes and instance\nstore volumes to attach to an instance at launch.",
                            "properties": {
                              "deviceName": {
                                "type": "string"
                              },
                              "ebs": {
                                "description": "Describes a block device for an EBS volume.",
                                "properties": {
                                  "deleteOnTermination": {
                                    "type": "boolean"
                                  },
                                  "encrypted": {
                                    "type": "boolean"
                                  },
                                  "iops": {
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "kmsKeyID": {
                                    "type": "string"
                                  },
                                  "outpostARN": {
                                    "type": "string"
                                  },
                                  "snapshotID": {
                                    "type": "string"
                                  },
                                  "throughput": {
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "volumeSize": {
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "volumeType": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "noDevice": {
                                "type": "string"
                              },
                              "virtualName": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "capacityReservationSpecification": {
                          "description": "Information about the Capacity Reservation targeting option. If you do not\nspecify this parameter, the instance's Capacity Reservation preference defaults\nto open, which enables it to run in any open Capacity Reservation that has\nmatching attributes (instance type, platform, Availability Zone).",
                          "properties": {
                            "capacityReservationPreference": {
                              "type": "string"
                            },
                            "capacityReservationTarget": {
                              "description": "Describes a target Capacity Reservation or Capacity Reservation group.",
                              "properties": {
                                "capacityReservationID": {
                                  "type": "string"
                                },
                                "capacityReservationResourceGroupARN": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "cpuOptions": {
                          "description": "The CPU options for the instance. For more information, see Optimize CPU\noptions (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html)\nin the Amazon EC2 User Guide.",
                          "properties": {
                            "coreCount": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "threadsPerCore": {
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "creditSpecification": {
                          "description": "The credit option for CPU usage of the burstable performance instance. Valid\nvalues are standard and unlimited. To change this attribute after launch,\nuse ModifyInstanceCreditSpecification (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html).\nFor more information, see Burstable performance instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html)\nin the Amazon EC2 User Guide.\n\nDefault: standard (T2 instances) or unlimited (T3/T3a/T4g instances)\n\nFor T3 instances with host tenancy, only standard is supported.",
                          "properties": {
                            "cpuCredits": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "disableAPIStop": {
                          "description": "Indicates whether an instance is enabled for stop protection. For more information,\nsee Stop protection (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).",
                          "type": "boolean"
                        },
                        "disableAPITermination": {
                          "description": "If you set this parameter to true, you can't terminate the instance using\nthe Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute\nafter launch, use ModifyInstanceAttribute (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html).\nAlternatively, if you set InstanceInitiatedShutdownBehavior to terminate,\nyou can terminate the instance by running the shutdown command from the instance.\n\nDefault: false",
                          "type": "boolean"
                        },
                        "ebsOptimized": {
                          "description": "Indicates whether the instance is optimized for Amazon EBS I/O. This optimization\nprovides dedicated throughput to Amazon EBS and an optimized configuration\nstack to provide optimal Amazon EBS I/O performance. This optimization isn't\navailable with all instance types. Additional usage charges apply when using\nan EBS-optimized instance.\n\nDefault: false",
                          "type": "boolean"
                        },
                        "elasticGPUSpecification": {
                          "description": "An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource\nthat you can attach to your Windows instance to accelerate the graphics performance\nof your applications. For more information, see Amazon EC2 Elastic GPUs (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html)\nin the Amazon EC2 User Guide.",
                          "items": {
                            "description": "A specification for an Elastic Graphics accelerator.",
                            "properties": {
                              "type_": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "elasticInferenceAccelerators": {
                          "description": "An elastic inference accelerator to associate with the instance. Elastic\ninference accelerators are a resource you can attach to your Amazon EC2 instances\nto accelerate your Deep Learning (DL) inference workloads.\n\nYou cannot specify accelerators from different generations in the same request.",
                          "items": {
                            "description": "Describes an elastic inference accelerator.",
                            "properties": {
                              "count": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "type_": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "enclaveOptions": {
                          "description": "Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.\nFor more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html)\nin the Amazon Web Services Nitro Enclaves User Guide.\n\nYou can't enable Amazon Web Services Nitro Enclaves and hibernation on the\nsame instance.",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "hibernationOptions": {
                          "description": "Indicates whether an instance is enabled for hibernation. For more information,\nsee Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)\nin the Amazon EC2 User Guide.\n\nYou can't enable hibernation and Amazon Web Services Nitro Enclaves on the\nsame instance.",
                          "properties": {
                            "configured": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "iamInstanceProfile": {
                          "description": "The name or Amazon Resource Name (ARN) of an IAM instance profile.",
                          "properties": {
                            "arn": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "imageID": {
                          "description": "The ID of the AMI. An AMI ID is required to launch an instance and must be\nspecified here or in a launch template.",
                          "type": "string"
                        },
                        "instanceInitiatedShutdownBehavior": {
                          "description": "Indicates whether an instance stops or terminates when you initiate shutdown\nfrom the instance (using the operating system command for system shutdown).\n\nDefault: stop",
                          "type": "string"
                        },
                        "instanceMarketOptions": {
                          "description": "The market (purchasing) option for the instances.\n\nFor RunInstances, persistent Spot Instance requests are only supported when\nInstanceInterruptionBehavior is set to either hibernate or stop.",
                          "properties": {
                            "marketType": {
                              "type": "string"
                            },
                            "spotOptions": {
                              "description": "The options for Spot Instances.",
                              "properties": {
                                "blockDurationMinutes": {
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "instanceInterruptionBehavior": {
                                  "type": "string"
                                },
                                "maxPrice": {
                                  "type": "string"
                                },
                                "spotInstanceType": {
                                  "type": "string"
                                },
                                "validUntil": {
                                  "format": "date-time",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "instanceType": {
                          "description": "The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)\nin the Amazon EC2 User Guide.\n\nDefault: m1.small",
                          "type": "string"
                        },
                        "ipv6AddressCount": {
                          "description": "[EC2-VPC] The number of IPv6 addresses to associate with the primary network\ninterface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.\nYou cannot specify this option and the option to assign specific IPv6 addresses\nin the same request. You can specify this option if you've specified a minimum\nnumber of instances to launch.\n\nYou cannot specify this option and the network interfaces option in the same\nrequest.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "ipv6Addresses": {
                          "description": "[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with\nthe primary network interface. You cannot specify this option and the option\nto assign a number of IPv6 addresses in the same request. You cannot specify\nthis option if you've specified a minimum number of instances to launch.\n\nYou cannot specify this option and the network interfaces option in the same\nrequest.",
                          "items": {
                            "description": "Describes an IPv6 address.",
                            "properties": {
                              "ipv6Address": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "kernelID": {
                          "description": "The ID of the kernel.\n\nWe recommend that you use PV-GRUB instead of kernels and RAM disks. For more\ninformation, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)\nin the Amazon EC2 User Guide.",
                          "type": "string"
                        },
                        "keyName": {
                          "description": "The name of the key pair. You can create a key pair using CreateKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html)\nor ImportKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).\n\nIf you do not specify a key pair, you can't connect to the instance unless\nyou choose an AMI that is configured to allow users another way to log in.",
                          "type": "string"
                        },
                        "launchTemplate": {
                          "description": "The launch template to use to launch the instances. Any parameters that you\nspecify in RunInstances override the same parameters in the launch template.\nYou can specify either the name or ID of a launch template, but not both.",
                          "properties": {
                            "launchTemplateID": {
                              "type": "string"
                            },
                            "launchTemplateName": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "licenseSpecifications": {
                          "description": "The license configurations.",
                          "items": {
                            "description": "Describes a license configuration.",
                            "properties": {
                              "licenseConfigurationARN": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "maintenanceOptions": {
                          "description": "The maintenance and recovery options for the instance.",
                          "properties": {
                            "autoRecovery": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "maxCount": {
                          "description": "The maximum number of instances to launch. If you specify more instances\nthan Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches\nthe largest possible number of instances above MinCount.\n\nConstraints: Between 1 and the maximum number you're allowed for the specified\ninstance type. For more information about the default limits, and how to\nrequest an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)\nin the Amazon EC2 FAQ.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "metadataOptions": {
                          "description": "The metadata options for the instance. For more information, see Instance\nmetadata and user data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html).",
                          "properties": {
                            "httpEndpoint": {
                              "type": "string"
                            },
                            "httpProtocolIPv6": {
                              "type": "string"
                            },
                            "httpPutResponseHopLimit": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "httpTokens": {
                              "type": "string"
                            },
                            "instanceMetadataTags": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "minCount": {
                          "description": "The minimum number of instances to launch. If you specify a minimum that\nis more instances than Amazon EC2 can launch in the target Availability Zone,\nAmazon EC2 launches no instances.\n\nConstraints: Between 1 and the maximum number you're allowed for the specified\ninstance type. For more information about the default limits, and how to\nrequest an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)\nin the Amazon EC2 General FAQ.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "monitoring": {
                          "description": "Specifies whether detailed monitoring is enabled for the instance.",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "networkInterfaces": {
                          "description": "The network interfaces to associate with the instance. If you specify a network\ninterface, you must specify any security groups and subnets as part of the\nnetwork interface.",
                          "items": {
                            "description": "Describes a network interface.",
                            "properties": {
                              "associateCarrierIPAddress": {
                                "type": "boolean"
                              },
                              "associatePublicIPAddress": {
                                "type": "boolean"
                              },
                              "deleteOnTermination": {
                                "type": "boolean"
                              },
                              "description": {
                                "type": "string"
                              },
                              "deviceIndex": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "interfaceType": {
                                "type": "string"
                              },
                              "ipv4PrefixCount": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "ipv4Prefixes": {
                                "items": {
                                  "description": "Describes the IPv4 prefix option for a network interface.",
                                  "properties": {
                                    "ipv4Prefix": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "ipv6AddressCount": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "ipv6Addresses": {
                                "items": {
                                  "description": "Describes an IPv6 address.",
                                  "properties": {
                                    "ipv6Address": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "ipv6PrefixCount": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "ipv6Prefixes": {
                                "items": {
                                  "description": "Describes the IPv4 prefix option for a network interface.",
                                  "properties": {
                                    "ipv6Prefix": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "networkCardIndex": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "networkInterfaceID": {
                                "type": "string"
                              },
                              "privateIPAddress": {
                                "type": "string"
                              },
                              "privateIPAddresses": {
                                "items": {
                                  "description": "Describes a secondary private IPv4 address for a network interface.",
                                  "properties": {
                                    "primary": {
                                      "type": "boolean"
                                    },
                                    "privateIPAddress": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "secondaryPrivateIPAddressCount": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "subnetID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "placement": {
                          "description": "The placement for the instance.",
                          "properties": {
                            "affinity": {
                              "type": "string"
                            },
                            "availabilityZone": {
                              "type": "string"
                            },
                            "groupName": {
                              "type": "string"
                            },
                            "hostID": {
                              "type": "string"
                            },
                            "hostResourceGroupARN": {
                              "type": "string"
                            },
                            "partitionNumber": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "spreadDomain": {
                              "type": "string"
                            },
                            "tenancy": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "privateDNSNameOptions": {
                          "description": "The options for the instance hostname. The default values are inherited from\nthe subnet.",
                          "properties": {
                            "enableResourceNameDNSAAAARecord": {
                              "type": "boolean"
                            },
                            "enableResourceNameDNSARecord": {
                              "type": "boolean"
                            },
                            "hostnameType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "privateIPAddress": {
                          "description": "[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4\naddress range of the subnet.\n\nOnly one private IP address can be designated as primary. You can't specify\nthis option if you've specified the option to designate a private IP address\nas the primary IP address in a network interface specification. You cannot\nspecify this option if you're launching more than one instance in the request.\n\nYou cannot specify this option and the network interfaces option in the same\nrequest.",
                          "type": "string"
                        },
                        "ramDiskID": {
                          "description": "The ID of the RAM disk to select. Some kernels require additional drivers\nat launch. Check the kernel requirements for information about whether you\nneed to specify a RAM disk. To find kernel requirements, go to the Amazon\nWeb Services Resource Center and search for the kernel ID.\n\nWe recommend that you use PV-GRUB instead of kernels and RAM disks. For more\ninformation, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)\nin the Amazon EC2 User Guide.",
                          "type": "string"
                        },
                        "securityGroupIDs": {
                          "description": "The IDs of the security groups. You can create a security group using CreateSecurityGroup\n(https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html).\n\nIf you specify a network interface, you must specify any security groups\nas part of the network interface.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "securityGroups": {
                          "description": "[EC2-Classic, default VPC] The names of the security groups. For a nondefault\nVPC, you must use security group IDs instead.\n\nIf you specify a network interface, you must specify any security groups\nas part of the network interface.\n\nDefault: Amazon EC2 uses the default security group.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "subnetID": {
                          "description": "[EC2-VPC] The ID of the subnet to launch the instance into.\n\nIf you specify a network interface, you must specify any subnets as part\nof the network interface.",
                          "type": "string"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "userData": {
                          "description": "The user data script to make available to the instance. For more information,\nsee Run commands on your Linux instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html)\nand Run commands on your Windows instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html).\nIf you are using a command line tool, base64-encoding is performed for you,\nand you can load the text from a file. Otherwise, you must provide base64-encoded\ntext. User data is limited to 16 KB.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "InstanceStatus defines the observed state of Instance",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "amiLaunchIndex": {
                          "description": "The AMI launch index, which can be used to find this instance in the launch\ngroup.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "architecture": {
                          "description": "The architecture of the image.",
                          "type": "string"
                        },
                        "bootMode": {
                          "description": "The boot mode of the instance. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html)\nin the Amazon EC2 User Guide.",
                          "type": "string"
                        },
                        "capacityReservationID": {
                          "description": "The ID of the Capacity Reservation.",
                          "type": "string"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "elasticGPUAssociations": {
                          "description": "The Elastic GPU associated with the instance.",
                          "items": {
                            "description": "Describes the association between an instance and an Elastic Graphics accelerator.",
                            "properties": {
                              "elasticGPUAssociationID": {
                                "type": "string"
                              },
                              "elasticGPUAssociationState": {
                                "type": "string"
                              },
                              "elasticGPUAssociationTime": {
                                "type": "string"
                              },
                              "elasticGPUID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "elasticInferenceAcceleratorAssociations": {
                          "description": "The elastic inference accelerator associated with the instance.",
                          "items": {
                            "description": "Describes the association between an instance and an elastic inference accelerator.",
                            "properties": {
                              "elasticInferenceAcceleratorARN": {
                                "type": "string"
                              },
                              "elasticInferenceAcceleratorAssociationID": {
                                "type": "string"
                              },
                              "elasticInferenceAcceleratorAssociationState": {
                                "type": "string"
                              },
                              "elasticInferenceAcceleratorAssociationTime": {
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "enaSupport": {
                          "description": "Specifies whether enhanced networking with ENA is enabled.",
                          "type": "boolean"
                        },
                        "hypervisor": {
                          "description": "The hypervisor type of the instance. The value xen is used for both Xen and\nNitro hypervisors.",
                          "type": "string"
                        },
                        "instanceID": {
                          "description": "The ID of the instance.",
                          "type": "string"
                        },
                        "instanceLifecycle": {
                          "description": "Indicates whether this is a Spot Instance or a Scheduled Instance.",
                          "type": "string"
                        },
                        "ipv6Address": {
                          "description": "The IPv6 address assigned to the instance.",
                          "type": "string"
                        },
                        "launchTime": {
                          "description": "The time the instance was launched.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "licenses": {
                          "description": "The license configurations for the instance.",
                          "items": {
                            "description": "Describes a license configuration.",
                            "properties": {
                              "licenseConfigurationARN": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "outpostARN": {
                          "description": "The Amazon Resource Name (ARN) of the Outpost.",
                          "type": "string"
                        },
                        "platform": {
                          "description": "The value is Windows for Windows instances; otherwise blank.",
                          "type": "string"
                        },
                        "platformDetails": {
                          "description": "The platform details value for the instance. For more information, see AMI\nbilling information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html)\nin the Amazon EC2 User Guide.",
                          "type": "string"
                        },
                        "privateDNSName": {
                          "description": "(IPv4 only) The private DNS hostname name assigned to the instance. This\nDNS hostname can only be used inside the Amazon EC2 network. This name is\nnot available until the instance enters the running state.\n\n[EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private\nDNS hostnames if you've enabled DNS resolution and DNS hostnames in your\nVPC. If you are not using the Amazon-provided DNS server in your VPC, your\ncustom domain name servers must resolve the hostname as appropriate.",
                          "type": "string"
                        },
                        "productCodes": {
                          "description": "The product codes attached to this instance, if applicable.",
                          "items": {
                            "description": "Describes a product code.",
                            "properties": {
                              "productCodeID": {
                                "type": "string"
                              },
                              "productCodeType": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "publicDNSName": {
                          "description": "(IPv4 only) The public DNS name assigned to the instance. This name is not\navailable until the instance enters the running state. For EC2-VPC, this\nname is only available if you've enabled DNS hostnames for your VPC.",
                          "type": "string"
                        },
                        "publicIPAddress": {
                          "description": "The public IPv4 address, or the Carrier IP address assigned to the instance,\nif applicable.\n\nA Carrier IP address only applies to an instance launched in a subnet associated\nwith a Wavelength Zone.",
                          "type": "string"
                        },
                        "rootDeviceName": {
                          "description": "The device name of the root device volume (for example, /dev/sda1).",
                          "type": "string"
                        },
                        "rootDeviceType": {
                          "description": "The root device type used by the AMI. The AMI can use an EBS volume or an\ninstance store volume.",
                          "type": "string"
                        },
                        "sourceDestCheck": {
                          "description": "Indicates whether source/destination checking is enabled.",
                          "type": "boolean"
                        },
                        "spotInstanceRequestID": {
                          "description": "If the request is a Spot Instance request, the ID of the request.",
                          "type": "string"
                        },
                        "sriovNetSupport": {
                          "description": "Specifies whether enhanced networking with the Intel 82599 Virtual Function\ninterface is enabled.",
                          "type": "string"
                        },
                        "state": {
                          "description": "The current state of the instance.",
                          "properties": {
                            "code": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "stateReason": {
                          "description": "The reason for the most recent state transition.",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "stateTransitionReason": {
                          "description": "The reason for the most recent state transition. This might be an empty string.",
                          "type": "string"
                        },
                        "tpmSupport": {
                          "description": "If the instance is configured for NitroTPM support, the value is v2.0. For\nmore information, see NitroTPM (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html)\nin the Amazon EC2 User Guide.",
                          "type": "string"
                        },
                        "usageOperation": {
                          "description": "The usage operation value for the instance. For more information, see AMI\nbilling information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html)\nin the Amazon EC2 User Guide.",
                          "type": "string"
                        },
                        "usageOperationUpdateTime": {
                          "description": "The time that the usage operation was last updated.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "virtualizationType": {
                          "description": "The virtualization type of the instance.",
                          "type": "string"
                        },
                        "vpcID": {
                          "description": "[EC2-VPC] The ID of the VPC in which the instance is running.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "05d84202-0244-48fe-823e-e9ef2e476012",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "internetgateways.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -4,
          "y": -238
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 8
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "internetgateways.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "InternetGateway",
            "listKind": "InternetGatewayList",
            "plural": "internetgateways",
            "singular": "internetgateway"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.internetGatewayID",
                  "name": "ID",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "InternetGateway is the Schema for the InternetGateways API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "InternetGatewaySpec defines the desired state of InternetGateway.\n\nDescribes an internet gateway.",
                      "properties": {
                        "routeTableRefs": {
                          "items": {
                            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                            "properties": {
                              "from": {
                                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "routeTables": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpc": {
                          "description": "The ID of the VPC.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "InternetGatewayStatus defines the observed state of InternetGateway",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "attachments": {
                          "description": "Any VPCs attached to the internet gateway.",
                          "items": {
                            "description": "Describes the attachment of a VPC to an internet gateway or an egress-only\ninternet gateway.",
                            "properties": {
                              "state": {
                                "type": "string"
                              },
                              "vpcID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "internetGatewayID": {
                          "description": "The ID of the internet gateway.",
                          "type": "string"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the internet gateway.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "7664f370-3ff8-491f-9214-cc5c1473a0fd",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "natgateways.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 50,
          "y": -16
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 9
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "natgateways.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "NATGateway",
            "listKind": "NATGatewayList",
            "plural": "natgateways",
            "singular": "natgateway"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.natGatewayID",
                  "name": "ID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.state",
                  "name": "state",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "NATGateway is the Schema for the NATGateways API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "NatGatewaySpec defines the desired state of NatGateway.\n\nDescribes a NAT gateway.",
                      "properties": {
                        "allocationID": {
                          "description": "[Public NAT gateways only] The allocation ID of an Elastic IP address to\nassociate with the NAT gateway. You cannot specify an Elastic IP address\nwith a private NAT gateway. If the Elastic IP address is associated with\nanother resource, you must first disassociate it.",
                          "type": "string"
                        },
                        "allocationRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "connectivityType": {
                          "description": "Indicates whether the NAT gateway supports public or private connectivity.\nThe default is public connectivity.",
                          "type": "string"
                        },
                        "subnetID": {
                          "description": "The subnet in which to create the NAT gateway.",
                          "type": "string"
                        },
                        "subnetRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "NATGatewayStatus defines the observed state of NATGateway",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "createTime": {
                          "description": "The date and time the NAT gateway was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "deleteTime": {
                          "description": "The date and time the NAT gateway was deleted, if applicable.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "failureCode": {
                          "description": "If the NAT gateway could not be created, specifies the error code for the\nfailure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound\n| Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)",
                          "type": "string"
                        },
                        "failureMessage": {
                          "description": "If the NAT gateway could not be created, specifies the error message for\nthe failure, that corresponds to the error code.\n\n   * For InsufficientFreeAddressesInSubnet: \"Subnet has insufficient free\n   addresses to create this NAT gateway\"\n\n   * For Gateway.NotAttached: \"Network vpc-xxxxxxxx has no Internet gateway\n   attached\"\n\n   * For InvalidAllocationID.NotFound: \"Elastic IP address eipalloc-xxxxxxxx\n   could not be associated with this NAT gateway\"\n\n   * For Resource.AlreadyAssociated: \"Elastic IP address eipalloc-xxxxxxxx\n   is already associated\"\n\n   * For InternalError: \"Network interface eni-xxxxxxxx, created and used\n   internally by this NAT gateway is in an invalid state. Please try again.\"\n\n   * For InvalidSubnetID.NotFound: \"The specified subnet subnet-xxxxxxxx\n   does not exist or could not be found.\"",
                          "type": "string"
                        },
                        "natGatewayAddresses": {
                          "description": "Information about the IP addresses and network interface associated with\nthe NAT gateway.",
                          "items": {
                            "description": "Describes the IP addresses and network interface associated with a NAT gateway.",
                            "properties": {
                              "allocationID": {
                                "type": "string"
                              },
                              "networkInterfaceID": {
                                "type": "string"
                              },
                              "privateIP": {
                                "type": "string"
                              },
                              "publicIP": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "natGatewayID": {
                          "description": "The ID of the NAT gateway.",
                          "type": "string"
                        },
                        "provisionedBandwidth": {
                          "description": "Reserved. If you need to sustain traffic greater than the documented limits\n(https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),\ncontact us through the Support Center (https://console.aws.amazon.com/support/home?).",
                          "properties": {
                            "provisionTime": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "provisioned": {
                              "type": "string"
                            },
                            "requestTime": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "requested": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "state": {
                          "description": "The state of the NAT gateway.\n\n   * pending: The NAT gateway is being created and is not ready to process\n   traffic.\n\n   * failed: The NAT gateway could not be created. Check the failureCode\n   and failureMessage fields for the reason.\n\n   * available: The NAT gateway is able to process traffic. This status remains\n   until you delete the NAT gateway, and does not indicate the health of\n   the NAT gateway.\n\n   * deleting: The NAT gateway is in the process of being terminated and\n   may still be processing traffic.\n\n   * deleted: The NAT gateway has been terminated and is no longer processing\n   traffic.",
                          "type": "string"
                        },
                        "vpcID": {
                          "description": "The ID of the VPC in which the NAT gateway is located.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "8f124229-5654-4dc7-8e26-84602d9e0c78",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "networkacls.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -226,
          "y": 76
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 10
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "networkacls.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "NetworkACL",
            "listKind": "NetworkACLList",
            "plural": "networkacls",
            "singular": "networkacl"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.id",
                  "name": "ID",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "NetworkACL is the Schema for the NetworkACLS API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "NetworkAclSpec defines the desired state of NetworkAcl.\n\nDescribes a network ACL.",
                      "properties": {
                        "associations": {
                          "items": {
                            "description": "Describes an association between a network ACL and a subnet.",
                            "properties": {
                              "networkACLAssociationID": {
                                "type": "string"
                              },
                              "networkACLID": {
                                "type": "string"
                              },
                              "subnetID": {
                                "type": "string"
                              },
                              "subnetRef": {
                                "description": "Reference field for SubnetID",
                                "properties": {
                                  "from": {
                                    "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "entries": {
                          "items": {
                            "description": "Describes an entry in a network ACL.",
                            "properties": {
                              "cidrBlock": {
                                "type": "string"
                              },
                              "egress": {
                                "type": "boolean"
                              },
                              "icmpTypeCode": {
                                "description": "Describes the ICMP type and code.",
                                "properties": {
                                  "code": {
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "type_": {
                                    "format": "int64",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "ipv6CIDRBlock": {
                                "type": "string"
                              },
                              "portRange": {
                                "description": "Describes a range of ports.",
                                "properties": {
                                  "from": {
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "to": {
                                    "format": "int64",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "protocol": {
                                "type": "string"
                              },
                              "ruleAction": {
                                "type": "string"
                              },
                              "ruleNumber": {
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpcID": {
                          "description": "The ID of the VPC.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "NetworkACLStatus defines the observed state of NetworkACL",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "id": {
                          "description": "The ID of the network ACL.",
                          "type": "string"
                        },
                        "isDefault": {
                          "description": "Indicates whether this is the default network ACL for the VPC.",
                          "type": "boolean"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the network ACL.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "fe4f674e-3f63-4cdc-9d06-3bdc48ceda7c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "routetables.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -134,
          "y": 76
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 11
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "routetables.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "RouteTable",
            "listKind": "RouteTableList",
            "plural": "routetables",
            "singular": "routetable"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.routeTableID",
                  "name": "ID",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "RouteTable is the Schema for the RouteTables API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "RouteTableSpec defines the desired state of RouteTable.\n\nDescribes a route table.",
                      "properties": {
                        "routes": {
                          "items": {
                            "properties": {
                              "carrierGatewayID": {
                                "type": "string"
                              },
                              "coreNetworkARN": {
                                "type": "string"
                              },
                              "destinationCIDRBlock": {
                                "type": "string"
                              },
                              "destinationIPv6CIDRBlock": {
                                "type": "string"
                              },
                              "destinationPrefixListID": {
                                "type": "string"
                              },
                              "egressOnlyInternetGatewayID": {
                                "type": "string"
                              },
                              "gatewayID": {
                                "type": "string"
                              },
                              "gatewayRef": {
                                "description": "Reference field for GatewayID",
                                "properties": {
                                  "from": {
                                    "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "instanceID": {
                                "type": "string"
                              },
                              "localGatewayID": {
                                "type": "string"
                              },
                              "natGatewayID": {
                                "type": "string"
                              },
                              "natGatewayRef": {
                                "description": "Reference field for NATGatewayID",
                                "properties": {
                                  "from": {
                                    "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "networkInterfaceID": {
                                "type": "string"
                              },
                              "transitGatewayID": {
                                "type": "string"
                              },
                              "transitGatewayRef": {
                                "description": "Reference field for TransitGatewayID",
                                "properties": {
                                  "from": {
                                    "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "vpcEndpointID": {
                                "type": "string"
                              },
                              "vpcEndpointRef": {
                                "description": "Reference field for VPCEndpointID",
                                "properties": {
                                  "from": {
                                    "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "vpcPeeringConnectionID": {
                                "type": "string"
                              },
                              "vpcPeeringConnectionRef": {
                                "description": "Reference field for VPCPeeringConnectionID",
                                "properties": {
                                  "from": {
                                    "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpcID": {
                          "description": "The ID of the VPC.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "RouteTableStatus defines the observed state of RouteTable",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "associations": {
                          "description": "The associations between the route table and one or more subnets or a gateway.",
                          "items": {
                            "description": "Describes an association between a route table and a subnet or gateway.",
                            "properties": {
                              "associationState": {
                                "description": "Describes the state of an association between a route table and a subnet\nor gateway.",
                                "properties": {
                                  "state": {
                                    "type": "string"
                                  },
                                  "statusMessage": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "gatewayID": {
                                "type": "string"
                              },
                              "main": {
                                "type": "boolean"
                              },
                              "routeTableAssociationID": {
                                "type": "string"
                              },
                              "routeTableID": {
                                "type": "string"
                              },
                              "subnetID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the route table.",
                          "type": "string"
                        },
                        "propagatingVGWs": {
                          "description": "Any virtual private gateway (VGW) propagating routes.",
                          "items": {
                            "description": "Describes a virtual private gateway propagating route.",
                            "properties": {
                              "gatewayID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "routeStatuses": {
                          "description": "The routes in the route table.",
                          "items": {
                            "description": "Describes a route in a route table.",
                            "properties": {
                              "carrierGatewayID": {
                                "type": "string"
                              },
                              "coreNetworkARN": {
                                "type": "string"
                              },
                              "destinationCIDRBlock": {
                                "type": "string"
                              },
                              "destinationIPv6CIDRBlock": {
                                "type": "string"
                              },
                              "destinationPrefixListID": {
                                "type": "string"
                              },
                              "egressOnlyInternetGatewayID": {
                                "type": "string"
                              },
                              "gatewayID": {
                                "type": "string"
                              },
                              "instanceID": {
                                "type": "string"
                              },
                              "instanceOwnerID": {
                                "type": "string"
                              },
                              "localGatewayID": {
                                "type": "string"
                              },
                              "natGatewayID": {
                                "type": "string"
                              },
                              "networkInterfaceID": {
                                "type": "string"
                              },
                              "origin": {
                                "type": "string"
                              },
                              "state": {
                                "type": "string"
                              },
                              "transitGatewayID": {
                                "type": "string"
                              },
                              "vpcPeeringConnectionID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "routeTableID": {
                          "description": "The ID of the route table.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "438fd499-9f24-4bf4-90e2-f5f54e71a1a9",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "securitygroups.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -42,
          "y": 76
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 12
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "securitygroups.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "SecurityGroup",
            "listKind": "SecurityGroupList",
            "plural": "securitygroups",
            "singular": "securitygroup"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.id",
                  "name": "ID",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "SecurityGroup is the Schema for the SecurityGroups API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "SecurityGroupSpec defines the desired state of SecurityGroup.\n\nDescribes a security group.",
                      "properties": {
                        "description": {
                          "description": "A description for the security group. This is informational only.\n\nConstraints: Up to 255 characters in length\n\nConstraints for EC2-Classic: ASCII characters\n\nConstraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=\u0026;{}!$*",
                          "type": "string"
                        },
                        "egressRules": {
                          "items": {
                            "description": "Describes a set of permissions for a security group rule.",
                            "properties": {
                              "fromPort": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "ipProtocol": {
                                "type": "string"
                              },
                              "ipRanges": {
                                "items": {
                                  "description": "Describes an IPv4 range.",
                                  "properties": {
                                    "cidrIP": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "ipv6Ranges": {
                                "items": {
                                  "description": "[EC2-VPC only] Describes an IPv6 range.",
                                  "properties": {
                                    "cidrIPv6": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "prefixListIDs": {
                                "items": {
                                  "description": "Describes a prefix list ID.",
                                  "properties": {
                                    "description": {
                                      "type": "string"
                                    },
                                    "prefixListID": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "toPort": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "userIDGroupPairs": {
                                "items": {
                                  "description": "Describes a security group and Amazon Web Services account ID pair.\n\nWe are retiring EC2-Classic on August 15, 2022. We recommend that you migrate\nfrom EC2-Classic to a VPC. For more information, see Migrate from EC2-Classic\nto a VPC (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html)\nin the Amazon Elastic Compute Cloud User Guide.",
                                  "properties": {
                                    "description": {
                                      "type": "string"
                                    },
                                    "groupID": {
                                      "type": "string"
                                    },
                                    "groupName": {
                                      "type": "string"
                                    },
                                    "groupRef": {
                                      "description": "Reference field for GroupID",
                                      "properties": {
                                        "from": {
                                          "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "peeringStatus": {
                                      "type": "string"
                                    },
                                    "userID": {
                                      "type": "string"
                                    },
                                    "vpcID": {
                                      "type": "string"
                                    },
                                    "vpcPeeringConnectionID": {
                                      "type": "string"
                                    },
                                    "vpcRef": {
                                      "description": "Reference field for VPCID",
                                      "properties": {
                                        "from": {
                                          "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "ingressRules": {
                          "items": {
                            "description": "Describes a set of permissions for a security group rule.",
                            "properties": {
                              "fromPort": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "ipProtocol": {
                                "type": "string"
                              },
                              "ipRanges": {
                                "items": {
                                  "description": "Describes an IPv4 range.",
                                  "properties": {
                                    "cidrIP": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "ipv6Ranges": {
                                "items": {
                                  "description": "[EC2-VPC only] Describes an IPv6 range.",
                                  "properties": {
                                    "cidrIPv6": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "prefixListIDs": {
                                "items": {
                                  "description": "Describes a prefix list ID.",
                                  "properties": {
                                    "description": {
                                      "type": "string"
                                    },
                                    "prefixListID": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "toPort": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "userIDGroupPairs": {
                                "items": {
                                  "description": "Describes a security group and Amazon Web Services account ID pair.\n\nWe are retiring EC2-Classic on August 15, 2022. We recommend that you migrate\nfrom EC2-Classic to a VPC. For more information, see Migrate from EC2-Classic\nto a VPC (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html)\nin the Amazon Elastic Compute Cloud User Guide.",
                                  "properties": {
                                    "description": {
                                      "type": "string"
                                    },
                                    "groupID": {
                                      "type": "string"
                                    },
                                    "groupName": {
                                      "type": "string"
                                    },
                                    "groupRef": {
                                      "description": "Reference field for GroupID",
                                      "properties": {
                                        "from": {
                                          "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "peeringStatus": {
                                      "type": "string"
                                    },
                                    "userID": {
                                      "type": "string"
                                    },
                                    "vpcID": {
                                      "type": "string"
                                    },
                                    "vpcPeeringConnectionID": {
                                      "type": "string"
                                    },
                                    "vpcRef": {
                                      "description": "Reference field for VPCID",
                                      "properties": {
                                        "from": {
                                          "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "The name of the security group.\n\nConstraints: Up to 255 characters in length. Cannot start with sg-.\n\nConstraints for EC2-Classic: ASCII characters\n\nConstraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=\u0026;{}!$*",
                          "type": "string"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpcID": {
                          "description": "[EC2-VPC] The ID of the VPC. Required for EC2-VPC.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "description",
                        "name"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "SecurityGroupStatus defines the observed state of SecurityGroup",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "id": {
                          "description": "The ID of the security group.",
                          "type": "string"
                        },
                        "rules": {
                          "description": "Information about security group rules.",
                          "items": {
                            "description": "Describes a security group rule.",
                            "properties": {
                              "cidrIPv4": {
                                "type": "string"
                              },
                              "cidrIPv6": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "fromPort": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "ipProtocol": {
                                "type": "string"
                              },
                              "isEgress": {
                                "type": "boolean"
                              },
                              "prefixListID": {
                                "type": "string"
                              },
                              "securityGroupRuleID": {
                                "type": "string"
                              },
                              "tags": {
                                "items": {
                                  "description": "Describes a tag.",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "toPort": {
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "0e973ea4-1688-4f30-8f2d-97a0dca1714f",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "subnets.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 50,
          "y": 76
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 13
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "subnets.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "Subnet",
            "listKind": "SubnetList",
            "plural": "subnets",
            "singular": "subnet"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.subnetID",
                  "name": "ID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.state",
                  "name": "state",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "Subnet is the Schema for the Subnets API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "SubnetSpec defines the desired state of Subnet.\n\nDescribes a subnet.",
                      "properties": {
                        "assignIPv6AddressOnCreation": {
                          "type": "boolean"
                        },
                        "availabilityZone": {
                          "description": "The Availability Zone or Local Zone for the subnet.\n\nDefault: Amazon Web Services selects one for you. If you create more than\none subnet in your VPC, we do not necessarily select a different zone for\neach subnet.\n\nTo create a subnet in a Local Zone, set this value to the Local Zone ID,\nfor example us-west-2-lax-1a. For information about the Regions that support\nLocal Zones, see Available Regions (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions)\nin the Amazon Elastic Compute Cloud User Guide.\n\nTo create a subnet in an Outpost, set this value to the Availability Zone\nfor the Outpost and specify the Outpost ARN.",
                          "type": "string"
                        },
                        "availabilityZoneID": {
                          "description": "The AZ ID or the Local Zone ID of the subnet.",
                          "type": "string"
                        },
                        "cidrBlock": {
                          "description": "The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.\nWe modify the specified CIDR block to its canonical form; for example, if\nyou specify 100.68.0.18/18, we modify it to 100.68.0.0/18.\n\nThis parameter is not supported for an IPv6 only subnet.",
                          "type": "string"
                        },
                        "customerOwnedIPv4Pool": {
                          "type": "string"
                        },
                        "enableDNS64": {
                          "type": "boolean"
                        },
                        "enableResourceNameDNSAAAARecord": {
                          "type": "boolean"
                        },
                        "enableResourceNameDNSARecord": {
                          "type": "boolean"
                        },
                        "hostnameType": {
                          "type": "string"
                        },
                        "ipv6CIDRBlock": {
                          "description": "The IPv6 network range for the subnet, in CIDR notation. The subnet size\nmust use a /64 prefix length.\n\nThis parameter is required for an IPv6 only subnet.",
                          "type": "string"
                        },
                        "ipv6Native": {
                          "description": "Indicates whether to create an IPv6 only subnet.",
                          "type": "boolean"
                        },
                        "mapPublicIPOnLaunch": {
                          "type": "boolean"
                        },
                        "outpostARN": {
                          "description": "The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost\nARN, you must also specify the Availability Zone of the Outpost subnet.",
                          "type": "string"
                        },
                        "routeTableRefs": {
                          "items": {
                            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                            "properties": {
                              "from": {
                                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "routeTables": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpcID": {
                          "description": "The ID of the VPC.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "SubnetStatus defines the observed state of Subnet",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "availableIPAddressCount": {
                          "description": "The number of unused private IPv4 addresses in the subnet. The IPv4 addresses\nfor any stopped instances are considered unavailable.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "defaultForAZ": {
                          "description": "Indicates whether this is the default subnet for the Availability Zone.",
                          "type": "boolean"
                        },
                        "enableLniAtDeviceIndex": {
                          "description": "Indicates the device position for local network interfaces in this subnet.\nFor example, 1 indicates local network interfaces in this subnet are the\nsecondary network interface (eth1).",
                          "format": "int64",
                          "type": "integer"
                        },
                        "ipv6CIDRBlockAssociationSet": {
                          "description": "Information about the IPv6 CIDR blocks associated with the subnet.",
                          "items": {
                            "description": "Describes an association between a subnet and an IPv6 CIDR block.",
                            "properties": {
                              "associationID": {
                                "type": "string"
                              },
                              "ipv6CIDRBlock": {
                                "type": "string"
                              },
                              "ipv6CIDRBlockState": {
                                "description": "Describes the state of a CIDR block.",
                                "properties": {
                                  "state": {
                                    "type": "string"
                                  },
                                  "statusMessage": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "mapCustomerOwnedIPOnLaunch": {
                          "description": "Indicates whether a network interface created in this subnet (including a\nnetwork interface created by RunInstances) receives a customer-owned IPv4\naddress.",
                          "type": "boolean"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the subnet.",
                          "type": "string"
                        },
                        "privateDNSNameOptionsOnLaunch": {
                          "description": "The type of hostnames to assign to instances in the subnet at launch. An\ninstance hostname is based on the IPv4 address or ID of the instance.",
                          "properties": {
                            "enableResourceNameDNSAAAARecord": {
                              "type": "boolean"
                            },
                            "enableResourceNameDNSARecord": {
                              "type": "boolean"
                            },
                            "hostnameType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "state": {
                          "description": "The current state of the subnet.",
                          "type": "string"
                        },
                        "subnetID": {
                          "description": "The ID of the subnet.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "1890d07c-5413-41ed-8a16-c901fb28cdd6",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "transitgateways.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 54,
          "y": -110
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 14
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "transitgateways.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "TransitGateway",
            "listKind": "TransitGatewayList",
            "plural": "transitgateways",
            "singular": "transitgateway"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.transitGatewayID",
                  "name": "ID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.state",
                  "name": "state",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "TransitGateway is the Schema for the TransitGateways API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "TransitGatewaySpec defines the desired state of TransitGateway.\n\nDescribes a transit gateway.",
                      "properties": {
                        "description": {
                          "description": "A description of the transit gateway.",
                          "type": "string"
                        },
                        "options": {
                          "description": "The transit gateway options.",
                          "properties": {
                            "amazonSideASN": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "autoAcceptSharedAttachments": {
                              "type": "string"
                            },
                            "defaultRouteTableAssociation": {
                              "type": "string"
                            },
                            "defaultRouteTablePropagation": {
                              "type": "string"
                            },
                            "dnsSupport": {
                              "type": "string"
                            },
                            "multicastSupport": {
                              "type": "string"
                            },
                            "transitGatewayCIDRBlocks": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "vpnECMPSupport": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "TransitGatewayStatus defines the observed state of TransitGateway",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "creationTime": {
                          "description": "The creation time.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the transit gateway.",
                          "type": "string"
                        },
                        "state": {
                          "description": "The state of the transit gateway.",
                          "type": "string"
                        },
                        "transitGatewayID": {
                          "description": "The ID of the transit gateway.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "c921cbaa-b976-491f-b139-7375d804c320",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "vpcendpoints.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 88,
          "y": -238
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 15
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "vpcendpoints.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "VPCEndpoint",
            "listKind": "VPCEndpointList",
            "plural": "vpcendpoints",
            "singular": "vpcendpoint"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.vpcEndpointID",
                  "name": "ID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.state",
                  "name": "state",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "VPCEndpoint is the Schema for the VPCEndpoints API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "VpcEndpointSpec defines the desired state of VpcEndpoint.\n\nDescribes a VPC endpoint.",
                      "properties": {
                        "dnsOptions": {
                          "description": "The DNS options for the endpoint.",
                          "properties": {
                            "dnsRecordIPType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "ipAddressType": {
                          "description": "The IP address type for the endpoint.",
                          "type": "string"
                        },
                        "policyDocument": {
                          "description": "(Interface and gateway endpoints) A policy to attach to the endpoint that\ncontrols access to the service. The policy must be in valid JSON format.\nIf this parameter is not specified, we attach a default policy that allows\nfull access to the service.",
                          "type": "string"
                        },
                        "privateDNSEnabled": {
                          "description": "(Interface endpoint) Indicates whether to associate a private hosted zone\nwith the specified VPC. The private hosted zone contains a record set for\nthe default public DNS name for the service for the Region (for example,\nkinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses\nof the endpoint network interfaces in the VPC. This enables you to make requests\nto the default public DNS name for the service instead of the public DNS\nnames that are automatically generated by the VPC endpoint service.\n\nTo use a private hosted zone, you must set the following VPC attributes to\ntrue: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to\nset the VPC attributes.\n\nDefault: true",
                          "type": "boolean"
                        },
                        "routeTableIDs": {
                          "description": "(Gateway endpoint) One or more route table IDs.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "routeTableRefs": {
                          "items": {
                            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                            "properties": {
                              "from": {
                                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "securityGroupIDs": {
                          "description": "(Interface endpoint) The ID of one or more security groups to associate with\nthe endpoint network interface.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "securityGroupRefs": {
                          "items": {
                            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                            "properties": {
                              "from": {
                                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "serviceName": {
                          "description": "The service name. To get a list of available services, use the DescribeVpcEndpointServices\nrequest, or get the name from the service provider.",
                          "type": "string"
                        },
                        "subnetIDs": {
                          "description": "(Interface and Gateway Load Balancer endpoints) The ID of one or more subnets\nin which to create an endpoint network interface. For a Gateway Load Balancer\nendpoint, you can specify one subnet only.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "subnetRefs": {
                          "items": {
                            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                            "properties": {
                              "from": {
                                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpcEndpointType": {
                          "description": "The type of endpoint.\n\nDefault: Gateway",
                          "type": "string"
                        },
                        "vpcID": {
                          "description": "The ID of the VPC in which the endpoint will be used.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "serviceName"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "VPCEndpointStatus defines the observed state of VPCEndpoint",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "creationTimestamp": {
                          "description": "The date and time that the endpoint was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "dnsEntries": {
                          "description": "(Interface endpoint) The DNS entries for the endpoint.",
                          "items": {
                            "description": "Describes a DNS entry.",
                            "properties": {
                              "dnsName": {
                                "type": "string"
                              },
                              "hostedZoneID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "groups": {
                          "description": "(Interface endpoint) Information about the security groups that are associated\nwith the network interface.",
                          "items": {
                            "description": "Describes a security group.",
                            "properties": {
                              "groupID": {
                                "type": "string"
                              },
                              "groupName": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "lastError": {
                          "description": "The last error that occurred for endpoint.",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "networkInterfaceIDs": {
                          "description": "(Interface endpoint) One or more network interfaces for the endpoint.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the endpoint.",
                          "type": "string"
                        },
                        "requesterManaged": {
                          "description": "Indicates whether the endpoint is being managed by its service.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "The state of the endpoint.",
                          "type": "string"
                        },
                        "vpcEndpointID": {
                          "description": "The ID of the endpoint.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "bde55960-77ec-4084-a48f-7ec73745b91a",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "vpcendpointserviceconfigurations.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 142,
          "y": -16
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 16
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "vpcendpointserviceconfigurations.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "VPCEndpointServiceConfiguration",
            "listKind": "VPCEndpointServiceConfigurationList",
            "plural": "vpcendpointserviceconfigurations",
            "singular": "vpcendpointserviceconfiguration"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.serviceID",
                  "name": "ServiceID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.serviceState",
                  "name": "ServiceState",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "VPCEndpointServiceConfiguration is the Schema for the VPCEndpointServiceConfigurations API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "VpcEndpointServiceConfigurationSpec defines the desired state of VpcEndpointServiceConfiguration.",
                      "properties": {
                        "acceptanceRequired": {
                          "description": "Indicates whether requests from service consumers to create an endpoint to\nyour service must be accepted manually.",
                          "type": "boolean"
                        },
                        "allowedPrincipals": {
                          "description": "The Amazon Resource Names (ARN) of one or more principals. Permissions are\ngranted to the principals in this list. To grant permissions to all principals,\nspecify an asterisk (*).",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "gatewayLoadBalancerARNs": {
                          "description": "The Amazon Resource Names (ARNs) of one or more Gateway Load Balancers.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "networkLoadBalancerARNs": {
                          "description": "The Amazon Resource Names (ARNs) of one or more Network Load Balancers for\nyour service.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "privateDNSName": {
                          "description": "(Interface endpoint configuration) The private DNS name to assign to the\nVPC endpoint service.",
                          "type": "string"
                        },
                        "supportedIPAddressTypes": {
                          "description": "The supported IP address types. The possible values are ipv4 and ipv6.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "VPCEndpointServiceConfigurationStatus defines the observed state of VPCEndpointServiceConfiguration",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "availabilityZones": {
                          "description": "The Availability Zones in which the service is available.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "baseEndpointDNSNames": {
                          "description": "The DNS names for the service.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "managesVPCEndpoints": {
                          "description": "Indicates whether the service manages its VPC endpoints. Management of the\nservice VPC endpoints using the VPC endpoint API is restricted.",
                          "type": "boolean"
                        },
                        "payerResponsibility": {
                          "description": "The payer responsibility.",
                          "type": "string"
                        },
                        "privateDNSNameConfiguration": {
                          "description": "Information about the endpoint service private DNS name configuration.",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "state": {
                              "type": "string"
                            },
                            "type_": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "serviceID": {
                          "description": "The ID of the service.",
                          "type": "string"
                        },
                        "serviceName": {
                          "description": "The name of the service.",
                          "type": "string"
                        },
                        "serviceState": {
                          "description": "The service state.",
                          "type": "string"
                        },
                        "serviceType": {
                          "description": "The type of service.",
                          "items": {
                            "description": "Describes the type of service for a VPC endpoint.",
                            "properties": {
                              "serviceType": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "215d0311-266e-4e5f-b91f-eef973579404",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "vpcpeeringconnections.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 142,
          "y": 76
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 17
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "vpcpeeringconnections.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "VPCPeeringConnection",
            "listKind": "VPCPeeringConnectionList",
            "plural": "vpcpeeringconnections",
            "singular": "vpcpeeringconnection"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "VPCPeeringConnection is the Schema for the VPCPeeringConnections API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "VpcPeeringConnectionSpec defines the desired state of VpcPeeringConnection.\n\nDescribes a VPC peering connection.",
                      "properties": {
                        "acceptRequest": {
                          "type": "boolean"
                        },
                        "accepterPeeringConnectionOptions": {
                          "description": "The VPC peering connection options for the accepter VPC.",
                          "properties": {
                            "allowDNSResolutionFromRemoteVPC": {
                              "type": "boolean"
                            },
                            "allowEgressFromLocalClassicLinkToRemoteVPC": {
                              "type": "boolean"
                            },
                            "allowEgressFromLocalVPCToRemoteClassicLink": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "peerOwnerID": {
                          "description": "The Amazon Web Services account ID of the owner of the accepter VPC.\n\nDefault: Your Amazon Web Services account ID",
                          "type": "string"
                        },
                        "peerRegion": {
                          "description": "The Region code for the accepter VPC, if the accepter VPC is located in a\nRegion other than the Region in which you make the request.\n\nDefault: The Region in which you make the request.",
                          "type": "string"
                        },
                        "peerVPCID": {
                          "description": "The ID of the VPC with which you are creating the VPC peering connection.\nYou must specify this parameter in the request.",
                          "type": "string"
                        },
                        "peerVPCRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "requesterPeeringConnectionOptions": {
                          "description": "The VPC peering connection options for the requester VPC.",
                          "properties": {
                            "allowDNSResolutionFromRemoteVPC": {
                              "type": "boolean"
                            },
                            "allowEgressFromLocalClassicLinkToRemoteVPC": {
                              "type": "boolean"
                            },
                            "allowEgressFromLocalVPCToRemoteClassicLink": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "vpcID": {
                          "description": "The ID of the requester VPC. You must specify this parameter in the request.",
                          "type": "string"
                        },
                        "vpcRef": {
                          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
                          "properties": {
                            "from": {
                              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "VPCPeeringConnectionStatus defines the observed state of VPCPeeringConnection",
                      "properties": {
                        "accepterVPCInfo": {
                          "description": "Information about the accepter VPC. CIDR block information is only returned\nwhen describing an active VPC peering connection.",
                          "properties": {
                            "cidrBlock": {
                              "type": "string"
                            },
                            "cidrBlockSet": {
                              "items": {
                                "description": "Describes an IPv4 CIDR block.",
                                "properties": {
                                  "cidrBlock": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ipv6CIDRBlockSet": {
                              "items": {
                                "description": "Describes an IPv6 CIDR block.",
                                "properties": {
                                  "ipv6CIDRBlock": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ownerID": {
                              "type": "string"
                            },
                            "peeringOptions": {
                              "description": "We are retiring EC2-Classic on August 15, 2022. We recommend that you migrate\nfrom EC2-Classic to a VPC. For more information, see Migrate from EC2-Classic\nto a VPC (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html)\nin the Amazon Elastic Compute Cloud User Guide.\n\nDescribes the VPC peering connection options.",
                              "properties": {
                                "allowDNSResolutionFromRemoteVPC": {
                                  "type": "boolean"
                                },
                                "allowEgressFromLocalClassicLinkToRemoteVPC": {
                                  "type": "boolean"
                                },
                                "allowEgressFromLocalVPCToRemoteClassicLink": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "region": {
                              "type": "string"
                            },
                            "vpcID": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "expirationTime": {
                          "description": "The time that an unaccepted VPC peering connection will expire.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "requesterVPCInfo": {
                          "description": "Information about the requester VPC. CIDR block information is only returned\nwhen describing an active VPC peering connection.",
                          "properties": {
                            "cidrBlock": {
                              "type": "string"
                            },
                            "cidrBlockSet": {
                              "items": {
                                "description": "Describes an IPv4 CIDR block.",
                                "properties": {
                                  "cidrBlock": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ipv6CIDRBlockSet": {
                              "items": {
                                "description": "Describes an IPv6 CIDR block.",
                                "properties": {
                                  "ipv6CIDRBlock": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ownerID": {
                              "type": "string"
                            },
                            "peeringOptions": {
                              "description": "We are retiring EC2-Classic on August 15, 2022. We recommend that you migrate\nfrom EC2-Classic to a VPC. For more information, see Migrate from EC2-Classic\nto a VPC (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html)\nin the Amazon Elastic Compute Cloud User Guide.\n\nDescribes the VPC peering connection options.",
                              "properties": {
                                "allowDNSResolutionFromRemoteVPC": {
                                  "type": "boolean"
                                },
                                "allowEgressFromLocalClassicLinkToRemoteVPC": {
                                  "type": "boolean"
                                },
                                "allowEgressFromLocalVPCToRemoteClassicLink": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "region": {
                              "type": "string"
                            },
                            "vpcID": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "status": {
                          "description": "The status of the VPC peering connection.",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "vpcPeeringConnectionID": {
                          "description": "The ID of the VPC peering connection.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "1c711f52-2f0f-4ee6-a16a-200c32458f6f",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "vpcs.ec2.services.k8s.aws",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": -226,
          "y": 168
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg",
        "z-index": 18
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.2"
          },
          "name": "vpcs.ec2.services.k8s.aws"
        },
        "spec": {
          "group": "ec2.services.k8s.aws",
          "names": {
            "kind": "VPC",
            "listKind": "VPCList",
            "plural": "vpcs",
            "singular": "vpc"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".status.vpcID",
                  "name": "ID",
                  "type": "string"
                },
                {
                  "jsonPath": ".status.state",
                  "name": "state",
                  "type": "string"
                }
              ],
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "VPC is the Schema for the VPCS API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "VpcSpec defines the desired state of Vpc.\n\nDescribes a VPC.",
                      "properties": {
                        "amazonProvidedIPv6CIDRBlock": {
                          "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for\nthe VPC. You cannot specify the range of IP addresses, or the size of the\nCIDR block.",
                          "type": "boolean"
                        },
                        "cidrBlocks": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "disallowSecurityGroupDefaultRules": {
                          "type": "boolean"
                        },
                        "enableDNSHostnames": {
                          "description": "The attribute value. The valid values are true or false.",
                          "type": "boolean"
                        },
                        "enableDNSSupport": {
                          "description": "The attribute value. The valid values are true or false.",
                          "type": "boolean"
                        },
                        "instanceTenancy": {
                          "description": "The tenancy options for instances launched into the VPC. For default, instances\nare launched with shared tenancy by default. You can launch instances with\nany tenancy into a shared tenancy VPC. For dedicated, instances are launched\nas dedicated tenancy instances by default. You can only launch instances\nwith a tenancy of dedicated or host into a dedicated tenancy VPC.\n\nImportant: The host value cannot be used with this parameter. Use the default\nor dedicated values only.\n\nDefault: default",
                          "type": "string"
                        },
                        "ipv4IPAMPoolID": {
                          "description": "The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR.\nFor more information, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html)\nin the Amazon VPC IPAM User Guide.",
                          "type": "string"
                        },
                        "ipv4NetmaskLength": {
                          "description": "The netmask length of the IPv4 CIDR you want to allocate to this VPC from\nan Amazon VPC IP Address Manager (IPAM) pool. For more information about\nIPAM, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html)\nin the Amazon VPC IPAM User Guide.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "ipv6CIDRBlock": {
                          "description": "The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool\nin the request.\n\nTo let Amazon choose the IPv6 CIDR block for you, omit this parameter.",
                          "type": "string"
                        },
                        "ipv6CIDRBlockNetworkBorderGroup": {
                          "description": "The name of the location from which we advertise the IPV6 CIDR block. Use\nthis parameter to limit the address to this location.\n\nYou must set AmazonProvidedIpv6CidrBlock to true to use this parameter.",
                          "type": "string"
                        },
                        "ipv6IPAMPoolID": {
                          "description": "The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6\nCIDR. IPAM is a VPC feature that you can use to automate your IP address\nmanagement workflows including assigning, tracking, troubleshooting, and\nauditing IP addresses across Amazon Web Services Regions and accounts throughout\nyour Amazon Web Services Organization. For more information, see What is\nIPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html)\nin the Amazon VPC IPAM User Guide.",
                          "type": "string"
                        },
                        "ipv6NetmaskLength": {
                          "description": "The netmask length of the IPv6 CIDR you want to allocate to this VPC from\nan Amazon VPC IP Address Manager (IPAM) pool. For more information about\nIPAM, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html)\nin the Amazon VPC IPAM User Guide.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "ipv6Pool": {
                          "description": "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.",
                          "type": "string"
                        },
                        "tags": {
                          "description": "The tags. The value parameter is required, but if you don't want the tag\nto have a value, specify the parameter with no value, and we set the value\nto an empty string.",
                          "items": {
                            "description": "Describes a tag.",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "cidrBlocks"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "VPCStatus defines the observed state of VPC",
                      "properties": {
                        "ackResourceMetadata": {
                          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
                          "properties": {
                            "arn": {
                              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
                              "type": "string"
                            },
                            "ownerAccountID": {
                              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
                              "type": "string"
                            },
                            "region": {
                              "description": "Region is the AWS region in which the resource exists or will exist.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ownerAccountID",
                            "region"
                          ],
                          "type": "object"
                        },
                        "cidrBlockAssociationSet": {
                          "description": "Information about the IPv4 CIDR blocks associated with the VPC.",
                          "items": {
                            "description": "Describes an IPv4 CIDR block associated with a VPC.",
                            "properties": {
                              "associationID": {
                                "type": "string"
                              },
                              "cidrBlock": {
                                "type": "string"
                              },
                              "cidrBlockState": {
                                "description": "Describes the state of a CIDR block.",
                                "properties": {
                                  "state": {
                                    "type": "string"
                                  },
                                  "statusMessage": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "conditions": {
                          "description": "All CRS managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
                          "items": {
                            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "A human readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type is the type of the Condition",
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "dhcpOptionsID": {
                          "description": "The ID of the set of DHCP options you've associated with the VPC.",
                          "type": "string"
                        },
                        "ipv6CIDRBlockAssociationSet": {
                          "description": "Information about the IPv6 CIDR blocks associated with the VPC.",
                          "items": {
                            "description": "Describes an IPv6 CIDR block associated with a VPC.",
                            "properties": {
                              "associationID": {
                                "type": "string"
                              },
                              "ipv6CIDRBlock": {
                                "type": "string"
                              },
                              "ipv6CIDRBlockState": {
                                "description": "Describes the state of a CIDR block.",
                                "properties": {
                                  "state": {
                                    "type": "string"
                                  },
                                  "statusMessage": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "ipv6Pool": {
                                "type": "string"
                              },
                              "networkBorderGroup": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "isDefault": {
                          "description": "Indicates whether the VPC is the default VPC.",
                          "type": "boolean"
                        },
                        "ownerID": {
                          "description": "The ID of the Amazon Web Services account that owns the VPC.",
                          "type": "string"
                        },
                        "securityGroupDefaultRulesExist": {
                          "type": "boolean"
                        },
                        "state": {
                          "description": "The current state of the VPC.",
                          "type": "string"
                        },
                        "vpcID": {
                          "description": "The ID of the VPC.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "kind": "CustomResourceDefinition",
        "schema": "",
        "version": "apiextensions.k8s.io/v1"
      }
    },
    {
      "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ec2-chart",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "position": {
          "x": 417.93078182188,
          "y": -199.13196724053597
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/deployment-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/deployment-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/deployment-white.svg",
        "z-index": 29
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "parent",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "ec2-chart",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "ec2-chart",
            "app.kubernetes.io/version": "1.3.0",
            "helm.sh/chart": "ec2-chart-1.3.0",
            "k8s-app": "ec2-chart"
          },
          "name": "ec2-chart",
          "namespace": "ack-system"
        },
        "rules": [],
        "spec": {
          "replicas": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/instance": "ec2-chart",
              "app.kubernetes.io/name": "ec2-chart"
            }
          },
          "template": {
            "metadata": {
              "labels": {
                "app.kubernetes.io/instance": "ec2-chart",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "ec2-chart",
                "k8s-app": "ec2-chart"
              }
            },
            "spec": {
              "containers": [
                {
                  "args": [
                    "--aws-region",
                    "$(AWS_REGION)",
                    "--aws-endpoint-url",
                    "$(AWS_ENDPOINT_URL)",
                    "--log-level",
                    "$(ACK_LOG_LEVEL)",
                    "--resource-tags",
                    "$(ACK_RESOURCE_TAGS)",
                    "--watch-namespace",
                    "$(ACK_WATCH_NAMESPACE)",
                    "--deletion-policy",
                    "$(DELETION_POLICY)",
                    "--reconcile-default-resync-seconds",
                    "$(RECONCILE_DEFAULT_RESYNC_SECONDS)",
                    "--reconcile-default-max-concurrent-syncs",
                    "$(RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS)",
                    "--feature-gates",
                    "$(FEATURE_GATES)"
                  ],
                  "command": [
                    "./bin/controller"
                  ],
                  "env": [
                    {
                      "name": "ACK_SYSTEM_NAMESPACE",
                      "valueFrom": {
                        "fieldRef": {
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    },
                    {
                      "name": "AWS_REGION",
                      "value": null
                    },
                    {
                      "name": "AWS_ENDPOINT_URL",
                      "value": ""
                    },
                    {
                      "name": "ACK_WATCH_NAMESPACE",
                      "value": null
                    },
                    {
                      "name": "DELETION_POLICY",
                      "value": "delete"
                    },
                    {
                      "name": "LEADER_ELECTION_NAMESPACE",
                      "value": ""
                    },
                    {
                      "name": "ACK_LOG_LEVEL",
                      "value": "info"
                    },
                    {
                      "name": "ACK_RESOURCE_TAGS",
                      "value": "services.k8s.aws/controller-version=%CONTROLLER_SERVICE%-%CONTROLLER_VERSION%,services.k8s.aws/namespace=%K8S_NAMESPACE%"
                    },
                    {
                      "name": "RECONCILE_DEFAULT_RESYNC_SECONDS",
                      "value": "36000"
                    },
                    {
                      "name": "RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS",
                      "value": "1"
                    },
                    {
                      "name": "FEATURE_GATES",
                      "value": "ReadOnlyResources=false,ServiceLevelCARM=false,TeamLevelCARM=false"
                    }
                  ],
                  "image": "public.ecr.aws/aws-controllers-k8s/ec2-controller:1.3.0",
                  "imagePullPolicy": "IfNotPresent",
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": 8081
                    },
                    "initialDelaySeconds": 15,
                    "periodSeconds": 20
                  },
                  "name": "controller",
                  "ports": [
                    {
                      "containerPort": 8080,
                      "name": "http"
                    }
                  ],
                  "readinessProbe": {
                    "httpGet": {
                      "path": "/readyz",
                      "port": 8081
                    },
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10
                  },
                  "resources": {
                    "limits": {
                      "cpu": "100m",
                      "memory": "128Mi"
                    },
                    "requests": {
                      "cpu": "50m",
                      "memory": "64Mi"
                    }
                  },
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsNonRoot": true
                  },
                  "volumeMounts": null
                }
              ],
              "dnsPolicy": "ClusterFirst",
              "hostIPC": false,
              "hostNetwork": false,
              "hostPID": false,
              "nodeSelector": {
                "kubernetes.io/os": "linux"
              },
              "securityContext": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "serviceAccountName": "ack-ec2-controller",
              "terminationGracePeriodSeconds": 10,
              "volumes": null
            }
          }
        }
      },
      "component": {
        "kind": "Deployment",
        "schema": "",
        "version": "apps/v1"
      }
    },
    {
      "id": "1d5cb48b-e09b-4c49-a1d4-20ba22076eb3",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "default",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-style": "dashed",
        "border-width": 2,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/namespace-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/namespace-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/namespace-white.svg",
        "z-index": 34
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "parent",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {},
      "component": {
        "kind": "Namespace",
        "schema": "",
        "version": "v1"
      }
    },
    {
      "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-system",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-style": "dashed",
        "border-width": 2,
        "position": {
          "x": 129.11350699818226,
          "y": -81.83323296212959
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/namespace-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/namespace-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/namespace-white.svg",
        "z-index": 32
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "parent",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "ack-system",
          "namespace": "ack-system"
        }
      },
      "component": {
        "kind": "Namespace",
        "schema": "",
        "version": "v1"
      }
    },
    {
      "id": "94e8dc45-f177-4487-a1af-b19782e364bb",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "pod-zdy",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-01-05T16:57:25.448433566Z",
          "updated_at": "2025-01-05T16:57:25.448433566Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/pod-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/pod-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/pod-white.svg",
        "z-index": 47
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "parent",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {},
      "component": {
        "kind": "Pod",
        "schema": "",
        "version": "v1"
      }
    },
    {
      "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "pod-lfv",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "position": {
          "x": 395.5365880216266,
          "y": -222.56142977403837
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/pod-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/pod-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/pod-white.svg",
        "z-index": 33
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "parent",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "pod-lfv",
          "namespace": "ack-system"
        },
        "rules": [],
        "spec": {
          "containers": [
            {
              "args": [
                "--aws-region",
                "$(AWS_REGION)",
                "--aws-endpoint-url",
                "$(AWS_ENDPOINT_URL)",
                "--log-level",
                "$(ACK_LOG_LEVEL)",
                "--resource-tags",
                "$(ACK_RESOURCE_TAGS)",
                "--watch-namespace",
                "$(ACK_WATCH_NAMESPACE)",
                "--deletion-policy",
                "$(DELETION_POLICY)",
                "--reconcile-default-resync-seconds",
                "$(RECONCILE_DEFAULT_RESYNC_SECONDS)",
                "--reconcile-default-max-concurrent-syncs",
                "$(RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS)",
                "--feature-gates",
                "$(FEATURE_GATES)"
              ],
              "command": [
                "./bin/controller"
              ],
              "env": [
                {
                  "name": "ACK_SYSTEM_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "AWS_REGION",
                  "value": null
                },
                {
                  "name": "AWS_ENDPOINT_URL",
                  "value": ""
                },
                {
                  "name": "ACK_WATCH_NAMESPACE",
                  "value": null
                },
                {
                  "name": "DELETION_POLICY",
                  "value": "delete"
                },
                {
                  "name": "LEADER_ELECTION_NAMESPACE",
                  "value": ""
                },
                {
                  "name": "ACK_LOG_LEVEL",
                  "value": "info"
                },
                {
                  "name": "ACK_RESOURCE_TAGS",
                  "value": "services.k8s.aws/controller-version=%CONTROLLER_SERVICE%-%CONTROLLER_VERSION%,services.k8s.aws/namespace=%K8S_NAMESPACE%"
                },
                {
                  "name": "RECONCILE_DEFAULT_RESYNC_SECONDS",
                  "value": "36000"
                },
                {
                  "name": "RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS",
                  "value": "1"
                },
                {
                  "name": "FEATURE_GATES",
                  "value": "ReadOnlyResources=false,ServiceLevelCARM=false,TeamLevelCARM=false"
                }
              ],
              "image": "public.ecr.aws/aws-controllers-k8s/ec2-controller:1.3.0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 8081
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 20
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http"
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/readyz",
                  "port": 8081
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "128Mi"
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "64Mi"
                }
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true
              },
              "volumeMounts": null
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "hostIPC": false,
          "hostNetwork": false,
          "hostPID": false,
          "nodeSelector": {
            "kubernetes.io/os": "linux"
          },
          "securityContext": {
            "seccompProfile": {
              "type": "RuntimeDefault"
            }
          },
          "serviceAccountName": "ack-ec2-controller",
          "terminationGracePeriodSeconds": 10,
          "volumes": null
        }
      },
      "component": {
        "kind": "Pod",
        "schema": "",
        "version": "v1"
      }
    },
    {
      "id": "aeea3a8c-078a-445c-a981-42534f8ebf7d",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-ec2-reader",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 22,
        "position": {
          "x": 35.119614133100285,
          "y": -221.07103840373577
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/role-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/role-white.svg",
        "width": 22,
        "z-index": 26
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "creationTimestamp": null,
          "name": "ack-ec2-reader",
          "namespace": "ack-system"
        },
        "rules": [
          {
            "apiGroups": [
              "ec2.services.k8s.aws"
            ],
            "resources": [
              "dhcpoptions",
              "elasticipaddresses",
              "flowlogs",
              "instances",
              "internetgateways",
              "natgateways",
              "networkacls",
              "routetables",
              "securitygroups",
              "subnets",
              "transitgateways",
              "vpcs",
              "vpcendpoints",
              "vpcendpointserviceconfigurations",
              "vpcpeeringconnections"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          }
        ]
      },
      "component": {
        "kind": "Role",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "1cba1650-ee5a-421b-b79e-87d5ea316267",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-ec2-writer",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 22,
        "position": {
          "x": 29.462104537782615,
          "y": 63.35510997143574
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/role-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/role-white.svg",
        "width": 22,
        "z-index": 27
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "creationTimestamp": null,
          "name": "ack-ec2-writer",
          "namespace": "ack-system"
        },
        "rules": [
          {
            "apiGroups": [
              "ec2.services.k8s.aws"
            ],
            "resources": [
              "dhcpoptions",
              "elasticipaddresses",
              "flowlogs",
              "instances",
              "internetgateways",
              "natgateways",
              "networkacls",
              "routetables",
              "securitygroups",
              "subnets",
              "transitgateways",
              "vpcs",
              "vpcendpoints",
              "vpcendpointserviceconfigurations",
              "vpcpeeringconnections"
            ],
            "verbs": [
              "create",
              "delete",
              "get",
              "list",
              "patch",
              "update",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "ec2.services.k8s.aws"
            ],
            "resources": [
              "dhcpoptions",
              "elasticipaddresses",
              "flowlogs",
              "instances",
              "internetgateways",
              "natgateways",
              "networkacls",
              "routetables",
              "securitygroups",
              "subnets",
              "transitgateways",
              "vpcs",
              "vpcendpoints",
              "vpcendpointserviceconfigurations",
              "vpcpeeringconnections"
            ],
            "verbs": [
              "get",
              "patch",
              "update"
            ]
          }
        ]
      },
      "component": {
        "kind": "Role",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-configmaps-cache-ec2-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 22,
        "position": {
          "x": 178,
          "y": -240
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/role-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/role-white.svg",
        "width": 22,
        "z-index": 4
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "ack-configmaps-cache-ec2-controller",
          "namespace": "ack-system"
        },
        "rules": [
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "configmaps"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          }
        ]
      },
      "component": {
        "kind": "Role",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-configmaps-cache-ec2-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "height": 25,
        "position": {
          "x": 301.6271755104994,
          "y": -132.27138672747404
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/rolebinding-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/rolebinding-white.svg",
        "width": 25,
        "z-index": 28
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "ack-configmaps-cache-ec2-controller",
          "namespace": "default"
        },
        "roleRef": {
          "kind": "Role",
          "name": "ack-configmaps-cache-ec2-controller"
        },
        "subjects": [
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "name": "ack-ec2-controller"
          },
          {
            "kind": "ServiceAccount",
            "name": "ack-ec2-controller",
            "namespace": "default"
          }
        ]
      },
      "component": {
        "kind": "RoleBinding",
        "schema": "",
        "version": "rbac.authorization.k8s.io/v1"
      }
    },
    {
      "id": "6304f797-b9b5-466b-862e-8fd9909bb085",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "aws-creds",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-clip": "node",
        "background-opacity": 0,
        "body-text": "",
        "body-text-color": "#808080",
        "body-text-font-size": 12,
        "body-text-font-weight": "400",
        "body-text-horizontal-align": "center",
        "body-text-vertical-align": "center",
        "border-width": 0,
        "height": 32,
        "opacity": 1,
        "padding": 1,
        "position": {
          "x": 229.39394262935673,
          "y": -444.7586778518167
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "shield",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/secret-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/secret-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/secret-white.svg",
        "width": 32,
        "z-index": 30
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "name": "aws-creds",
          "namespace": "ack-system"
        },
        "rules": []
      },
      "component": {
        "kind": "Secret",
        "schema": "",
        "version": "v1"
      }
    },
    {
      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "ack-ec2-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2024-10-30T12:08:10.181978522Z",
          "updated_at": "2024-10-30T12:08:10.181978522Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "position": {
          "x": 426.90328705531084,
          "y": -23.10589202804493
        },
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/serviceaccount-color.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/serviceaccount-white.svg",
        "z-index": 21
      },
      "capabilities": [
        {
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "displayName": "Performance Test",
          "entityState": [
            "instance"
          ],
          "key": "",
          "kind": "action",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "perf-test",
          "type": "operator",
          "version": "0.7.0"
        },
        {
          "description": "Configure the workload specific setting of a component",
          "displayName": "Workload Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "config",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure Labels And Annotations for  the component ",
          "displayName": "Labels and Annotations Configuration",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "labels-and-annotations",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View relationships for the component",
          "displayName": "Relationships",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "relationship",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "View Component Definition ",
          "displayName": "Json Schema",
          "entityState": [
            "declaration",
            "instance"
          ],
          "key": "",
          "kind": "view",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "definition",
          "type": "configuration",
          "version": "0.7.0"
        },
        {
          "description": "Configure the visual styles for the component",
          "displayName": "Styling",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Change the shape of the component",
          "displayName": "Change Shape",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "mutate",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "shape",
          "type": "style",
          "version": "0.7.0"
        },
        {
          "description": "Drag and Drop a component into a parent component in graph view",
          "displayName": "Compound Drag And Drop",
          "entityState": [
            "declaration"
          ],
          "key": "",
          "kind": "interaction",
          "metadata": null,
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "status": "enabled",
          "subType": "compoundDnd",
          "type": "graph",
          "version": "0.7.0"
        }
      ],
      "status": "enabled",
      "metadata": {
        "genealogy": "",
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "imagePullSecrets": [],
        "metadata": {
          "annotations": null,
          "labels": {
            "app.kubernetes.io/instance": "ec2-chart",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "ec2-chart",
            "app.kubernetes.io/version": "1.3.0",
            "helm.sh/chart": "ec2-chart-1.3.0",
            "k8s-app": "ec2-chart"
          },
          "name": "ack-ec2-controller",
          "namespace": "ack-system"
        },
        "secrets": []
      },
      "component": {
        "kind": "ServiceAccount",
        "schema": "",
        "version": "v1"
      }
    },
    {
      "id": "5f20ed7a-b052-4516-b0d9-b46f84bb4b6b",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "pod-tcm",
      "description": "",
      "format": "JSON",
      "model": {
        "id": "1eb95791-1230-12d2-0ab2-39ea133fda8f",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "f9a29d70-c287-426c-a90c-2a96590c8083",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-02-21T21:37:30.74028998Z",
          "updated_at": "2025-02-21T21:37:30.74028998Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "f9a29d70-c287-426c-a90c-2a96590c8083",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/pod-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/pod-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/pod-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "genealogy": "parent",
        "isAnnotation": true,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": null,
      "component": {
        "kind": "Pod",
        "schema": "",
        "version": "v1"
      }
    }
  ],
  "preferences": {
    "layers": {
      "components": {
        "CustomResourceDefinition-kubernetes": false,
        "Namespace-kubernetes": false
      },
      "relationships": {
        "edge-binding-permission": true,
        "hierarchical-sibling-matchlabels": false
      }
    }
  },
  "relationships": [
    {
      "id": "1061f80b-c3ba-4dfd-8f70-9726416f0923",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "1bf8bd4e-8480-43e7-b684-6c19bbc4b9f9",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1ad58c68-8116-45bc-9e0c-435a1c87feb0",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "2fd99fc2-3628-4207-9ab6-0e319cd482f4",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "35d60a0b-cf5d-454f-81e2-f253d56bf0db",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#00B39F",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#00B39F",
          "target-arrow-shape": "triangle"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "0ab09973-f3a1-4ebc-8d0a-3e0e67642b8a",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "a465124d-a438-46a5-aaba-a7d86332a3ac",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "3aea0f32-23a7-4e89-9fd2-7cfdb2da7f6d",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#8b572a",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#8b572a",
          "target-arrow-shape": "vee"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "187ceed3-1da8-4906-997b-a9dc73a8866c",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "ae5776f8-18e0-4945-9049-af8d8a943f97",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "48e0f721-f210-4a5e-8cd4-94153c6cc28e",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "555d9d80-ee3d-4b18-8416-0a120f3e08f6",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#8b572a",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#8b572a",
          "target-arrow-shape": "vee"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "2371e85f-35a6-48eb-a561-c9caa93047b1",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "187ceed3-1da8-4906-997b-a9dc73a8866c",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "deleted",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "56282619-0a9f-4cc2-b99d-92a9e6f76b39",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#00B39F",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#00B39F",
          "target-arrow-shape": "triangle"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "41f5786d-989d-4170-9a48-bd5054b7b1ea",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "f681839f-4093-45ff-a8cf-e17231784830",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "60d448c1-cdfe-4f54-b49f-3cc12221478e",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "curve-style": "bezier",
          "line-color": "#8b572a",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#8b572a",
          "target-arrow-shape": "vee"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "2b880ea0-2cda-4d21-9f61-a837c50068e4",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "2371e85f-35a6-48eb-a561-c9caa93047b1",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "deleted",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "63fb87be-5442-4239-b7e5-4ef7a1eb5276",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#8b572a",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#8b572a",
          "target-arrow-shape": "vee"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "ae5776f8-18e0-4945-9049-af8d8a943f97",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "a465124d-a438-46a5-aaba-a7d86332a3ac",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "6e985a5d-3161-4c29-ad98-87cd3b4c3d0e",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "8a1e23b5-99d8-4f67-9d76-9fa7970f5f4e",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#00B39F",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#00B39F",
          "target-arrow-shape": "triangle"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "b7da9dcc-53cb-4317-bafd-7ea38a84345b",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "ae5776f8-18e0-4945-9049-af8d8a943f97",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "8b4a4617-2889-4f87-a3ea-57b1a9dadd99",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#8b572a",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#8b572a",
          "target-arrow-shape": "triangle"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "a465124d-a438-46a5-aaba-a7d86332a3ac",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "f681839f-4093-45ff-a8cf-e17231784830",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "8e463774-3558-4c80-a932-be0183999993",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "curve-style": "taxi",
          "line-color": "rgb(66,99,235)",
          "line-style": "dashed",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "rgb(66,99,235)",
          "target-arrow-shape": "vee"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "ae5776f8-18e0-4945-9049-af8d8a943f97",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "c4f8c9c1-c62b-49b0-9304-1611352465e2",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "c7e35a44-f340-4def-ba6f-84458fe778ae",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "d9e42dac-f1bf-46eb-939d-0e2fab9e04b3",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": null,
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "dc921694-62bf-472c-b1f8-80638f49a114",
      "evaluationQuery": null,
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": ""
    },
    {
      "id": "ef5881ad-332a-4f94-a026-543dab4490e0",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "line-color": "#00B39F",
          "line-style": "solid",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "#00B39F",
          "target-arrow-shape": "triangle"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "43edf35a-9c3b-4b67-927c-ea4705a4c121",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "187ceed3-1da8-4906-997b-a9dc73a8866c",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "fdedee28-38bb-4d4a-a687-3f67cb407af1",
      "evaluationQuery": null,
      "kind": "edge",
      "metadata": {
        "description": "A relationship that defines annotation edges between components",
        "styles": {
          "curve-style": "taxi",
          "line-color": "rgb(66,99,235)",
          "line-style": "dashed",
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": "",
          "target-arrow-color": "rgb(66,99,235)",
          "target-arrow-shape": "vee"
        },
        "isAnnotation": null
      },
      "model": {
        "id": "3d2cd78d-d9fd-cf06-af5d-05b0564f0f32",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "meshery-shapes",
        "displayName": "Meshery Shapes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "56fc1fd1-f0c1-21ab-983f-9efa8fec5b2f",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "App Definition and Development",
        "metadata": {
          "isAnnotation": true,
          "primaryColor": "#00B39F",
          "secondaryColor": "#00D3A9",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/meshery-shapes/color/meshery-shapes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/meshery-shapes/white/meshery-shapes-white.svg"
        },
        "model": {
          "version": "0.7.2"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "6304f797-b9b5-466b-862e-8fd9909bb085",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "187ceed3-1da8-4906-997b-a9dc73a8866c",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "annotation",
      "status": "approved",
      "type": "non-binding",
      "version": ""
    },
    {
      "id": "0a578c3e-53a7-447c-9a5f-2095ecfafdf9",
      "evaluationQuery": "",
      "kind": "edge",
      "metadata": {
        "description": "A relationship that represents a set of permissions",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "c6e41612-314b-48a7-8504-51bdabc54058",
                "kind": "ClusterRole",
                "match": {
                  "from": [
                    {
                      "id": "c6e41612-314b-48a7-8504-51bdabc54058",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "component",
                          "kind"
                        ],
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "f62840d3-3561-419e-b65a-5c7c19303361",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "roleRef",
                          "kind"
                        ],
                        [
                          "configuration",
                          "roleRef",
                          "name"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "ServiceAccount",
                "match": {
                  "from": [
                    {
                      "id": "f62840d3-3561-419e-b65a-5c7c19303361",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "subjects",
                          "_",
                          "name"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "permission",
      "status": "deleted",
      "type": "binding",
      "version": "v1.0.0"
    },
    {
      "id": "0c48c601-ff9b-42c8-9a8a-4ad0bdcd0e9b",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1bfdc5f8-64f6-40f2-9348-a638eb4e2fea",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "1ad58c68-8116-45bc-9e0c-435a1c87feb0",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "1115b452-0155-4709-9e25-cd2781b71b91",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": false
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "94e8dc45-f177-4487-a1af-b19782e364bb",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": null,
            "to": null
          }
        }
      ],
      "subType": "alias",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "257af6d5-a811-41e1-8b5e-abd294312211",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "2b7018eb-2929-45ad-af8a-65c24f80a359",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "6304f797-b9b5-466b-862e-8fd9909bb085",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "473d6564-0004-4893-b6e1-36d22ca6cfd2",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "4c75ecd6-3b55-48b2-baee-e073aa4759d6",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "1d5cb48b-e09b-4c49-a1d4-20ba22076eb3",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "56011296-7ec4-49ba-888e-0144ab46d994",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "aeea3a8c-078a-445c-a981-42534f8ebf7d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "5711160a-57d8-4a62-95e5-22d19e7dcad5",
      "evaluationQuery": "",
      "kind": "edge",
      "metadata": {
        "description": "A relationship that represents a set of permissions",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "4162e5da-23a0-42ba-9571-b983e1200791",
                "kind": "ClusterRole",
                "match": {
                  "from": [
                    {
                      "id": "4162e5da-23a0-42ba-9571-b983e1200791",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "component",
                          "kind"
                        ],
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "e67dd8c9-b7d3-4a59-8df7-dc20e80a7566",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "roleRef",
                          "kind"
                        ],
                        [
                          "configuration",
                          "roleRef",
                          "name"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "ServiceAccount",
                "match": {
                  "from": [
                    {
                      "id": "e67dd8c9-b7d3-4a59-8df7-dc20e80a7566",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "subjects",
                          "_",
                          "name"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "permission",
      "status": "approved",
      "type": "binding",
      "version": "v1.0.0"
    },
    {
      "id": "5b4ec37b-c129-4935-92d9-f11d68e9747e",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "5d5c8307-fa32-4150-99a9-02a88122e2c0",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "60834945-fa1d-4bff-820d-670168d85b97",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": false
      },
      "model": {
        "id": "1eb95791-1230-12d2-0ab2-39ea133fda8f",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "f9a29d70-c287-426c-a90c-2a96590c8083",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "5f20ed7a-b052-4516-b0d9-b46f84bb4b6b",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec",
                      "template"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec",
                      "template"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": null,
            "to": null
          }
        }
      ],
      "subType": "alias",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "6767bd4b-b556-4046-a1b3-8ac4c670920e",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": false
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "3ead23a2-c999-4fbd-9766-42e8f3323ccc",
                "kind": "Container",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "meshery-core",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": null,
            "to": null
          }
        }
      ],
      "subType": "alias",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "6b4c2046-1006-4f05-bed4-d32a251f2bc5",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "aeea3a8c-078a-445c-a981-42534f8ebf7d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "6b9f6068-497e-4593-b645-f7dd6cc16d82",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "6c334990-5a40-4e7c-9a9f-ed3a32415889",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "77bfa610-2c08-4783-ad6c-27adc511c13d",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": false
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "alias",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "77e799e9-233c-4a17-9977-f1a4608b3a48",
      "evaluationQuery": "",
      "kind": "edge",
      "metadata": {
        "description": "A relationship that represents a set of permissions",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "4162e5da-23a0-42ba-9571-b983e1200791",
                "kind": "ClusterRole",
                "match": {
                  "from": [
                    {
                      "id": "4162e5da-23a0-42ba-9571-b983e1200791",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "component",
                          "kind"
                        ],
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "e67dd8c9-b7d3-4a59-8df7-dc20e80a7566",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "roleRef",
                          "kind"
                        ],
                        [
                          "configuration",
                          "roleRef",
                          "name"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "ServiceAccount",
                "match": {
                  "from": [
                    {
                      "id": "e67dd8c9-b7d3-4a59-8df7-dc20e80a7566",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "subjects",
                          "_",
                          "name"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "permission",
      "status": "deleted",
      "type": "binding",
      "version": "v1.0.0"
    },
    {
      "id": "7d576521-0233-4315-89ac-d518cd3fd67c",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "7f701547-0d6b-48db-9517-0979f940b87d",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "89a4a937-b9ac-4925-b912-c0192d2c310e",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "6304f797-b9b5-466b-862e-8fd9909bb085",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "8dfb1da1-a7ee-449e-a997-65366eaa1706",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1bfdc5f8-64f6-40f2-9348-a638eb4e2fea",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "92e4cd3e-43dd-4090-91d0-694f89b96510",
      "evaluationQuery": "",
      "kind": "edge",
      "metadata": {
        "description": "A relationship that represents a set of permissions",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                "kind": "Role",
                "match": {
                  "from": [
                    {
                      "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "component",
                          "kind"
                        ],
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                      "kind": "RoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "roleRef",
                          "kind"
                        ],
                        [
                          "configuration",
                          "roleRef",
                          "name"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "ServiceAccount",
                "match": {
                  "from": [
                    {
                      "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                      "kind": "RoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "subjects",
                          "_",
                          "name"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "permission",
      "status": "approved",
      "type": "binding",
      "version": "v1.0.0"
    },
    {
      "id": "92f246d2-455e-442e-896b-5884d00b9a55",
      "evaluationQuery": "",
      "kind": "edge",
      "metadata": {
        "description": "A relationship that represents a set of permissions",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                "kind": "Role",
                "match": {
                  "from": [
                    {
                      "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "component",
                          "kind"
                        ],
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                      "kind": "RoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "roleRef",
                          "kind"
                        ],
                        [
                          "configuration",
                          "roleRef",
                          "name"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "ServiceAccount",
                "match": {
                  "from": [
                    {
                      "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                      "kind": "RoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "subjects",
                          "_",
                          "name"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "permission",
      "status": "deleted",
      "type": "binding",
      "version": "v1.0.0"
    },
    {
      "id": "97e8dd07-4600-4269-97b4-bf5cef69cc66",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "99b8a4e4-60b5-4ce9-8fff-97b22fd6c856",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "9a34d727-5472-4c15-b653-9ba89eaf9a54",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": false
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "2d2bc9b4-62d4-4ad2-a1a8-d660be71cdea",
                "kind": "Container",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "meshery-core",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ],
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec",
                      "containers",
                      "0"
                    ]
                  ]
                }
              }
            ]
          },
          "deny": {
            "from": null,
            "to": null
          }
        }
      ],
      "subType": "alias",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "9b9bcd76-181b-4d69-b509-4d4e1b4f5b1f",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1cba1650-ee5a-421b-b79e-87d5ea316267",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "a32e3af9-97b7-4ba0-9f64-aff8efa3faae",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": false
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "b06e6918-171a-483b-a83a-cb590a605a68",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "aeea3a8c-078a-445c-a981-42534f8ebf7d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "b94a8696-1c5f-4da9-adff-0e6d300337f6",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "ca3a1dfb-4c01-45c6-a6fe-fa9db9d3db1d",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1cba1650-ee5a-421b-b79e-87d5ea316267",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "cb632115-f7c0-4cfd-aec2-2a575a124f42",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "d7f961f6-f681-4ca8-acfb-408371e7081f",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "d80a301d-6d08-4725-9925-9bf4f3f6c19d",
      "evaluationQuery": "",
      "kind": "edge",
      "metadata": {
        "description": "A relationship that represents a set of permissions",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "c6e41612-314b-48a7-8504-51bdabc54058",
                "kind": "ClusterRole",
                "match": {
                  "from": [
                    {
                      "id": "c6e41612-314b-48a7-8504-51bdabc54058",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "component",
                          "kind"
                        ],
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "f62840d3-3561-419e-b65a-5c7c19303361",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "roleRef",
                          "kind"
                        ],
                        [
                          "configuration",
                          "roleRef",
                          "name"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ],
            "to": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "ServiceAccount",
                "match": {
                  "from": [
                    {
                      "id": "f62840d3-3561-419e-b65a-5c7c19303361",
                      "kind": "ClusterRoleBinding",
                      "mutatedRef": [
                        [
                          "configuration",
                          "subjects",
                          "_",
                          "name"
                        ]
                      ]
                    }
                  ],
                  "to": [
                    {
                      "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                      "kind": "self",
                      "mutatorRef": [
                        [
                          "displayName"
                        ]
                      ]
                    }
                  ]
                },
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": null
              }
            ]
          }
        }
      ],
      "subType": "permission",
      "status": "approved",
      "type": "binding",
      "version": "v1.0.0"
    },
    {
      "id": "d838e4c2-b3b6-43d2-8408-f86a2f997077",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "da24f339-b697-4690-870d-c23d02202692",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "6304f797-b9b5-466b-862e-8fd9909bb085",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "dd1b6d2f-ba6c-49c2-b741-c71622ca9f91",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "aeea3a8c-078a-445c-a981-42534f8ebf7d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "dd61c608-d966-4488-b47f-6b110cb8f487",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "fb78aaf4-7112-4d15-ba49-608459ef317a",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "1d5cb48b-e09b-4c49-a1d4-20ba22076eb3",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "dfbd5204-9964-48a3-b881-4e78032c3d8d",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "e0f24f21-ab41-428d-a415-13407ca38799",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1cba1650-ee5a-421b-b79e-87d5ea316267",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "e729caae-74a9-4151-bb38-af4e9b8451e4",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "cf26c515-b23f-4142-8442-6f50ab75b918",
                "kind": "Pod",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "configuration",
                      "spec"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "fde0d321-3d3d-4e74-bf7c-3f6808eb2e75",
                "kind": "Deployment",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "spec",
                      "template",
                      "spec"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "f78a6af6-7687-44ff-b463-efe3cacb794c",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "c66082eb-c3f3-4311-b176-c98c10fabe60",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "f98caa0f-2ba5-47a6-aea3-edafac80fd57",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "57fda2dd-9184-413b-a5e9-430fa88a556d",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "deleted",
      "type": "parent",
      "version": "v1.0.0"
    },
    {
      "id": "fbfb876c-dcd1-48e7-9e1e-1ccf255b17d7",
      "evaluationQuery": "",
      "kind": "hierarchical",
      "metadata": {
        "description": "A hierarchical inventory relationship in which the configuration of (parent) component is patched with the configuration of other (child) component. Eg: The configuration of the EnvoyFilter (parent) component is patched with the configuration as received from WASMFilter (child) component.",
        "styles": {
          "primaryColor": "",
          "svgColor": "",
          "svgWhite": ""
        },
        "isAnnotation": null
      },
      "model": {
        "id": "bba54c44-a440-773a-a524-0114ebde5397",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "",
          "sub_type": "",
          "kind": "",
          "status": "",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "0001-01-01T00:00:00Z",
          "updated_at": "0001-01-01T00:00:00Z",
          "deleted_at": "0001-01-01T00:00:00Z"
        },
        "connection_id": "9e04779c-94b6-6a03-575c-66f4c57541eb",
        "category": {
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components": null,
        "relationships": null,
        "components_count": 0,
        "relationships_count": 0
      },
      "schemaVersion": "relationships.meshery.io/v1alpha3",
      "selectors": [
        {
          "allow": {
            "from": [
              {
                "id": "1cba1650-ee5a-421b-b79e-87d5ea316267",
                "kind": "*",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "*",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatedRef": [
                    [
                      "configuration",
                      "metadata",
                      "namespace"
                    ]
                  ]
                }
              }
            ],
            "to": [
              {
                "id": "3be579d7-4973-4971-ba0a-5278d910fc26",
                "kind": "Namespace",
                "match": {},
                "model": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "schemaVersion": "",
                  "version": "",
                  "name": "kubernetes",
                  "displayName": "",
                  "status": "",
                  "registrant": {
                    "id": "00000000-0000-0000-0000-000000000000",
                    "name": "",
                    "credential_id": "00000000-0000-0000-0000-000000000000",
                    "type": "",
                    "sub_type": "",
                    "kind": "github",
                    "status": "",
                    "user_id": "00000000-0000-0000-0000-000000000000",
                    "created_at": "0001-01-01T00:00:00Z",
                    "updated_at": "0001-01-01T00:00:00Z",
                    "deleted_at": "0001-01-01T00:00:00Z"
                  },
                  "connection_id": "00000000-0000-0000-0000-000000000000",
                  "category": {
                    "name": ""
                  },
                  "model": {
                    "version": ""
                  },
                  "components": null,
                  "relationships": null,
                  "components_count": 0,
                  "relationships_count": 0
                },
                "patch": {
                  "patchStrategy": "replace",
                  "mutatorRef": [
                    [
                      "displayName"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
      "subType": "inventory",
      "status": "approved",
      "type": "parent",
      "version": "v1.0.0"
    }
  ]
}