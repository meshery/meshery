version: 0.0.1
name: apache-airflow
displayName: Apache Airflow
createdAt: "2024-04-11T07:53:38Z"
description: |-
    Apache Airflow (or simply Airflow) is a platform to programmatically author, schedule, and monitor workflows.

    When workflows are defined as code, they become more maintainable, versionable, testable, and collaborative.

    Use Airflow to author workflows as directed acyclic graphs (DAGs) of tasks. The Airflow scheduler executes your tasks on an array of workers while following the specified dependencies. Rich command line utilities make performing complex surgeries on DAGs a snap. The rich user interface makes it easy to visualize pipelines running in production, monitor progress, and troubleshoot issues when needed.

    Airflow works best with workflows that are mostly static and slowly changing. When the DAG structure is similar from one run to the next, it clarifies the unit of work and continuity. Other similar projects include Luigi, Oozie and Azkaban.

    Airflow is commonly used to process data, but has the opinion that tasks should ideally be idempotent (i.e., results of the task will be the same, and will not create duplicated data in a destination system), and should not pass large quantities of data from one task to the next (though tasks can pass metadata using Airflow's XCom feature). For high-volume, data-intensive tasks, a best practice is to delegate to external services specializing in that type of work.

    Airflow is not a streaming solution, but it is often used to process real-time data, pulling data off streams in batches.

    Principles
    Dynamic: Airflow pipelines are configuration as code (Python), allowing for dynamic pipeline generation. This allows for writing code that instantiates pipelines dynamically.
    Extensible: Easily define your own operators, executors and extend the library so that it fits the level of abstraction that suits your environment.
    Elegant: Airflow pipelines are lean and explicit. Parameterizing your scripts is built into the core of Airflow using the powerful Jinja templating engine.
    Scalable: Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers.
logoURL: https://raw.githubusercontent.com/meshery/meshery.io/0b8585231c6e2b3251d38f749259360491c9ee6b/assets/images/brand/meshery-logo.svg
license: Apache-2.0
homeURL: https://docs.meshery.io/concepts/logical/designs
links:
    - name: download
      url: ../../catalog/0b6b1ff8-cb2e-41d4-baff-e0a053f7e4d9/0.0.1/design.yml
    - name: Meshery Catalog
      url: https://meshery.io/catalog
readme: "Make sure to fill out your own postgres username ,password, host,port etc to see airflow working as per your database requirements. pass them as environment variables or create secrets   for password and config map for ports ,host . \n ##h4 Caveats and Consideration \n"
install: mesheryctl design import -f
provider:
    name: 9222bde1-64c6-4fb2-971a-3402d5ae2fd9
screenshots:
    - title: MeshMap Snapshot
      url: https://raw.githubusercontent.com/layer5labs/meshery-extensions-packages/master/action-assets/design-assets/0b6b1ff8-cb2e-41d4-baff-e0a053f7e4d9-light.png
    - title: MeshMap Snapshot
      url: https://raw.githubusercontent.com/layer5labs/meshery-extensions-packages/master/action-assets/design-assets/0b6b1ff8-cb2e-41d4-baff-e0a053f7e4d9-dark.png
    - title: Meshery Project
      url: https://raw.githubusercontent.com/meshery/meshery.io/master/assets/images/logos/meshery-gradient.png
