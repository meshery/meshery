{
  "id": "00000000-0000-0000-0000-000000000000",
  "name": "apisix-6.0.0.tgz",
  "schemaVersion": "designs.meshery.io/v1beta1",
  "version": "0.0.1",
  "components": [
    {
      "id": "1aa17857-f144-4a39-a4f8-139c3c24bce2",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixclusterconfigs.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixclusterconfigs.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixClusterConfig",
            "plural": "apisixclusterconfigs",
            "shortNames": [
              "acc"
            ],
            "singular": "apisixclusterconfig"
          },
          "preserveUnknownFields": false,
          "scope": "Cluster",
          "versions": [
            {
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "properties": {
                    "spec": {
                      "properties": {
                        "admin": {
                          "properties": {
                            "adminKey": {
                              "type": "string"
                            },
                            "baseURL": {
                              "pattern": "https?://[^:]+:(\\d+)",
                              "type": "string"
                            }
                          },
                          "required": [
                            "baseURL"
                          ],
                          "type": "object"
                        },
                        "ingressClassName": {
                          "type": "string"
                        },
                        "monitoring": {
                          "properties": {
                            "prometheus": {
                              "properties": {
                                "enable": {
                                  "type": "boolean"
                                },
                                "prefer_name": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "skywalking": {
                              "properties": {
                                "enable": {
                                  "type": "boolean"
                                },
                                "sampleRatio": {
                                  "maximum": 1,
                                  "minimum": 0.00001,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "properties": {
                        "conditions": {
                          "items": {
                            "properties": {
                              "lastTransitionTime": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "required": [
                            "type",
                            "status",
                            "lastTransitionTime"
                          ],
                          "type": "array"
                        },
                        "observedGeneration": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "bbbe3d00-ed57-42be-8df3-23bae224ce91",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixconsumers.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixconsumers.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixConsumer",
            "plural": "apisixconsumers",
            "shortNames": [
              "ac"
            ],
            "singular": "apisixconsumer"
          },
          "preserveUnknownFields": false,
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "properties": {
                    "spec": {
                      "properties": {
                        "authParameter": {
                          "oneOf": [
                            {
                              "required": [
                                "basicAuth"
                              ]
                            },
                            {
                              "required": [
                                "keyAuth"
                              ]
                            },
                            {
                              "required": [
                                "wolfRBAC"
                              ]
                            },
                            {
                              "required": [
                                "jwtAuth"
                              ]
                            },
                            {
                              "required": [
                                "hmacAuth"
                              ]
                            },
                            {
                              "required": [
                                "ldapAuth"
                              ]
                            }
                          ],
                          "properties": {
                            "basicAuth": {
                              "oneOf": [
                                {
                                  "required": [
                                    "value"
                                  ]
                                },
                                {
                                  "required": [
                                    "secretRef"
                                  ]
                                }
                              ],
                              "properties": {
                                "secretRef": {
                                  "properties": {
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "value": {
                                  "properties": {
                                    "password": {
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "username": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "username",
                                    "password"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "hmacAuth": {
                              "oneOf": [
                                {
                                  "required": [
                                    "value"
                                  ]
                                },
                                {
                                  "required": [
                                    "secretRef"
                                  ]
                                }
                              ],
                              "properties": {
                                "secretRef": {
                                  "properties": {
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "value": {
                                  "properties": {
                                    "access_key": {
                                      "type": "string"
                                    },
                                    "algorithm": {
                                      "type": "string"
                                    },
                                    "clock_skew": {
                                      "type": "integer"
                                    },
                                    "encode_uri_params": {
                                      "type": "boolean"
                                    },
                                    "keep_headers": {
                                      "type": "boolean"
                                    },
                                    "max_req_body": {
                                      "type": "integer"
                                    },
                                    "secret_key": {
                                      "type": "string"
                                    },
                                    "signed_headers": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "validate_request_body": {
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "access_key",
                                    "secret_key"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "jwtAuth": {
                              "oneOf": [
                                {
                                  "required": [
                                    "value"
                                  ]
                                },
                                {
                                  "required": [
                                    "secretRef"
                                  ]
                                }
                              ],
                              "properties": {
                                "secretRef": {
                                  "properties": {
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "value": {
                                  "properties": {
                                    "algorithm": {
                                      "default": "HS256",
                                      "type": "string"
                                    },
                                    "base64_secret": {
                                      "default": false,
                                      "type": "boolean"
                                    },
                                    "exp": {
                                      "default": 86400,
                                      "type": "integer"
                                    },
                                    "key": {
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "lifetime_grace_period": {
                                      "default": 0,
                                      "type": "integer"
                                    },
                                    "public_key": {
                                      "type": "string"
                                    },
                                    "secret": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "keyAuth": {
                              "oneOf": [
                                {
                                  "required": [
                                    "value"
                                  ]
                                },
                                {
                                  "required": [
                                    "secretRef"
                                  ]
                                }
                              ],
                              "properties": {
                                "secretRef": {
                                  "properties": {
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "value": {
                                  "properties": {
                                    "key": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "ldapAuth": {
                              "oneOf": [
                                {
                                  "required": [
                                    "value"
                                  ]
                                },
                                {
                                  "required": [
                                    "secretRef"
                                  ]
                                }
                              ],
                              "properties": {
                                "secretRef": {
                                  "properties": {
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "value": {
                                  "properties": {
                                    "user_dn": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "user_dn"
                                  ],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "wolfRBAC": {
                              "oneOf": [
                                {
                                  "required": [
                                    "value"
                                  ]
                                },
                                {
                                  "required": [
                                    "secretRef"
                                  ]
                                }
                              ],
                              "properties": {
                                "secretRef": {
                                  "properties": {
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "value": {
                                  "properties": {
                                    "appid": {
                                      "type": "string"
                                    },
                                    "header_prefix": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "ingressClassName": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "authParameter"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "properties": {
                        "conditions": {
                          "items": {
                            "properties": {
                              "lastTransitionTime": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "required": [
                            "type",
                            "status",
                            "lastTransitionTime"
                          ],
                          "type": "array"
                        },
                        "observedGeneration": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "84220e90-2567-4199-ab72-3fe960b13b28",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixglobalrules.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixglobalrules.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixGlobalRule",
            "plural": "apisixglobalrules",
            "shortNames": [
              "agr"
            ],
            "singular": "apisixglobalrule"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".metadata.creationTimestamp",
                  "name": "Age",
                  "priority": 0,
                  "type": "date"
                }
              ],
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "properties": {
                    "spec": {
                      "properties": {
                        "ingressClassName": {
                          "type": "string"
                        },
                        "plugins": {
                          "items": {
                            "properties": {
                              "config": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "enable": {
                                "type": "boolean"
                              },
                              "name": {
                                "minLength": 1,
                                "type": "string"
                              },
                              "secretRef": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "required": [
                            "name",
                            "enable"
                          ],
                          "type": "array"
                        }
                      },
                      "required": [
                        "plugins"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "properties": {
                        "conditions": {
                          "items": {
                            "properties": {
                              "message": {
                                "type": "string"
                              },
                              "observedGeneration": {
                                "type": "integer"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "909cb801-2ba8-48c2-82ba-aeae7adfc37c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixpluginconfigs.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixpluginconfigs.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixPluginConfig",
            "plural": "apisixpluginconfigs",
            "shortNames": [
              "apc"
            ],
            "singular": "apisixpluginconfig"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".metadata.creationTimestamp",
                  "name": "Age",
                  "priority": 0,
                  "type": "date"
                }
              ],
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "properties": {
                    "spec": {
                      "properties": {
                        "ingressClassName": {
                          "type": "string"
                        },
                        "plugins": {
                          "items": {
                            "properties": {
                              "config": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "enable": {
                                "type": "boolean"
                              },
                              "name": {
                                "minLength": 1,
                                "type": "string"
                              },
                              "secretRef": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "required": [
                            "name",
                            "enable"
                          ],
                          "type": "array"
                        }
                      },
                      "required": [
                        "plugins"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "properties": {
                        "conditions": {
                          "items": {
                            "properties": {
                              "message": {
                                "type": "string"
                              },
                              "observedGeneration": {
                                "type": "integer"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "61824041-3278-4f4b-8e53-8fb08450610e",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixroutes.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixroutes.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixRoute",
            "plural": "apisixroutes",
            "shortNames": [
              "ar"
            ],
            "singular": "apisixroute"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".spec.http[].match.hosts",
                  "name": "Hosts",
                  "priority": 0,
                  "type": "string"
                },
                {
                  "jsonPath": ".spec.http[].match.paths",
                  "name": "URIs",
                  "priority": 0,
                  "type": "string"
                },
                {
                  "jsonPath": ".spec.http[].backends[].serviceName",
                  "name": "Target Service(HTTP)",
                  "priority": 1,
                  "type": "string"
                },
                {
                  "jsonPath": ".spec.tcp[].match.ingressPort",
                  "name": "Ingress Server Port(TCP)",
                  "priority": 1,
                  "type": "integer"
                },
                {
                  "jsonPath": ".spec.tcp[].match.backend.serviceName",
                  "name": "Target Service(TCP)",
                  "priority": 1,
                  "type": "string"
                },
                {
                  "jsonPath": ".metadata.creationTimestamp",
                  "name": "Age",
                  "priority": 0,
                  "type": "date"
                }
              ],
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "properties": {
                    "spec": {
                      "anyOf": [
                        {
                          "required": [
                            "http"
                          ]
                        },
                        {
                          "required": [
                            "stream"
                          ]
                        }
                      ],
                      "properties": {
                        "http": {
                          "items": {
                            "anyOf": [
                              {
                                "required": [
                                  "name",
                                  "match",
                                  "backends"
                                ]
                              },
                              {
                                "required": [
                                  "name",
                                  "match",
                                  "upstreams"
                                ]
                              }
                            ],
                            "properties": {
                              "authentication": {
                                "properties": {
                                  "enable": {
                                    "type": "boolean"
                                  },
                                  "jwtAuth": {
                                    "properties": {
                                      "cookie": {
                                        "type": "string"
                                      },
                                      "header": {
                                        "type": "string"
                                      },
                                      "query": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "keyAuth": {
                                    "properties": {
                                      "header": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "ldapAuth": {
                                    "properties": {
                                      "base_dn": {
                                        "type": "string"
                                      },
                                      "ldap_uri": {
                                        "type": "string"
                                      },
                                      "uid": {
                                        "type": "string"
                                      },
                                      "use_tls": {
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": {
                                    "enum": [
                                      "basicAuth",
                                      "keyAuth",
                                      "jwtAuth",
                                      "wolfRBAC",
                                      "hmacAuth",
                                      "ldapAuth"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "enable"
                                ],
                                "type": "object"
                              },
                              "backends": {
                                "items": {
                                  "properties": {
                                    "resolveGranularity": {
                                      "enum": [
                                        "endpoint",
                                        "service"
                                      ],
                                      "type": "string"
                                    },
                                    "serviceName": {
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "servicePort": {
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "subset": {
                                      "type": "string"
                                    },
                                    "weight": {
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "minItems": 1,
                                "required": [
                                  "serviceName",
                                  "servicePort"
                                ],
                                "type": "array"
                              },
                              "match": {
                                "properties": {
                                  "exprs": {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "required": [
                                            "subject",
                                            "op",
                                            "value"
                                          ]
                                        },
                                        {
                                          "required": [
                                            "subject",
                                            "op",
                                            "set"
                                          ]
                                        }
                                      ],
                                      "properties": {
                                        "op": {
                                          "enum": [
                                            "Equal",
                                            "NotEqual",
                                            "GreaterThan",
                                            "GreaterThanEqual",
                                            "LessThan",
                                            "LessThanEqual",
                                            "In",
                                            "NotIn",
                                            "RegexMatch",
                                            "RegexNotMatch",
                                            "RegexMatchCaseInsensitive",
                                            "RegexNotMatchCaseInsensitive"
                                          ],
                                          "type": "string"
                                        },
                                        "set": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "subject": {
                                          "properties": {
                                            "name": {
                                              "minLength": 1,
                                              "type": "string"
                                            },
                                            "scope": {
                                              "enum": [
                                                "Cookie",
                                                "Header",
                                                "Path",
                                                "Query",
                                                "Variable"
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "scope"
                                          ],
                                          "type": "object"
                                        },
                                        "value": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "minItems": 1,
                                    "type": "array"
                                  },
                                  "filter_func": {
                                    "type": "string"
                                  },
                                  "hosts": {
                                    "items": {
                                      "pattern": "^\\*?[0-9a-zA-Z-._]+$",
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array"
                                  },
                                  "methods": {
                                    "items": {
                                      "enum": [
                                        "CONNECT",
                                        "DELETE",
                                        "GET",
                                        "HEAD",
                                        "OPTIONS",
                                        "PATCH",
                                        "POST",
                                        "PUT",
                                        "TRACE"
                                      ],
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array"
                                  },
                                  "paths": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array"
                                  },
                                  "remoteAddrs": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "minItems": 1,
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "paths"
                                ],
                                "type": "object"
                              },
                              "name": {
                                "minLength": 1,
                                "type": "string"
                              },
                              "plugin_config_name": {
                                "minLength": 1,
                                "type": "string"
                              },
                              "plugin_config_namespace": {
                                "minLength": 1,
                                "type": "string"
                              },
                              "plugins": {
                                "items": {
                                  "properties": {
                                    "config": {
                                      "type": "object",
                                      "x-kubernetes-preserve-unknown-fields": true
                                    },
                                    "enable": {
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "secretRef": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "required": [
                                  "name",
                                  "enable"
                                ],
                                "type": "array"
                              },
                              "priority": {
                                "type": "integer"
                              },
                              "timeout": {
                                "properties": {
                                  "connect": {
                                    "type": "string"
                                  },
                                  "read": {
                                    "type": "string"
                                  },
                                  "send": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "upstreams": {
                                "description": "Upstreams refer to ApisixUpstream CRD",
                                "items": {
                                  "description": "ApisixRouteUpstreamReference contains a ApisixUpstream CRD reference",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "weight": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "websocket": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "ingressClassName": {
                          "type": "string"
                        },
                        "stream": {
                          "items": {
                            "properties": {
                              "backend": {
                                "properties": {
                                  "resolveGranularity": {
                                    "enum": [
                                      "endpoint",
                                      "service"
                                    ],
                                    "type": "string"
                                  },
                                  "serviceName": {
                                    "minLength": 1,
                                    "type": "string"
                                  },
                                  "servicePort": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "subset": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "serviceName",
                                  "servicePort"
                                ],
                                "type": "object"
                              },
                              "match": {
                                "properties": {
                                  "host": {
                                    "type": "string"
                                  },
                                  "ingressPort": {
                                    "maximum": 65535,
                                    "minimum": 1,
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "ingressPort"
                                ],
                                "type": "object"
                              },
                              "name": {
                                "minLength": 1,
                                "type": "string"
                              },
                              "plugins": {
                                "items": {
                                  "properties": {
                                    "config": {
                                      "type": "object",
                                      "x-kubernetes-preserve-unknown-fields": true
                                    },
                                    "enable": {
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "secretRef": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "required": [
                                  "name",
                                  "enable"
                                ],
                                "type": "array"
                              },
                              "protocol": {
                                "enum": [
                                  "TCP",
                                  "UDP"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "match",
                              "backend",
                              "protocol"
                            ],
                            "type": "object"
                          },
                          "minItems": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "properties": {
                        "conditions": {
                          "items": {
                            "properties": {
                              "message": {
                                "type": "string"
                              },
                              "observedGeneration": {
                                "type": "integer"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "59041054-7543-4ee6-95f8-c674c6257954",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixtlses.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixtlses.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixTls",
            "plural": "apisixtlses",
            "shortNames": [
              "atls"
            ],
            "singular": "apisixtls"
          },
          "preserveUnknownFields": false,
          "scope": "Namespaced",
          "versions": [
            {
              "additionalPrinterColumns": [
                {
                  "jsonPath": ".spec.hosts",
                  "name": "SNIs",
                  "type": "string"
                },
                {
                  "jsonPath": ".spec.secret.name",
                  "name": "Secret Name",
                  "type": "string"
                },
                {
                  "jsonPath": ".spec.secret.namespace",
                  "name": "Secret Namespace",
                  "type": "string"
                },
                {
                  "jsonPath": ".metadata.creationTimestamp",
                  "name": "Age",
                  "type": "date"
                }
              ],
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "description": "ApisixTls defines SSL resource in APISIX.",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "ApisixTlsSpec is the specification of ApisixSSL.",
                      "properties": {
                        "client": {
                          "description": "ApisixMutualTlsClientConfig describes the mutual TLS CA and verify depth",
                          "properties": {
                            "caSecret": {
                              "description": "ApisixSecret describes the Kubernetes Secret name and namespace.",
                              "properties": {
                                "name": {
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "namespace": {
                                  "minLength": 1,
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "namespace"
                              ],
                              "type": "object"
                            },
                            "depth": {
                              "type": "integer"
                            },
                            "skip_mtls_uri_regex": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "hosts": {
                          "items": {
                            "pattern": "^\\*?[0-9a-zA-Z-.]+$",
                            "type": "string"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "ingressClassName": {
                          "type": "string"
                        },
                        "secret": {
                          "description": "ApisixSecret describes the Kubernetes Secret name and namespace.",
                          "properties": {
                            "name": {
                              "minLength": 1,
                              "type": "string"
                            },
                            "namespace": {
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "namespace"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "hosts",
                        "secret"
                      ],
                      "type": "object"
                    },
                    "status": {
                      "description": "ApisixStatus is the status report for Apisix ingress Resources",
                      "properties": {
                        "conditions": {
                          "items": {
                            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "maxLength": 32768,
                                "type": "string"
                              },
                              "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                                "type": "string"
                              },
                              "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "enum": [
                                  "True",
                                  "False",
                                  "Unknown"
                                ],
                                "type": "string"
                              },
                              "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "maxLength": 316,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                                "type": "string"
                              }
                            },
                            "required": [
                              "lastTransitionTime",
                              "message",
                              "reason",
                              "status",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "3025ffb7-f22d-4908-8c56-e88aad95722c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisixupstreams.apisix.apache.org",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/customresourcedefinition-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/customresourcedefinition-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "apisix.apache.org/app": "ingress-apisix"
          },
          "name": "apisixupstreams.apisix.apache.org"
        },
        "spec": {
          "group": "apisix.apache.org",
          "names": {
            "kind": "ApisixUpstream",
            "plural": "apisixupstreams",
            "shortNames": [
              "au"
            ],
            "singular": "apisixupstream"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v2",
              "schema": {
                "openAPIV3Schema": {
                  "properties": {
                    "spec": {
                      "properties": {
                        "discovery": {
                          "description": "Discovery is used to configure service discovery for upstream",
                          "properties": {
                            "args": {
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "externalNodes": {
                          "description": "ExternalNodes contains external nodes the Upstream should use If this field is set, the upstream will use these nodes directly without any further resolves",
                          "items": {
                            "description": "ApisixUpstreamExternalNode is the external node conf",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "port": {
                                "type": "integer"
                              },
                              "type": {
                                "type": "string"
                              },
                              "weight": {
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "healthCheck": {
                          "anyOf": [
                            {
                              "required": [
                                "active"
                              ]
                            },
                            {
                              "required": [
                                "active",
                                "passive"
                              ]
                            }
                          ],
                          "properties": {
                            "active": {
                              "properties": {
                                "concurrency": {
                                  "minimum": 1,
                                  "type": "integer"
                                },
                                "healthy": {
                                  "properties": {
                                    "httpCodes": {
                                      "items": {
                                        "maximum": 599,
                                        "minimum": 200,
                                        "type": "integer"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "interval": {
                                      "type": "string"
                                    },
                                    "successes": {
                                      "maximum": 254,
                                      "minimum": 1,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "host": {
                                  "pattern": "^\\*?[0-9a-zA-Z-._]+$",
                                  "type": "string"
                                },
                                "httpPath": {
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "port": {
                                  "maximum": 65535,
                                  "minimum": 1,
                                  "type": "integer"
                                },
                                "requestHeaders": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "type": "array"
                                },
                                "strictTLS": {
                                  "type": "boolean"
                                },
                                "timeout": {
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "type": {
                                  "enum": [
                                    "http",
                                    "https",
                                    "tcp"
                                  ],
                                  "type": "string"
                                },
                                "unhealthy": {
                                  "properties": {
                                    "httpCodes": {
                                      "items": {
                                        "maximum": 599,
                                        "minimum": 200,
                                        "type": "integer"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "httpFailures": {
                                      "maximum": 254,
                                      "minimum": 1,
                                      "type": "integer"
                                    },
                                    "interval": {
                                      "type": "string"
                                    },
                                    "tcpFailures": {
                                      "maximum": 254,
                                      "minimum": 1,
                                      "type": "integer"
                                    },
                                    "timeouts": {
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "passive": {
                              "properties": {
                                "healthy": {
                                  "properties": {
                                    "httpCodes": {
                                      "items": {
                                        "maximum": 599,
                                        "minimum": 200,
                                        "type": "integer"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "successes": {
                                      "maximum": 254,
                                      "minimum": 1,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": {
                                  "enum": [
                                    "http",
                                    "https",
                                    "tcp"
                                  ],
                                  "type": "string"
                                },
                                "unhealthy": {
                                  "properties": {
                                    "httpCodes": {
                                      "items": {
                                        "maximum": 599,
                                        "minimum": 200,
                                        "type": "integer"
                                      },
                                      "minItems": 1,
                                      "type": "array"
                                    },
                                    "httpFailures": {
                                      "maximum": 254,
                                      "minimum": 1,
                                      "type": "integer"
                                    },
                                    "tcpFailures": {
                                      "maximum": 254,
                                      "minimum": 1,
                                      "type": "integer"
                                    },
                                    "timeouts": {
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "ingressClassName": {
                          "type": "string"
                        },
                        "loadbalancer": {
                          "properties": {
                            "hashOn": {
                              "enum": [
                                "vars",
                                "vars_combinations",
                                "header",
                                "cookie",
                                "consumer"
                              ],
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "roundrobin",
                                "chash",
                                "ewma",
                                "least_conn"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "passHost": {
                          "enum": [
                            "pass",
                            "node",
                            "rewrite"
                          ],
                          "type": "string"
                        },
                        "portLevelSettings": {
                          "items": {
                            "properties": {
                              "healthCheck": {
                                "anyOf": [
                                  {
                                    "required": [
                                      "active"
                                    ]
                                  },
                                  {
                                    "required": [
                                      "active",
                                      "passive"
                                    ]
                                  }
                                ],
                                "properties": {
                                  "active": {
                                    "properties": {
                                      "concurrency": {
                                        "minimum": 1,
                                        "type": "integer"
                                      },
                                      "healthy": {
                                        "properties": {
                                          "httpCodes": {
                                            "items": {
                                              "maximum": 599,
                                              "minimum": 200,
                                              "type": "integer"
                                            },
                                            "minItems": 1,
                                            "type": "array"
                                          },
                                          "interval": {
                                            "type": "string"
                                          },
                                          "successes": {
                                            "maximum": 254,
                                            "minimum": 1,
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "host": {
                                        "pattern": "^\\*?[0-9a-zA-Z-._]+$",
                                        "type": "string"
                                      },
                                      "httpPath": {
                                        "minLength": 1,
                                        "type": "string"
                                      },
                                      "port": {
                                        "maximum": 65535,
                                        "minimum": 1,
                                        "type": "integer"
                                      },
                                      "requestHeaders": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "minItems": 1,
                                        "type": "array"
                                      },
                                      "strictTLS": {
                                        "type": "boolean"
                                      },
                                      "timeout": {
                                        "minimum": 0,
                                        "type": "number"
                                      },
                                      "type": {
                                        "enum": [
                                          "http",
                                          "https",
                                          "tcp"
                                        ],
                                        "type": "string"
                                      },
                                      "unhealthy": {
                                        "properties": {
                                          "httpCodes": {
                                            "items": {
                                              "maximum": 599,
                                              "minimum": 200,
                                              "type": "integer"
                                            },
                                            "minItems": 1,
                                            "type": "array"
                                          },
                                          "httpFailures": {
                                            "maximum": 254,
                                            "minimum": 1,
                                            "type": "integer"
                                          },
                                          "interval": {
                                            "type": "string"
                                          },
                                          "tcpFailures": {
                                            "maximum": 254,
                                            "minimum": 1,
                                            "type": "integer"
                                          },
                                          "timeout": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "passive": {
                                    "properties": {
                                      "healthy": {
                                        "properties": {
                                          "httpCodes": {
                                            "items": {
                                              "maximum": 599,
                                              "minimum": 200,
                                              "type": "integer"
                                            },
                                            "minItems": 1,
                                            "type": "array"
                                          },
                                          "successes": {
                                            "maximum": 254,
                                            "minimum": 1,
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": {
                                        "enum": [
                                          "http",
                                          "https",
                                          "tcp"
                                        ],
                                        "type": "string"
                                      },
                                      "unhealthy": {
                                        "properties": {
                                          "httpCodes": {
                                            "items": {
                                              "maximum": 599,
                                              "minimum": 200,
                                              "type": "integer"
                                            },
                                            "minItems": 1,
                                            "type": "array"
                                          },
                                          "httpFailures": {
                                            "maximum": 254,
                                            "minimum": 1,
                                            "type": "integer"
                                          },
                                          "tcpFailures": {
                                            "maximum": 254,
                                            "minimum": 1,
                                            "type": "integer"
                                          },
                                          "timeout": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "loadbalancer": {
                                "properties": {
                                  "hashOn": {
                                    "enum": [
                                      "vars",
                                      "vars_combinations",
                                      "header",
                                      "cookie",
                                      "consumer"
                                    ],
                                    "type": "string"
                                  },
                                  "key": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "roundrobin",
                                      "chash",
                                      "ewma",
                                      "least_conn"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "port": {
                                "maximum": 65535,
                                "minimum": 1,
                                "type": "integer"
                              },
                              "retries": {
                                "minimum": 0,
                                "type": "integer"
                              },
                              "scheme": {
                                "enum": [
                                  "http",
                                  "grpc"
                                ],
                                "type": "string"
                              },
                              "timeout": {
                                "properties": {
                                  "connect": {
                                    "type": "string"
                                  },
                                  "read": {
                                    "type": "string"
                                  },
                                  "send": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "retries": {
                          "minimum": 0,
                          "type": "integer"
                        },
                        "scheme": {
                          "enum": [
                            "http",
                            "grpc",
                            "https",
                            "grpcs"
                          ],
                          "type": "string"
                        },
                        "subsets": {
                          "items": {
                            "properties": {
                              "labels": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "name": {
                                "minLength": 1,
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "labels"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "timeout": {
                          "properties": {
                            "connect": {
                              "type": "string"
                            },
                            "read": {
                              "type": "string"
                            },
                            "send": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "tlsSecret": {
                          "description": "ApisixSecret describes the Kubernetes Secret name and namespace.",
                          "properties": {
                            "name": {
                              "minLength": 1,
                              "type": "string"
                            },
                            "namespace": {
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "namespace"
                          ],
                          "type": "object"
                        },
                        "upstreamHost": {
                          "pattern": "^\\*?[0-9a-zA-Z-._]+$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "properties": {
                        "conditions": {
                          "items": {
                            "properties": {
                              "message": {
                                "type": "string"
                              },
                              "observedGeneration": {
                                "type": "integer"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        }
      },
      "component": {
        "version": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "schema": ""
      }
    },
    {
      "id": "41432b14-2ddd-483f-b236-ea67a40dcedd",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/networkpolicy-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/networkpolicy-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd",
          "namespace": "default"
        },
        "spec": {
          "egress": [
            {}
          ],
          "ingress": [
            {
              "ports": [
                {
                  "port": 2379
                },
                {
                  "port": 2380
                }
              ]
            }
          ],
          "podSelector": {
            "matchLabels": {
              "app.kubernetes.io/component": "etcd",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "etcd"
            }
          },
          "policyTypes": [
            "Ingress",
            "Egress"
          ]
        }
      },
      "component": {
        "version": "networking.k8s.io/v1",
        "kind": "NetworkPolicy",
        "schema": ""
      }
    },
    {
      "id": "abc6fb92-f61c-45b5-b3c3-8b75e3f0b568",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/networkpolicy-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/networkpolicy-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane",
          "namespace": "default"
        },
        "spec": {
          "egress": [
            {}
          ],
          "ingress": [
            {
              "ports": [
                {
                  "port": 9180
                },
                {
                  "port": 9280
                },
                {
                  "port": 9090
                },
                {
                  "port": 9099
                }
              ]
            }
          ],
          "podSelector": {
            "matchLabels": {
              "app.kubernetes.io/component": "control-plane",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          },
          "policyTypes": [
            "Ingress",
            "Egress"
          ]
        }
      },
      "component": {
        "version": "networking.k8s.io/v1",
        "kind": "NetworkPolicy",
        "schema": ""
      }
    },
    {
      "id": "d932a72d-eb91-493a-a9e6-4273a4c84f2c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/networkpolicy-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/networkpolicy-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane",
          "namespace": "default"
        },
        "spec": {
          "egress": [
            {}
          ],
          "ingress": [
            {
              "ports": [
                {
                  "port": 9080
                },
                {
                  "port": 9443
                },
                {
                  "port": 9090
                },
                {
                  "port": 9099
                }
              ]
            }
          ],
          "podSelector": {
            "matchLabels": {
              "app.kubernetes.io/component": "data-plane",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          },
          "policyTypes": [
            "Ingress",
            "Egress"
          ]
        }
      },
      "component": {
        "version": "networking.k8s.io/v1",
        "kind": "NetworkPolicy",
        "schema": ""
      }
    },
    {
      "id": "baef438d-3208-450f-beba-5b6fbb7ba18e",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/networkpolicy-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/networkpolicy-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller",
          "namespace": "default"
        },
        "spec": {
          "egress": [
            {}
          ],
          "ingress": [
            {
              "ports": [
                {
                  "port": 8080
                },
                {
                  "port": 8443
                }
              ]
            }
          ],
          "podSelector": {
            "matchLabels": {
              "app.kubernetes.io/component": "ingress-controller",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          },
          "policyTypes": [
            "Ingress",
            "Egress"
          ]
        }
      },
      "component": {
        "version": "networking.k8s.io/v1",
        "kind": "NetworkPolicy",
        "schema": ""
      }
    },
    {
      "id": "931ed0f0-6083-4c96-9506-b0af27daa635",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "concave-hexagon",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/poddisruptionbudget-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/poddisruptionbudget-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd",
          "namespace": "default"
        },
        "spec": {
          "minAvailable": "51%",
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "etcd",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "etcd"
            }
          }
        }
      },
      "component": {
        "version": "policy/v1",
        "kind": "PodDisruptionBudget",
        "schema": ""
      }
    },
    {
      "id": "7ba4571c-a98a-4b16-8867-5dd4b4002ad9",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "concave-hexagon",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/poddisruptionbudget-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/poddisruptionbudget-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane",
          "namespace": "default"
        },
        "spec": {
          "maxUnavailable": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "control-plane",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          }
        }
      },
      "component": {
        "version": "policy/v1",
        "kind": "PodDisruptionBudget",
        "schema": ""
      }
    },
    {
      "id": "d789f7e5-54a1-4e17-abc2-9f740b9132bb",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "concave-hexagon",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/poddisruptionbudget-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/poddisruptionbudget-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane",
          "namespace": "default"
        },
        "spec": {
          "maxUnavailable": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "data-plane",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          }
        }
      },
      "component": {
        "version": "policy/v1",
        "kind": "PodDisruptionBudget",
        "schema": ""
      }
    },
    {
      "id": "f20e0546-ea76-4c4a-bdc5-2a732c7fc536",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "concave-hexagon",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/poddisruptionbudget-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/poddisruptionbudget-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller",
          "namespace": "default"
        },
        "spec": {
          "maxUnavailable": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "ingress-controller",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          }
        }
      },
      "component": {
        "version": "policy/v1",
        "kind": "PodDisruptionBudget",
        "schema": ""
      }
    },
    {
      "id": "31a6e288-c834-4e21-9f6f-5edc44b70a37",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/serviceaccount-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/serviceaccount-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "automountServiceAccountToken": false,
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ServiceAccount",
        "schema": ""
      }
    },
    {
      "id": "591c6c9e-38e3-43b4-9f8c-12f1bf9a0fe1",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/serviceaccount-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/serviceaccount-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "automountServiceAccountToken": false,
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ServiceAccount",
        "schema": ""
      }
    },
    {
      "id": "2d278275-9c8d-4a72-96b0-3b94d48dcef7",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/serviceaccount-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/serviceaccount-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "automountServiceAccountToken": false,
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ServiceAccount",
        "schema": ""
      }
    },
    {
      "id": "71ddd53b-5e03-49d1-ad34-8ebf9b097a9a",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/serviceaccount-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/serviceaccount-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "automountServiceAccountToken": false,
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ServiceAccount",
        "schema": ""
      }
    },
    {
      "id": "b8396a3e-f685-4775-9f10-49989b82ef48",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd-jwt-token",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-clip": "node",
        "background-image-containment": "over",
        "background-opacity": 0,
        "height": 32,
        "padding": 1,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "shield",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/secret-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/secret-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/secret-white.svg",
        "width": 32
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "jwt-token.pem": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBOEd5am5wSVF2Mks3amh1cUFvaE1ERDhBTEg3R2NPbmgvK1FvT3EyZ3VXVzhpVmhUCndoOTZEeGVPQjFPTCs3MUtDd3drRU4zRWcyUWRYNHRtdm5GckNaSjVncFhZQjZjVjRmSSt6SDZYdnU3elVvVGUKK1phTXRvOG5mZEl6Y3M5azVPZWtpdHV5czh0QjA2dUg3N3VDUmM0U3FHMFNxRGhvblNUelpJcXZ0cDlIeXBKVgo5eXJiQnZXS0d1MW9ZcEticlczSGphRGJ1Y0Iyb3o5NVA0TDAvYjJ2TlZsQlo3Q3NwaURyS3I4aUtrTUZmUFM1CjhqQ3Q0MU1WOGtMYlRjck91SXFsZ1poZGdIWm9SQkpUclhmZUM2MEdwZ3NnSWFmSnZNbmJqeGJRbFJud0k5K3cKVFJxaTNZcFhmSnpjcXVhS2IxT3BtZlNNRklSOWNYNnk3Ujl1VzBNYytPbUsrd1dzd2sxWXdVdjdNQm9kRGthegpSSWpnZURtanpJOHREbGVEd01pWk42cUNVTUM5MXpveE1xd3RFWUc4RzNVM3E4bCtSclB0R3ducHptWTlVTGxyCkZLakRJU0VXWEM5RmF5NWthSmZ4Y0xxWVFVS0kzWHBpamg5Qjl3K0ZZUWRKMDFIZjlxNWJCVnFpUU9CaVBreHkKYnFnTmtyWUdKamtMUzZpODIrVldjZEVYK015NThjYUk0MFlBQVdqdkx2dC94aW55d1BiUjg5a0dVeTRqTHRuOQpMQTFZcGtYbEFqZDNyUExObTVraDRZV1dDZElpRHlNNkJFUlRhOEQ5V0NnTmkrQlV0RjJneElSN3p3NWNJZkkxCk1wYnlrK3ZIZUZ0cnMvS3FtOVZ6dkhHaGJUczZJdVlYVTBRVSs1QVAzWWs5TDk0THYxSFlWZlA1N3hrQ0F3RUEKQVFLQ0FnQk5lNldybUFWZnVMRWJWbDBQSGQvc1htMXU2WmlJa1VldGtWbEp0K1ZCZXNFdFBsTVlEODdsaUVEVQpxWjlHalRXTW8rZ0hxNEVHbTBCQUo0d0FPa3MxdFlnRmhzY3RpREtzTThiN1hwMEhBcmxXVWM0T2YrOXZjbWxXCnltU2NUcXlFZlFieFhXYVZQUjlFMlZZZzg3eERST3VNYmtLQ0JsUG91UnpidlRwdHo1MXljb0RUL0hMRUptUFEKMDh3OVlHUmRtekNodTBLMDlZc0doNUZLMzZpWEVnZWlXTmFVVlVMKzgwTDI3c3hTOUhDVFdjZUhmeHE3Vlc2UQpPZTIxZjNQcDAzME5iQTVPTlZyYS9WRU1hY0ljM3pGeVY4bU9MeVg3K3M0UXFsaWtoTXg0czBGOVIrVlBJcU9aClhIQmRmNWtEMGVHcDVUOHo2Wk1IL2I0cVgyUFAwNjlYOWZPcVJlWm5lRUxRSURHT2FkVE1GU0pJZFF6TzV2bDMKeFlIZXU2dDkxa2pxdThCS3k2TGQwSzhSd0RyYTBiZ2M4dlpTL1lpZ2dPZHQrZFZzalNBU2RTRVFhRXF4bGV0YworNUNlNjRkMnF1bnlvQUNtUVpuRDluVCs0QTlZdVZtZlpTQlduUVk5ZVZyNGZLaU5hd3FleFJGZzFjMHB3dXJaCldldVZROUZCaW9ON0YvSGlxdmxXQ1Ira01sN0xCVzZmL09GZzJtWTJGT1NZN0syekVERkJ0a2IrK3NQSkNoSnoKTWlzSFJicEd4L0RqZjZMRmRka0ZoVlg5bEI1SGVYSDUyVGJlQmFWYVNiNHJHa2tZdTU1T3pWdERpUnpCZ3dYcApOcCtDYlNJeWhtcVN3eFFweWgxcnM2amZ2QXJ5RlhSbmNjRDhnaHRoQlo2TkZDaXJ0UUtDQVFFQS8vN285LzlnCmpUWmRmZGZuUTZzUldZTEtDYVQvUHMxck9oamk5UWlaaEdHakRyUjUyWFl3MTVzVXpaT0hvWUZJOXpSeXFqUzgKRzFxT0s4TUpMUWlVd1A3cmhDUm50Smg4WlF1LzhKYzhlSG5JYTIrb3k3cWpJWitEMzdlZkNOQXVMZDlJUnVvNQpENDRjN1NhYWJyOWlEWUZKOXpoam5HWlRXZXlNVzAxYmZhaWR3NjlRVzRPT1FRMWtLQklYT1pwODBrcUNtOWdnCkhFNytKMWo5RGlSeXRJS21QdkU3MXB6aFc0cU4yU3RhdzhXYlI3bVpUVnJMWmV3RHRZUlM0enZpd3RpOE9HYTcKN0NEWVhjcDJXY3hwYWlWNjhYRzZIcGVpRlg2QkxxMzZPYjhEWlJNQU5uS0hQZUx5U29meVNKR282ZlN3N2l2VAphZ0RMR3RYWnNqa2o5d0tDQVFFQThHMnByWm4vLzVBaUwvNEhhWHpzT3BVSUQzUVd4MGNETlJaTmpKaUxmdlBrCjI5dkl1cXdmWU5USUxNY2p3bllIR2RWQ2UxYlYvSGU5bXAvMysyZ2x2N1VvamRLNUcwRWc5ckdmTGMwWXFVNXYKenRUSjZNbzR0azlzVndqNVZEVmo0a05Fb1pjYkszWkVYMndUMmV4R2JIdXRPWlBvSDdCUnJFNlcxcnlzNU5WcQp4a21ISENST0UyL3dFY0p0Qy9YWWdrOGlCY2FoMmFFV3J4b29tdUNGd09Ga2JtSzREOUVqNkJmTXgrb21rSUxLCkRSK3BlejQvbzY1eVZCU2NVd3U4REZmS2dGYlFNS3I3VjVqZUlWTmFTYkl4WTJ5OGtrbzE2OTNqa2JpMCtiS1MKYm92bEM2dlQwVUZaeDg0NE5hdnpId283Rm9YK3I5anVOeFp0YjlPaGJ3S0NBUUFoNTdralg0ZUNMSGtsZWJyLwprMkN3NGttd0RWSmhGd1BrcGZjcFRRSklMa1pTWkVUZk1IQTNuaXFiTDdiL0JRaU05VDFhbmJGc1Rnb1djYlo5CmFHMkxRamdmUUZNYjhEWkppOHpZS0sreHBTK09Tek9vQ0FnakkrVnJjLzUwUkY1WlpRRkZveS83aDI3OVdlZUsKVTM3Qkd5YVl2N2N4dDd2Q1pUb1J2YVVvZDNTdHZrSitYR1l5NTNza2M0RHYrQzRnREE1UVpjZWErRHRoS3NBWgpaMnBwemdRR3doeVN5Q1J3NDJEMkttL1REaEVLNXVJUEJMOTd1RTZsYytrbWY0QUJIb09QVk12KzhqcTE4V0xMCmNlOWtSNktJNSs4bXJoNmhpaWZCN3ZqOVBQZE9JNzRiZC8vQmlwVmNtYlRWTjdXUGh3RUlDblh0ekQwYVNNaVUKZWt6eEFvSUJBR2JXZ1QxQUliK3VadkVnTnd0bjQ2TXJHOGVBWUQzY29nS1RCNWlicHc4bVF6M0hSSlNVQ3RmZwpLNzc3YnRBK3E4cmc3UTdVbGJMbmhMSWV1bk5PbU5ibkpmR0RzS2wzc2lIUzE4TS9kc3owUDk2NEphVHMybFVnCm83YVdvQTdreDFTQWNWcXN4M0pQbys4c3kxRHJQelFuc25CdVUxczZqN1NqNk9EdzB3TU9SaDJLVmNBenh6R0oKTDZacEF6dWFiSUZRVjcwZ3VSbmRUVmFZV2NYbFExQzlGN2dmZ1p0Q1dabHNsS3J0L0pEVFlKazhjY0hGWG5Nawpxc0pNRHBGMjgzaFVGTW5RV0R4NDVna1IyZkZuTmJkUUFOQUdNcUpnRzdCSHVJOGI4a3pibE1hMEQ4UnVPcXZHCnlDQXVsTnhnTUIyV3dxOWZvUkNXT1U1V3lYaUxqUUVDZ2dFQkFKT2dOM2RFemoxMHZROVBxRU5LQ1dqM1V6bFMKTVB2ZXpCdFVFMUVkeHlOS2orV0k0TlRoNUNuU25qOHE1L0tNNGE4b1FnS2FlVVN6bXF1L0tJVXQ4YkZUNytxagpQeU9ZOEIzRFA4N1FtZmg0RkJ0akRaVlQvbWZFQkxVaEN1cmxEWXVoS1JyRi9nTmNPRzh4bWpJcTVmQWgvZDFwCkVUOHRvbVNzblVORkw0M2ZJM1ljYzFUa0JSQ1JIREdHcDd1Nm5VTURBQ3BMTnhmMDU4SStqWlp2Qjg2VVgxSmIKWDdvT2tPQlFHZ2JhVTR4SHZ2Z2piKzdPVHk5RlAxZXlKUkVLZVpsTzVIZkdzMjJrcG9tZk5UczROV2thMThWSQpPeXJJd3JWS2h1cnlaVHM2QkpqRjVmSitKWW9BZjUwelVHSlhDMHl0Mjk4RTY0RVllYnRlaE5uSVZlbz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd-jwt-token",
          "namespace": "default"
        },
        "type": "Opaque"
      },
      "component": {
        "version": "v1",
        "kind": "Secret",
        "schema": ""
      }
    },
    {
      "id": "5d4f6eeb-a73b-4baa-9e70-295c08253532",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane-api-token",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-clip": "node",
        "background-image-containment": "over",
        "background-opacity": 0,
        "height": 32,
        "padding": 1,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "shield",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/secret-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/secret-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/secret-white.svg",
        "width": 32
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "admin-token": "TDE5ZVQ5a3lXY1hXUWJ3Q3RGYkxrQkRVM0lYanlDcmE=",
          "viewer-token": "N2d2cFB2RTJCOVNGN2h1SUhsQkJzWE9hNXJ1Y28wdkE="
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane-api-token",
          "namespace": "default"
        },
        "type": "Opaque"
      },
      "component": {
        "version": "v1",
        "kind": "Secret",
        "schema": ""
      }
    },
    {
      "id": "c323e596-7732-4043-9fee-a6af4efb1ca1",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane-tls",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-clip": "node",
        "background-image-containment": "over",
        "background-opacity": 0,
        "height": 32,
        "padding": 1,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "shield",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/secret-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/secret-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/secret-white.svg",
        "width": 32
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWN5b2NXUHBmS0ZhUC9DcVhGRkIwREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsaGNHbHphWGd0WTJFd0hoY05NalV3T1RFNE1UZ3pORFEyV2hjTk1qWXdPVEU0TVRnegpORFEyV2pBVU1SSXdFQVlEVlFRREV3bGhjR2x6YVhndFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREdiUjJ4bFdzQ0krWWFHNVp2MFhsdUlFMXZyMjVrWkYrejlBalRYK0JlWmZlWmFTclgKN0FBTnpWdC9VTUdzTVIzdjJvZ1FXM1ZCMWRnNG9wa0VZc3lyK1lNMkNoODQyU09xeFFUbmxNamxYUnhDcUxGeQo0dWV0N1U2SkFyeWp0ZFp2eEU4THJiQ0ZCR3RDWmY0K1lpUWZvcWV5MXZzTldUVit1VmZjQ3d4OGozSGh2TnJiCll6aXpmT0xTVGtraHVBS3JYM1N4ekY1dWtpVjVsYjRzZEFEclBPcjlhSno2Njc4aVA0SXhmSk5JY0dUSUUyd3AKQUtEVThYdEE5bk4vWkxhK0IwZTFyYmFETFBwRUpKaGIzQnd5RXUwQUlVWVFRbDIxVTZ3K3FMMVVvZnFHMWExZApkQm5nczNVbWNyNGxKTXgzcExha212YVo4bFVSdzdUSHFteWRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVzS3h1V09rZDA2TS9oUEZReEJZaHQ1dmVKcGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGYmdmTUd0Z2R6eHhvbVlaZWNBb1FVNFpoRTBEYWVTQnh6dnU4RlNmSXdtb2NTMEhFQkJ1R3hVCk5LWXJxb1hGbGhpWVRBUkZrODNGSm5XNEl1OHZkTTJVNDhoYzNzQ1drMWoxclppV1hOUVBFR3Eyd3lMeTZxNWMKeDdKTWFwM2QrUk5lKzE2V2RmTDZRMDZJWDJMMm5HTXJPOStNeUJUYWlDQkROaktiZXkzdEl2cUVPRTBXK2pDQQpwVmdxSUp1ci9TVStzMXRLdXROYU00TXVqQTIyR3JYaytkblYwQjN3NHhJc3hmOGs2WGVkWUJKdG9zUWFKWnU5CnBmbTBsblpBamxkVE5EQnUySWpudElDZldneUJEZDIzdWEva1M1SnNDaVUvL3hZR1dZelphMFN3VFNmVzJmSFAKT1ZwMGRHNEdDYS9kZVVBTWxJZXBEeUROV294VklDWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
          "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0RENDQXB5Z0F3SUJBZ0lSQU9CcXUrczBxWStYN1l2Y0lCNVJGSlF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkxTURreE9ERTRNelEwTmxvWERUSTJNRGt4T0RFNApNelEwTmxvd0h6RWRNQnNHQTFVRUF4TVVZWEJwYzJsNExXTnZiblJ5YjJ3dGNHeGhibVV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1TlhFb2YwSGlOYmxrZWRnL1E3YU9uZUtIQmZTTVU4ZHcKTE5wSDB0dTJyNmxiV296NjBiU0pHa3JQSTRyY3p1Q3BCVnQ3UE5qRFVZNHF4NVBuNHlMRFJoL3lRQy93MDhwNApRU2RlWUJZT3luSlFHb01DdW9WTW1PeVB1dU1hc2hiWFJGbU1aQ0RHdWp2SzAwdmhLZnVuWFhCVW1jSlRnekNVCktBWS9TQ01XcDNBQmlQYmV4WkxOVFpMd09Za0M3WXRLbHhVZ0JKWEtTTmVzNlY0U3IyUHllQlJBQ25LNS9RcTMKRUNJRWxjeEdiRUNvdE5SWi9WbHROMjh1L0ZxaWNCTGFSeVBsVXFkZmNMU1JiVzRTeHlHVldURkk3MGs5YVV2Mwp1czV5c0RDTkhkRkpVV1JwK3ZUTW5ZYUQxZktDZVVrU2MzOTUxbVdpT0tVaklKd2Z2NGRCQWdNQkFBR2pnZlV3CmdmSXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkxDc2JsanBIZE9qUDRUeFVNUVdJYmViM2lhWQpNSUdSQmdOVkhSRUVnWWt3Z1lhQ0ZHRndhWE5wZUMxamIyNTBjbTlzTFhCc1lXNWxnaHhoY0dsemFYZ3RZMjl1CmRISnZiQzF3YkdGdVpTNWtaV1poZFd4MGdpQmhjR2x6YVhndFkyOXVkSEp2YkMxd2JHRnVaUzVrWldaaGRXeDAKTG5OMlk0SXVZWEJwYzJsNExXTnZiblJ5YjJ3dGNHeGhibVV1WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1cwpiMk5oYkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVFwSVM3Uks2VU5nR0IvbHpaWjVpL1F0VzY0VStjV1QvCkJOUloxNmZFSUFUZ2JtWTZkOHZYLzlmcnNkT0kwaGhQTndsbDBxc1o3Qy9IdDFlRVYyYXduTjVCU0NmaXpWM3IKQURQOE5oZU90SjE0VS9GeEticTdFdlhmR0dZdGY1TWlYSVNUcmZ4dTRtc3pUbDRPbkFvUllncjYyUDBQajdETAplamRUckNmV1YwMkJuWE90NWtaNUNhZTFMeGdoN09WQVRTNGdHUzF2RmxCOFRIa3pQWXV1anhSL3g0VUJ2YXIzClB3RjFycTltQVQvVkpHYW0xbXdTSTBMbmJDellqbDdWaTZCbkgxV0s2RFUvWFU2TVp2N0lENTZRNENvU1RhdEQKaWFkOG5GNy9kbzI5bFl3bUZ5MGpJQUFhOWNJM3VvRUhENHFvUjBJUkp6T0tGdGxXWCs3MUNRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
          "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb1FJQkFBS0NBUUVBdVRWeEtIOUI0alc1WkhuWVAwTzJqcDNpaHdYMGpGUEhjQ3phUjlMYnRxK3BXMXFNCit0RzBpUnBLenlPSzNNN2dxUVZiZXp6WXcxR09Lc2VUNStNaXcwWWY4a0F2OE5QS2VFRW5YbUFXRHNweVVCcUQKQXJxRlRKanNqN3JqR3JJVzEwUlpqR1FneHJvN3l0Tkw0U243cDExd1ZKbkNVNE13bENnR1AwZ2pGcWR3QVlqMgozc1dTelUyUzhEbUpBdTJMU3BjVklBU1Z5a2pYck9sZUVxOWo4bmdVUUFweXVmMEt0eEFpQkpYTVJteEFxTFRVCldmMVpiVGR2THZ4YW9uQVMya2NqNVZLblgzQzBrVzF1RXNjaGxWa3hTTzlKUFdsTDk3ck9jckF3alIzUlNWRmsKYWZyMHpKMkdnOVh5Z25sSkVuTi9lZFpsb2ppbEl5Q2NINytIUVFJREFRQUJBb0gvVmczQ0dsSkorWTI1YmMyQQpKY29OSTVVUC9KOHpoK1VVajZ3UmllOWhvRDBMdHQvVktCTndPcFNlZnBLbXlrS1lwdUo0Q3NyQmdOYTB5K2hiCklYNHgwU3N2eDdBbUtudzlmQTVERkIxYkw5VDdtUlFXdmMrQWkrQ2MvRVpGUHkrYkFYZm8remM1NkhxRWtQeFkKekEvNUUzbTFJMzd2YlZkc1kwOTQydnZSODR0NVZ1aTJpZVpWamVwN0ZqV0xpanFsSURZM3MwOU94UjNvdi9aMwplZWVqRmxGV3FrTWpMMlNadTc2Nk1hSEx1TjduUWhvbDRJSy9ScTlDQmwyMWNSZDNrRCtMVlVON01nTVlYZEwrCjdleHQ3YzFCTTNEVDd2ZFdaY3hZUHZDQjczWGc3bDR3VWUrb2tBbkdwUmk0b1pWMnBiOHoxaFBuZEN0Sm1XN08KTFI5eEFvR0JBTzRqNUdSWjl2dWI2N0lwdFpxbGQwRzVUcC80MUhEUjRrdkxNUlZGazFUOGdLb1puOCtieU5QcApibnlyMnRtcC9Wem5mUXIzbVNMalNSL1lqR1ZNRlp3QUtRZVkxRUYxWXRiTzE4V1htRlF1MHlsdVNKQlFaVDlLCmhxaDZROUUvSitLMTN1SHVaSjJZdnVDcDQwZVUyV2VrTEtIZmhYeHhZMHo3NDNIQTV5aGZBb0dCQU1jWlRwanIKQlZsakkwWmdjVnFFQWg5MVlzcUdPUk5hdHhobStzTndWTXFzYjNtMHBHRUZ1bGJRZ3pQNkttNlFXZFZ1WnczWQowV3pxaCtTeEw3MGRJRk1Cc21HZUgveTJ6OWlrRDQzd1htWDFibW9PbnJzdHpJYy8xQlJ1YVBBNW85NVQ3NlY1CjlZbU9QR1BRbUEyY0Z4RnFGZ2NOWGJRTnlZM2ovVkJkby9SZkFvR0JBSllGR201MWxuZ3ZZNjRiUklLbDFwa2EKNmdNeE9IUFNaT01tb0Vjc1M0SndoNFdoR3VJbzI3MVVBdnliTHdXTVowWk50cUpnRktLNzJHY3RmbFNhTjhyTQo5d3dJSlQ4UGVqS2tuNTJrd0p2WDI4THY3TnF0S3Z0U01iNlZOMy9zYjI0TThOb1gybDdGeVFtelBMRHRmb0FpCkZ0UHJBaWJCTDdOaHc0ajM0eWUxQW9HQUQ5b2grZWJzZkJ0Nm1ZWGdRSmEySEk4YUdJbnJUWEV4bHMzTU5YZGkKS09qbHowamt0WnpoSXp4aTFlYWJMa1pzQUtSVHJEU1JLQnpjU1FjYWgvSWp1cmd0M2J2YlRDRzZGc09wUVdIYwpBajR5Vmx0bm8vdVhoMFU3dTR5MjZqbU1wSTBHVGFTU09pdUsvMStDVzhNTHl5VXBMOUtPbldGanBOcDhOc1BkCjQvMENnWUJLQUJrRnRoWktTUzZ4cWQ3NDJyWE0xV0gvOHhzbGtRazNHWHJ3WmFIT0ZORWVYbDIxZUo2N01qMDEKak1zMGtKcHhkSTJYQjR3V1FaWEZRcE5pa09xbW1pbkNHL1VmUnltQzJ3Z1hLcEZCUmo4UGJzSjBuZXZUdkh3WQprOUh1M3UxN1EzSEZpb0Mwc1IzT2NmUE0rVFNJTjdrNnQ5STFhYm51K2F3Tlg5MzEzQT09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane-tls",
          "namespace": "default"
        },
        "type": "kubernetes.io/tls"
      },
      "component": {
        "version": "v1",
        "kind": "Secret",
        "schema": ""
      }
    },
    {
      "id": "20865379-0ff3-4332-9252-757820297643",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane-tls",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-clip": "node",
        "background-image-containment": "over",
        "background-opacity": 0,
        "height": 32,
        "padding": 1,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "shield",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/secret-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/secret-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/secret-white.svg",
        "width": 32
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWN5b2NXUHBmS0ZhUC9DcVhGRkIwREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsaGNHbHphWGd0WTJFd0hoY05NalV3T1RFNE1UZ3pORFEyV2hjTk1qWXdPVEU0TVRnegpORFEyV2pBVU1SSXdFQVlEVlFRREV3bGhjR2x6YVhndFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREdiUjJ4bFdzQ0krWWFHNVp2MFhsdUlFMXZyMjVrWkYrejlBalRYK0JlWmZlWmFTclgKN0FBTnpWdC9VTUdzTVIzdjJvZ1FXM1ZCMWRnNG9wa0VZc3lyK1lNMkNoODQyU09xeFFUbmxNamxYUnhDcUxGeQo0dWV0N1U2SkFyeWp0ZFp2eEU4THJiQ0ZCR3RDWmY0K1lpUWZvcWV5MXZzTldUVit1VmZjQ3d4OGozSGh2TnJiCll6aXpmT0xTVGtraHVBS3JYM1N4ekY1dWtpVjVsYjRzZEFEclBPcjlhSno2Njc4aVA0SXhmSk5JY0dUSUUyd3AKQUtEVThYdEE5bk4vWkxhK0IwZTFyYmFETFBwRUpKaGIzQnd5RXUwQUlVWVFRbDIxVTZ3K3FMMVVvZnFHMWExZApkQm5nczNVbWNyNGxKTXgzcExha212YVo4bFVSdzdUSHFteWRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVzS3h1V09rZDA2TS9oUEZReEJZaHQ1dmVKcGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGYmdmTUd0Z2R6eHhvbVlaZWNBb1FVNFpoRTBEYWVTQnh6dnU4RlNmSXdtb2NTMEhFQkJ1R3hVCk5LWXJxb1hGbGhpWVRBUkZrODNGSm5XNEl1OHZkTTJVNDhoYzNzQ1drMWoxclppV1hOUVBFR3Eyd3lMeTZxNWMKeDdKTWFwM2QrUk5lKzE2V2RmTDZRMDZJWDJMMm5HTXJPOStNeUJUYWlDQkROaktiZXkzdEl2cUVPRTBXK2pDQQpwVmdxSUp1ci9TVStzMXRLdXROYU00TXVqQTIyR3JYaytkblYwQjN3NHhJc3hmOGs2WGVkWUJKdG9zUWFKWnU5CnBmbTBsblpBamxkVE5EQnUySWpudElDZldneUJEZDIzdWEva1M1SnNDaVUvL3hZR1dZelphMFN3VFNmVzJmSFAKT1ZwMGRHNEdDYS9kZVVBTWxJZXBEeUROV294VklDWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
          "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvekNDQW91Z0F3SUJBZ0lSQUloNkNrL0UzNTdIY0F6cGdXamlNWWN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkxTURreE9ERTRNelEwTmxvWERUSTJNRGt4T0RFNApNelEwTmxvd0hERWFNQmdHQTFVRUF4TVJZWEJwYzJsNExXUmhkR0V0Y0d4aGJtVXdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREFGcnhNVEdacGk4QkFLWTE2Q3FDdWlSMkgzSS9DRGVtY0srZ2EKMFVjWHRxK2kzbHVib0NZNzJBM2ZHcXN3dXZzVXBEczduMkJvcVh1NDJ2R0VVZ3pkS3VIOHM2NzRCaEg0eHpzKwo5Y1FDbWo1RGRTYXh6ZjZ0TVYyeGZnelNMclpsc2kvZzVzS1ZVRnBlblEyRFd2cFJNMURGL1hIUFV4aW14QnFnCnp3MFVxQk5jcUt1REp6dDd4TmJvM1hFT3NYZFR5Z1pyb1A0dHhxT1lKUGNNSkc5NExTY2Z4THpvWGM4dTBHdDgKQ09Sd2xHQXhkbXVkcnNyU2lmZ0pVVXl6NUhkS0czcU05bEpQUHlIeXQrUGZWdFlOMWRSQ1ZVTTZKYmg3U291NwpZKzlpcHMyRWdlYzlDK0RPY2w3Y2VQNyt3VCtRMENtTzNXSnNzb2NBbjlRRisrdzlBZ01CQUFHamdlY3dnZVF3CkRnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU0KQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGTENzYmxqcEhkT2pQNFR4VU1RV0liZWIzaWFZTUlHRApCZ05WSFJFRWZEQjZnaEZoY0dsemFYZ3RaR0YwWVMxd2JHRnVaWUlaWVhCcGMybDRMV1JoZEdFdGNHeGhibVV1ClpHVm1ZWFZzZElJZFlYQnBjMmw0TFdSaGRHRXRjR3hoYm1VdVpHVm1ZWFZzZEM1emRtT0NLMkZ3YVhOcGVDMWsKWVhSaExYQnNZVzVsTG1SbFptRjFiSFF1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3d3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFHWllVTkNtYlhUQmdNaEpCcCtuRlRORzViWXJoQVBrcW45czZ2R293QnZQMGU0TXV6WVRHT0hUCm0vNDdEdW5aNklTcjZrL1R1ajFFRzU1dFp2d2tSREsxbDByQ1RaWVFtY2xmRmd5U2FPRnFIZGJ1MUNwaGlpN2kKb2tLdUhORlB0WUJ4Wm5BeUlleVFUTVBzQ3lUNHJFR1ZLYVM0L3pWSHpQT3hRSlU3QUlpT1RPeG1xNUdHdGNNQgpVRWtzZ0dzRGpZTGVtQmg2cDR6Sm05dmtSY1d6aEZ6MUZzQ1ZrQStWa1JUVnh3aGVWV0ZXczlBY0FEd3dZMm9BCkpUd1V2OEM4TVg3Zk95ZksxL2hSZENNZFJvQ21ua1k1NkpsRWpKZ3VUa1pWVnI0N3dlQkJKQUNkbFBIK3dQR04KaStXSzFVVDZsaTRRNkE3bVc0MkdTVnIxZzVsLzdjUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
          "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd0JhOFRFeG1hWXZBUUNtTmVncWdyb2tkaDl5UHdnM3BuQ3ZvR3RGSEY3YXZvdDViCm02QW1POWdOM3hxck1McjdGS1E3TzU5Z2FLbDd1TnJ4aEZJTTNTcmgvTE91K0FZUitNYzdQdlhFQXBvK1EzVW0Kc2MzK3JURmRzWDRNMGk2MlpiSXY0T2JDbFZCYVhwME5nMXI2VVROUXhmMXh6MU1ZcHNRYW9NOE5GS2dUWEtpcgpneWM3ZThUVzZOMXhEckYzVThvR2E2RCtMY2FqbUNUM0RDUnZlQzBuSDhTODZGM1BMdEJyZkFqa2NKUmdNWFpyCm5hN0swb240Q1ZGTXMrUjNTaHQ2alBaU1R6OGg4cmZqMzFiV0RkWFVRbFZET2lXNGUwcUx1MlB2WXFiTmhJSG4KUFF2Z3puSmUzSGorL3NFL2tOQXBqdDFpYkxLSEFKL1VCZnZzUFFJREFRQUJBb0lCQUFGazVSVnV5OC8wd3h6SwpzR20wR3IrZVBtK1FzMHZRTW9HN1RtOWE2OVhCd1JYQTc1OG5TM1pVNTNMOG0yTWNjcWJEMFc5cHNqelh3T0ZNCldGSkdXbWpYaytTS2N6Rlk3YkljTGkzSDNBY0lWbC9Sak1uOXpvTExDNkp5dTk2OEQxbmtiRnJqUnBISjZmbzYKU042MGUyUG1pZW9DTDVpdkpDM1dZS1FKNS9TaUR3UjlCVWZKRFZlS1FXYVdGMWszRy93NDJhbVpsekRuRjBQNQpueUVaQlZzYWt3N1BCQndrR3JyT2dNOHhNeTJick5jdFpqandSaU45Qk9vS1h1OFN2NkJkZ0pONUQvbTlrYTRpCldWdFI4bk1nWms5aTA0d1hLWU5yV1BXV0Fhb0RUcHNLcTA0a216QXlKWjBkdkR1S01WNnFEcUFVb1RvaG85Y3IKUmREZHQwRUNnWUVBNXYxYXBkR1ZIVnFmTlhycjNEL0dVcGdtb3V3bmttSzA3eVphTTRiLzZBWDFQQkR6NGtrMgowQVJ2bjNKMmVBU3R5dkFBZDRXMzdKNnBmdXhxRWdSR2t2TzlGOGswcUJubW1YempnaTc0MGdpQWlMNnEyQ3VYClFJWHlRMGlKRXdtV0hLYnRPVG9vZkcrUENPTERKZ1dvS2VybEpZcjdtcmsxKzNnQ0VEZ2dWZmtDZ1lFQTFPTWQKZEVJei9RTG9OZ2UwQWJYNlE0eW1IRFliK3JGV0lEWExYMWQ0MFBUQnpkSGM1WlliNC9SV0hON0RYQ2dpRFRydgp1UmFPc3FQbUZQRDI2aUJlazNMemtPZjYwbzNMYytvaHB1S1RBdCtFaEkzQlI5MUt6YkpGQlNUMWVvSlZVQTExCjZPZUV4ZVRaZjBhOWl3bUZvWUNkWTMxcHAvTElTa0pkcVlQbVNXVUNnWUVBck1ZOGsyTWNZZ1J5cVpIejhaNVMKUFYxSktQdnk3VytmWG5JVmJnMUFSTkNRQ2dtMElrSVpHYWIzeHcvYXhSTGEyN3lBM09YTUdOVGtldWRpdjI4cgpTcWU5ZkprbkpjV1owcHl6bjZCNnhMOVBSUGs0Mk5CaUpnVUtuSUVZNW9CNUk1MUlPMUhoRHBKekxuWk8rWldwCm54RHZyUkV6K1JzbjRaeDJEcU9zckNFQ2dZQVF1M1VTTVMzaTRmcWNYSWlpWmNvd3l2bzNWMjFsaTlDb0lYSkYKb1J0bTJRWHVobU1sVEdJT3phS0RER013ZUJzTkRTZlFWVnlMMytQeW0ybmN4d1NIOUUzK2dxMHRKV1hyUzJpdgp0RGszelplZHo0SjBnb2tobDdSakRoK1pMR3RHS25pdEFKMW43Ry9IMkNpSHFBenZ2NnNmS2JsSE1RYmJCMUpUClE0R3pIUUtCZ1FEbEZkRkI1ZGNTMEY5WHd6YS9aQkRDMjF1S2dMNk5STk1NaHFhSHNPWGR1VFllcGNmYS9GLzYKTUVtZmd1SDVMcWNRdCtoQ25pRElleGhLK0tBTzl3ZHhTYnV1Q3IrOG05RDNCZDJzQWtQY3I2NGdlNnY0VXNWRgpFVHk4SG1YNUlqUkx1MFJkb1crd0N6ZFh2ZzdaYUtpaW12dmw1ZlUydThVU0VHVWZTQ1ZSQ1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane-tls",
          "namespace": "default"
        },
        "type": "kubernetes.io/tls"
      },
      "component": {
        "version": "v1",
        "kind": "Secret",
        "schema": ""
      }
    },
    {
      "id": "5070539f-5d04-4b31-872d-35276c0999a2",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller-tls",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-clip": "node",
        "background-image-containment": "over",
        "background-opacity": 0,
        "height": 32,
        "padding": 1,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "shield",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/secret-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/secret-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/secret-white.svg",
        "width": 32
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQWN5b2NXUHBmS0ZhUC9DcVhGRkIwREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsaGNHbHphWGd0WTJFd0hoY05NalV3T1RFNE1UZ3pORFEyV2hjTk1qWXdPVEU0TVRnegpORFEyV2pBVU1SSXdFQVlEVlFRREV3bGhjR2x6YVhndFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREdiUjJ4bFdzQ0krWWFHNVp2MFhsdUlFMXZyMjVrWkYrejlBalRYK0JlWmZlWmFTclgKN0FBTnpWdC9VTUdzTVIzdjJvZ1FXM1ZCMWRnNG9wa0VZc3lyK1lNMkNoODQyU09xeFFUbmxNamxYUnhDcUxGeQo0dWV0N1U2SkFyeWp0ZFp2eEU4THJiQ0ZCR3RDWmY0K1lpUWZvcWV5MXZzTldUVit1VmZjQ3d4OGozSGh2TnJiCll6aXpmT0xTVGtraHVBS3JYM1N4ekY1dWtpVjVsYjRzZEFEclBPcjlhSno2Njc4aVA0SXhmSk5JY0dUSUUyd3AKQUtEVThYdEE5bk4vWkxhK0IwZTFyYmFETFBwRUpKaGIzQnd5RXUwQUlVWVFRbDIxVTZ3K3FMMVVvZnFHMWExZApkQm5nczNVbWNyNGxKTXgzcExha212YVo4bFVSdzdUSHFteWRBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVzS3h1V09rZDA2TS9oUEZReEJZaHQ1dmVKcGd3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGYmdmTUd0Z2R6eHhvbVlaZWNBb1FVNFpoRTBEYWVTQnh6dnU4RlNmSXdtb2NTMEhFQkJ1R3hVCk5LWXJxb1hGbGhpWVRBUkZrODNGSm5XNEl1OHZkTTJVNDhoYzNzQ1drMWoxclppV1hOUVBFR3Eyd3lMeTZxNWMKeDdKTWFwM2QrUk5lKzE2V2RmTDZRMDZJWDJMMm5HTXJPOStNeUJUYWlDQkROaktiZXkzdEl2cUVPRTBXK2pDQQpwVmdxSUp1ci9TVStzMXRLdXROYU00TXVqQTIyR3JYaytkblYwQjN3NHhJc3hmOGs2WGVkWUJKdG9zUWFKWnU5CnBmbTBsblpBamxkVE5EQnUySWpudElDZldneUJEZDIzdWEva1M1SnNDaVUvL3hZR1dZelphMFN3VFNmVzJmSFAKT1ZwMGRHNEdDYS9kZVVBTWxJZXBEeUROV294VklDWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
          "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR6akNDQXJhZ0F3SUJBZ0lRU0txdG5NSHBWVlVlMkdYbzk0U0phakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsaGNHbHphWGd0WTJFd0hoY05NalV3T1RFNE1UZ3pORFEyV2hjTk1qWXdPVEU0TVRnegpORFEyV2pBa01TSXdJQVlEVlFRREV4bGhjR2x6YVhndGFXNW5jbVZ6Y3kxamIyNTBjbTlzYkdWeU1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTdaS2VhVldpdHllL2gxNmxTNDlZc2QvdDErNSsKaUhGU29ybFd3WkRmSnhOL0hFakcweDFHOXRlT0NWb3k0YWgyempBam5wQVpOMUdDb1dhVDVSWkJvQ3lKcUdvdwpsZTVaZFFZY0U4N1kreUJBN2ExR0ppY09YZ3pYRStSQS9zeG1NLyt2QWRhcTZJbzJHeEVleGo3NWlHR1B5TU9kCkIyVUVxaUxVbDlYbkhBVnp1SDNzNVFqYm9RUTJLNlI2blF4VnB4ZmptdVBjRFNIbWRRbnAwSTlUcUNOLy8vRGYKNXp2cEo3M2QvM3hCck5mejRSQmRxNFU1bWhLMnRRVFB6WEhOWUFsRVlTTE0wcEhkSWZ0d0VPUTJGNDRZU3BlUQpydGFMZWh3b3FMYnJHVUxsbXJDZzJncDJKMkl0OE1RUTMvZSt6UUg4YWlHZTlJMkE1SklrU0lMVXhRSURBUUFCCm80SUJDakNDQVFZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGTENzYmxqcEhkT2pQNFR4VU1RVwpJYmViM2lhWU1JR2xCZ05WSFJFRWdaMHdnWnFDR1dGd2FYTnBlQzFwYm1keVpYTnpMV052Ym5SeWIyeHNaWEtDCklXRndhWE5wZUMxcGJtZHlaWE56TFdOdmJuUnliMnhzWlhJdVpHVm1ZWFZzZElJbFlYQnBjMmw0TFdsdVozSmwKYzNNdFkyOXVkSEp2Ykd4bGNpNWtaV1poZFd4MExuTjJZNEl6WVhCcGMybDRMV2x1WjNKbGMzTXRZMjl1ZEhKdgpiR3hsY2k1a1pXWmhkV3gwTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQjRGb203M0VYL2pKeVhZNlhwL1FTS0xmOWdOYktHSlV2Y01zTTB1Z2NSYTZZOTV4aGMwZUVnZVJHbzlmdHAKcCtPSWdsRUlkSHB5Qm0yRENwWk5CbVUzSTRWV0VCYkxXaG82Q3RqV3UwbHkrTnZYUjVCSGs1d0hyRnNHekZldwo4eGNmaHYyQzh2anhvRE9WZHg2ZEo4SmcrV3lIdXd0Y3F6Qmx3R0ZRdm1hOWN6ckdQNzZMODhyMzNESXMwV3ZDCmxhajkxaUhBdjJVN2xuSW9uNlltTzBNRUsxWW1lRFRNNmxOWWJPdVdWbWZ4amhHcC82N3U0TFRLTjd4dytSVHcKcERmdTNacmhEcTRQajBOeVlEOXpoTnRMbGhocEpOQWZWL3J3c2JNYm0xMndhUHE5bytwSi9GbTVKRk15ZDhRcApPNnE5Sys3RTZiR3N0QmJpVHFjT1VQNXkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
          "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBN1pLZWFWV2l0eWUvaDE2bFM0OVlzZC90MSs1K2lIRlNvcmxXd1pEZkp4Ti9IRWpHCjB4MUc5dGVPQ1ZveTRhaDJ6akFqbnBBWk4xR0NvV2FUNVJaQm9DeUpxR293bGU1WmRRWWNFODdZK3lCQTdhMUcKSmljT1hnelhFK1JBL3N4bU0vK3ZBZGFxNklvMkd4RWV4ajc1aUdHUHlNT2RCMlVFcWlMVWw5WG5IQVZ6dUgzcwo1UWpib1FRMks2UjZuUXhWcHhmam11UGNEU0htZFFucDBJOVRxQ04vLy9EZjV6dnBKNzNkLzN4QnJOZno0UkJkCnE0VTVtaEsydFFUUHpYSE5ZQWxFWVNMTTBwSGRJZnR3RU9RMkY0NFlTcGVRcnRhTGVod29xTGJyR1VMbG1yQ2cKMmdwMkoySXQ4TVFRMy9lK3pRSDhhaUdlOUkyQTVKSWtTSUxVeFFJREFRQUJBb0lCQUFES2p0czhPandOdnpOSQpmZ3o5QXBpMFZsQ0x0Q291aUo5SmswaDhlOXFDZHNBQlJtajV4aFBxQmQrM3ZJMUlaVnE0RldxbWFqWmJsd3liCmVYMWFHK1dwMm40UUdrdXZ1TGdCc2dWVnh2QWkwTHBjMUwxQXN5TjFtTUxnRzZZM3grQnpqTHZCMVl3Um9jWWkKOEx2QTE1TzhFYUdHaTg0b3hiTHVvdkp4eU85Yk9ScGJhbHZic3YxOEVtVjNwZE14U0F2S0RqZmg0SU43bFl2agpDWHNlWE1aejBCMlhZL3lUR1gvd3JZYVgycW1udjRzMHBGSUJycHhEcjU0TmlQenVDNVhtekhPWHhnaFR0b3BICkhVTFFlYTh5QUU3di9OLzNZOVBIT05oanhmZGQ4d0VISk4wOG91UU9YWDNJeUpQd1J1c3dFUVFBTmMrZG5teXoKV0xqTkxXRUNnWUVBN2VHME84Q2pXRFdOL0FuZkxaWjZoM2lOc1ZBN1FTUFloTk9aTHA1TEx2SHJuYmhHYkhxUQozaUxRTEd2Rjl6UEllOCtscFF0OEZvNS84UURxNUJOT1M2K0tKWjBqRCsrREZDeG13cktTY2RzZUV1M3YzUDYrClJxeU93cE5aZVJSMXpvcXRpbnVDZjEyTm9rd01lRzduUTZRZFdyaGJpbENnSlFRdTh4TEo0cGtDZ1lFQS82cmsKSmNrcW4xbzVEeEJXN0lHek45NDlvZjk4R3hOazlsbHMvcHpBbHVoK2NQL1pPRW84RVpWTXlaR3F5Nko3SXlUcwpuQ1NRZHBmY1JGdHRDY2hIeXh1Z3QvTDM5NS9kUVQxc1JuUjhlR013dklFWHFZR0NtWlZwUk5pY2Q5TTIyY2dVCjZjZnROa1QvbmxjWCs5SFZsR3JOazI5TDVpVGN5UUMveHlrTHl3MENnWUJOeHlKYTl4MXhWZkZhbXcreHBDWGoKN1hMR3F1ajAzM2VIMW5lYlduNVNseDdtcnIyMzhrc3psa1ppZjhwMmpTUGI5NFM5ZGdmWWlEY2s0WnZyZnJSMgo0cXBVcWhBd3dhc21DVzUvOGtzWGx3RTZSem5LRkRDNmd1a2FqWHNQcjdUbEYwcXVvTHVHVVZ4aDJHT3JiUGVJCmtqeFcwVGg4L09lZnNzSjNENG1hNFFLQmdBbFoyY0JjRERnSjE3NXFUWk9XNXRRclI3dk9HVjd3SmFndyt5Q1EKNFNaajJJUVBoNFZjaWJmbTZ3a1FUOXZrMUhZam1wZlhhb1U3NXEyRlhvYVdFYkluRDRqSzFURDBZdVpJOWRYWgoydGVZWVNiejNjYXdXdk45R0gyUklwL3JWTDFBYVN0bnlaQkxrOEhaMDZHOU9mK1VySEl4QnVpaS9vUkhoN3drCkR5OWRBb0dCQU9sWXhjWlIvQUxxeE5nSVVCU3NPdlByR3c1QmU3YjJaUzdLYzFvK2k1WXNUaS9OYXhKNHBHNVMKdXJRRUprSnZTbE9Qb0k0aFkvbTJJc2JWaWI1N2gzaGFNaFpGM1Vzdk85MnFyelg0Sm1jV1Z5anQybU5kNGNHZgoyUGpadkIwTFVyUzVMd1F1a2JvMFZCN0NOdEJGU1hZbTU2Ujg5SWxLd2xsclB1RldLZVFDCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller-tls",
          "namespace": "default"
        },
        "type": "kubernetes.io/tls"
      },
      "component": {
        "version": "v1",
        "kind": "Secret",
        "schema": ""
      }
    },
    {
      "id": "26e3fa4e-3769-432c-9417-64629899e885",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane-default",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/configmap-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/configmap-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "config.yaml": "\nnginx_config:\n  error_log: /dev/stderr\n  stream:\n    access_log: /dev/stdout\n  http:\n    access_log: /dev/stdout\n  http_configuration_snippet: |\n    proxy_buffering off;\napisix:\n  control:\n    ip: 0.0.0.0\n    port: 9090\ndeployment:\n  role: control_plane\n  role_control_plane:\n      config_provider: etcd\n      conf_server:\n        listen: 0.0.0.0:9280\n        cert: /bitnami/certs/tls.crt\n        cert_key: /bitnami/certs/tls.key\n  etcd:\n    host:\n      - http://apisix-etcd-0.apisix-etcd-headless:2379\n      - http://apisix-etcd-1.apisix-etcd-headless:2379\n      - http://apisix-etcd-2.apisix-etcd-headless:2379\n    prefix: /apisix\n    timeout: 30\n    use_grpc: false\n    startup_retry: 60\n  certs:\n    cert: /bitnami/certs/tls.crt\n    cert_key: /bitnami/certs/tls.key\n    client_ca_cert: /bitnami/certs/ca.crt\n  admin:\n    https_admin: true\n    admin_api_mtls:\n      admin_ssl_cert: /bitnami/certs/tls.crt\n      admin_ssl_cert_key: /bitnami/certs/tls.key\n    allow_admin:\n      - 0.0.0.0/0\n    admin_key:\n      - name: admin\n        key: \"{{APISIX_ADMIN_API_TOKEN}}\"\n        role: admin\n      - name: viewer\n        key: \"{{APISIX_VIEWER_API_TOKEN}}\"\n        role: viewer\n    admin_listen:\n        port: 9180\n    enable_admin_cors: true         # Admin API support CORS response headers.\n    enable_admin_ui: true\ndiscovery:\n  kubernetes:\n    service:\n      schema: https #default https\n      # apiserver host, options [ipv4, ipv6, domain, environment variable]\n      host: ${KUBERNETES_SERVICE_HOST}\n      # apiserver port, options [port number, environment variable]\n      port: ${KUBERNETES_SERVICE_PORT}\n    client:\n      # serviceaccount token or token_file\n      token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    default_weight: 50 # weight assigned to each discovered endpoint. default 50, minimum 0\n"
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane-default",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ConfigMap",
        "schema": ""
      }
    },
    {
      "id": "7e462b9a-cf58-4564-bf57-15cf128cb099",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane-default",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/configmap-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/configmap-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "00_default_config.yaml": "\napisix:\n  node_listen: 9080\n  enable_admin: false\n  ssl:\n    enable: true\n    listen:\n      - port: 9443\n    ssl_trusted_certificate: /bitnami/certs/ca.crt\n  enable_http2: true\n  control:\n    ip: 0.0.0.0\n    port: 9090\nnginx_config:\n  error_log: /dev/stderr\n  stream:\n    access_log: /dev/stdout\n  http:\n    access_log: /dev/stdout\n  http_configuration_snippet: |\n    proxy_buffering off;\ndeployment:\n  role: data_plane\n  role_data_plane:\n    config_provider: etcd\n    control_plane:\n      host:\n        - https://apisix-control-plane:9280\n      prefix: /apisix\n      timeout: 30\n  etcd:\n    host:\n      - http://apisix-etcd-0.apisix-etcd-headless:2379\n      - http://apisix-etcd-1.apisix-etcd-headless:2379\n      - http://apisix-etcd-2.apisix-etcd-headless:2379\n    prefix: /apisix\n    timeout: 30\n    use_grpc: false\n    startup_retry: 60\n  certs:\n    cert: /bitnami/certs/tls.crt\n    cert_key: /bitnami/certs/tls.key\n    client_ca_cert: /bitnami/certs/ca.crt\ndiscovery:\n  kubernetes:\n    service:\n      # apiserver schema, options [http, https]\n      schema: https #default https\n\n      # apiserver host, options [ipv4, ipv6, domain, environment variable]\n      host: ${KUBERNETES_SERVICE_HOST} #default ${KUBERNETES_SERVICE_HOST}\n\n      # apiserver port, options [port number, environment variable]\n      port: ${KUBERNETES_SERVICE_PORT}  #default ${KUBERNETES_SERVICE_PORT}\n\n    client:\n      # serviceaccount token or token_file\n      token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    default_weight: 50 # weight assigned to each discovered endpoint. default 50, minimum 0\n"
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane-default",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ConfigMap",
        "schema": ""
      }
    },
    {
      "id": "18fb807f-9e84-4ffb-b687-4693187fd5a4",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller-default",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "bottom-round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/configmap-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/configmap-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "data": {
          "config.yaml": "# log options\nlog_level: \"info\"\nlog_output: \"stderr\"\nhttps_listen: \":8443\"\ncert_file: \"/bitnami/certs/tls.crt\"\nkey_file: \"/bitnami/certs/tls.key\"\nhttp_listen: \":8080\"\ningress_publish_service: \"default/apisix-data-plane\"\nenable_profiling: true\napisix-resource-sync-interval: 1h\nkubernetes:\n  kubeconfig: \"\"\n  resync_interval: \"6h\"\n  election_id: \"apisix-ingress-controller-leader\"\n  ingress_class: \"apisix\"\n  ingress_version: \"networking/v1\"\n  watch_endpointslices: false\n  apisix_route_version: \"apisix.apache.org/v2\"\n  enable_gateway_api: false\n  apisix_version: \"apisix.apache.org/v2\"\n  plugin_metadata_cm: \"\"\napisix:\n  admin_api_version: \"v3\"\n  default_cluster_base_url: https://apisix-control-plane:9180/apisix/admin\n  default_cluster_admin_key: \"{{APISIX_ADMIN_API_TOKEN}}\"\n  default_cluster_name: \"default\"\n"
        },
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller-default",
          "namespace": "default"
        }
      },
      "component": {
        "version": "v1",
        "kind": "ConfigMap",
        "schema": ""
      }
    },
    {
      "id": "e2f09394-e2a5-4997-a057-4d5cb203a1b8",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-default-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "height": 22,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrole-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrole-white.svg",
        "width": 22,
        "x": 8.5,
        "y": 7.5
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-default-control-plane"
        },
        "rules": [
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "endpoints"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          }
        ]
      },
      "component": {
        "version": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRole",
        "schema": ""
      }
    },
    {
      "id": "3b63c57e-7e15-48d7-b1bb-4643820ddff2",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-default-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "height": 22,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrole-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrole-white.svg",
        "width": 22,
        "x": 8.5,
        "y": 7.5
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-default-data-plane"
        },
        "rules": [
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "endpoints"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          }
        ]
      },
      "component": {
        "version": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRole",
        "schema": ""
      }
    },
    {
      "id": "cc912079-4089-4258-b0cd-a053fcecf76e",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-default-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "height": 22,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrole-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrole-white.svg",
        "width": 22,
        "x": 8.5,
        "y": 7.5
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-default-ingress-controller"
        },
        "rules": [
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "events"
            ],
            "verbs": [
              "*"
            ]
          },
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "configmaps",
              "endpoints",
              "pods",
              "services",
              "secrets"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              ""
            ],
            "resources": [
              "namespaces"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "extensions"
            ],
            "resources": [
              "ingresses"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "extensions"
            ],
            "resources": [
              "ingresses/status"
            ],
            "verbs": [
              "update"
            ]
          },
          {
            "apiGroups": [
              "networking.k8s.io"
            ],
            "resources": [
              "ingresses"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "networking.k8s.io"
            ],
            "resources": [
              "ingresses/status"
            ],
            "verbs": [
              "update"
            ]
          },
          {
            "apiGroups": [
              "apisix.apache.org"
            ],
            "resources": [
              "apisixroutes",
              "apisixroutes/status",
              "apisixupstreams",
              "apisixupstreams/status",
              "apisixtlses",
              "apisixtlses/status",
              "apisixclusterconfigs",
              "apisixclusterconfigs/status",
              "apisixconsumers",
              "apisixconsumers/status",
              "apisixpluginconfigs",
              "apisixpluginconfigs/status",
              "apisixglobalrules",
              "apisixglobalrules/status"
            ],
            "verbs": [
              "*"
            ]
          },
          {
            "apiGroups": [
              "coordination.k8s.io"
            ],
            "resources": [
              "leases"
            ],
            "verbs": [
              "*"
            ]
          },
          {
            "apiGroups": [
              "discovery.k8s.io"
            ],
            "resources": [
              "endpointslices"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "gateway.networking.k8s.io"
            ],
            "resources": [
              "httproutes",
              "tlsroutes",
              "gateways",
              "gatewayclasses"
            ],
            "verbs": [
              "get",
              "list",
              "watch"
            ]
          },
          {
            "apiGroups": [
              "gateway.networking.k8s.io"
            ],
            "resources": [
              "httproutes/status",
              "tlsroutes/status",
              "gateways/status",
              "gatewayclasses/status"
            ],
            "verbs": [
              "update"
            ]
          }
        ]
      },
      "component": {
        "version": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRole",
        "schema": ""
      }
    },
    {
      "id": "bcb32722-1c4e-4a85-aafb-26cce8f81a38",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-default-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "height": 25,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrolebinding-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrolebinding-white.svg",
        "width": 25,
        "x": 7,
        "y": 7
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-default-control-plane"
        },
        "roleRef": {
          "apiGroup": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "name": "apisix-default-control-plane"
        },
        "subjects": [
          {
            "kind": "ServiceAccount",
            "name": "apisix-control-plane",
            "namespace": "default"
          }
        ]
      },
      "component": {
        "version": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRoleBinding",
        "schema": ""
      }
    },
    {
      "id": "dc20ddbd-d9d9-48ab-9974-c511f3ad1933",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-default-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "height": 25,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrolebinding-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrolebinding-white.svg",
        "width": 25,
        "x": 7,
        "y": 7
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-default-data-plane"
        },
        "roleRef": {
          "apiGroup": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "name": "apisix-default-data-plane"
        },
        "subjects": [
          {
            "kind": "ServiceAccount",
            "name": "apisix-data-plane",
            "namespace": "default"
          }
        ]
      },
      "component": {
        "version": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRoleBinding",
        "schema": ""
      }
    },
    {
      "id": "1a142f91-8d08-442f-a467-b385a1097f75",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-default-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "height": 25,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/clusterrolebinding-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/clusterrolebinding-white.svg",
        "width": 25,
        "x": 7,
        "y": 7
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-default-ingress-controller"
        },
        "roleRef": {
          "apiGroup": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "name": "apisix-default-ingress-controller"
        },
        "subjects": [
          {
            "kind": "ServiceAccount",
            "name": "apisix-ingress-controller",
            "namespace": "default"
          }
        ]
      },
      "component": {
        "version": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRoleBinding",
        "schema": ""
      }
    },
    {
      "id": "bd4e06a3-669a-4764-bb89-576123c77aa7",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd-headless",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-position-y": "4.5",
        "height": 20,
        "padding": 12,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-triangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/service-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/service-white.svg",
        "width": 20
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
          },
          "labels": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd-headless",
          "namespace": "default"
        },
        "spec": {
          "clusterIP": "None",
          "ports": [
            {
              "name": "client",
              "port": 2379,
              "targetPort": "client"
            },
            {
              "name": "peer",
              "port": 2380,
              "targetPort": "peer"
            }
          ],
          "publishNotReadyAddresses": true,
          "selector": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/name": "etcd"
          },
          "type": "ClusterIP"
        }
      },
      "component": {
        "version": "v1",
        "kind": "Service",
        "schema": ""
      }
    },
    {
      "id": "8cb22032-4938-47ed-8a4b-158438ab609d",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-position-y": "4.5",
        "height": 20,
        "padding": 12,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-triangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/service-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/service-white.svg",
        "width": 20
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd",
          "namespace": "default"
        },
        "spec": {
          "ports": [
            {
              "name": "client",
              "nodePort": null,
              "port": 2379,
              "targetPort": "client"
            },
            {
              "name": "peer",
              "nodePort": null,
              "port": 2380,
              "targetPort": "peer"
            }
          ],
          "selector": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/name": "etcd"
          },
          "sessionAffinity": "None",
          "type": "ClusterIP"
        }
      },
      "component": {
        "version": "v1",
        "kind": "Service",
        "schema": ""
      }
    },
    {
      "id": "a0486c6a-0da8-4e76-b0b8-2892ff211ff8",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-position-y": "4.5",
        "height": 20,
        "padding": 12,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-triangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/service-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/service-white.svg",
        "width": 20
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane",
          "namespace": "default"
        },
        "spec": {
          "ports": [
            {
              "name": "https-admin-api",
              "nodePort": null,
              "port": 9180,
              "protocol": "TCP",
              "targetPort": "https-admin-api"
            },
            {
              "name": "https-cfg-srv",
              "nodePort": null,
              "port": 9280,
              "protocol": "TCP",
              "targetPort": "https-cfg-srv"
            }
          ],
          "selector": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix"
          },
          "sessionAffinity": "None",
          "type": "ClusterIP"
        }
      },
      "component": {
        "version": "v1",
        "kind": "Service",
        "schema": ""
      }
    },
    {
      "id": "915f856c-cd2c-4578-8623-590812584aa2",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-position-y": "4.5",
        "height": 20,
        "padding": 12,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-triangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/service-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/service-white.svg",
        "width": 20
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane",
          "namespace": "default"
        },
        "spec": {
          "externalTrafficPolicy": "Cluster",
          "ports": [
            {
              "name": "http",
              "port": 80,
              "protocol": "TCP",
              "targetPort": "http"
            },
            {
              "name": "https",
              "port": 443,
              "protocol": "TCP",
              "targetPort": "https"
            }
          ],
          "selector": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix"
          },
          "sessionAffinity": "None",
          "type": "LoadBalancer"
        }
      },
      "component": {
        "version": "v1",
        "kind": "Service",
        "schema": ""
      }
    },
    {
      "id": "34824e1d-ba2c-4fc1-8f12-ad0544e00943",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-position-y": "4.5",
        "height": 20,
        "padding": 12,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-triangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/service-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/service-white.svg",
        "width": 20
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller",
          "namespace": "default"
        },
        "spec": {
          "ports": [
            {
              "name": "http",
              "nodePort": null,
              "port": 80,
              "protocol": "TCP",
              "targetPort": "http"
            },
            {
              "name": "https",
              "nodePort": null,
              "port": 443,
              "protocol": "TCP",
              "targetPort": "https"
            }
          ],
          "selector": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix"
          },
          "sessionAffinity": "None",
          "type": "ClusterIP"
        }
      },
      "component": {
        "version": "v1",
        "kind": "Service",
        "schema": ""
      }
    },
    {
      "id": "acd6099a-e91a-487d-aed5-4cbac3046961",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-control-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/deployment-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/deployment-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/deployment-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "parent",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "control-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-control-plane",
          "namespace": "default"
        },
        "spec": {
          "replicas": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "control-plane",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          },
          "strategy": {
            "type": "RollingUpdate"
          },
          "template": {
            "metadata": {
              "annotations": {
                "checksum/config": "ec6c1bfd4fc20f3a3f2c51c4cc1ae911b6885c1a7a8b88c57e5eebc12697a3ac",
                "checksum/config-extra": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
                "checksum/secret": "de22d060f84354788b6261b6618c7c6749e723ddff84c74d554c6eefcb2f9df2"
              },
              "labels": {
                "app.kubernetes.io/component": "control-plane",
                "app.kubernetes.io/instance": "apisix",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "apisix",
                "app.kubernetes.io/part-of": "apisix",
                "app.kubernetes.io/version": "3.13.0",
                "helm.sh/chart": "apisix-6.0.0"
              }
            },
            "spec": {
              "affinity": {
                "nodeAffinity": null,
                "podAffinity": null,
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchLabels": {
                            "app.kubernetes.io/component": "control-plane",
                            "app.kubernetes.io/instance": "apisix",
                            "app.kubernetes.io/name": "apisix"
                          }
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 1
                    }
                  ]
                }
              },
              "automountServiceAccountToken": true,
              "containers": [
                {
                  "args": [
                    "#!/bin/bash\n# Clean up UDS file before starting APISIX\necho \"Checking for existing UDS file...\"\nUDS_FILE=\"/usr/local/apisix/logs/worker_events.sock\"\nif [ -e \"$UDS_FILE\" ]; then\n    echo \"Found existing UDS file: $UDS_FILE - removing it\"\n    rm -f \"$UDS_FILE\"\n    echo \"UDS file removed successfully\"\nelse\n    echo \"No existing UDS file found at: $UDS_FILE\"\nfi\n\n# Start OpenResty\nexec openresty -p /usr/local/apisix -g \"daemon off;\"\n"
                  ],
                  "command": [
                    "bash",
                    "-c"
                  ],
                  "env": null,
                  "envFrom": null,
                  "image": "docker.io/bitnami/apisix:3.13.0-debian-12-r4",
                  "imagePullPolicy": "IfNotPresent",
                  "livenessProbe": {
                    "failureThreshold": 5,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "tcpSocket": {
                      "port": "http-control"
                    },
                    "timeoutSeconds": 5
                  },
                  "name": "apisix",
                  "ports": [
                    {
                      "containerPort": 9180,
                      "name": "https-admin-api"
                    },
                    {
                      "containerPort": 9280,
                      "name": "https-cfg-srv"
                    },
                    {
                      "containerPort": 9090,
                      "name": "http-control"
                    }
                  ],
                  "readinessProbe": {
                    "failureThreshold": 5,
                    "httpGet": {
                      "path": "/v1/healthcheck",
                      "port": "http-control"
                    },
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "resources": {
                    "limits": {
                      "cpu": "150m",
                      "ephemeral-storage": "2Gi",
                      "memory": "192Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "ephemeral-storage": "50Mi",
                      "memory": "128Mi"
                    }
                  },
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/usr/local/apisix",
                      "name": "empty-dir",
                      "subPath": "app-tmp-dir"
                    },
                    {
                      "mountPath": "/tmp",
                      "name": "empty-dir",
                      "subPath": "tmp-dir"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    }
                  ]
                }
              ],
              "dnsPolicy": "ClusterFirst",
              "initContainers": [
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\nretry_while() {\n  local -r cmd=\"${1:?cmd is missing}\"\n  local -r retries=\"${2:-12}\"\n  local -r sleep_time=\"${3:-5}\"\n  local return_value=1\n\n  read -r -a command \u003c\u003c\u003c \"$cmd\"\n  for ((i = 1 ; i \u003c= retries ; i+=1 )); do\n      \"${command[@]}\" \u0026\u0026 return_value=0 \u0026\u0026 break\n      sleep \"$sleep_time\"\n  done\n  return $return_value\n}\n\netcd_hosts=(\n  \"http://apisix-etcd:2379\"\n)\n\ncheck_etcd() {\n    local curl_options=()\n\n    local -r etcd_host=\"${1:-?missing etcd}\"\n    if curl \"${curl_options[@]}\" --max-time 5 \"${etcd_host}/version\" | grep etcdcluster; then\n       return 0\n    else\n       return 1\n    fi\n}\n\nfor host in \"${etcd_hosts[@]}\"; do\n    echo \"Checking connection to $host\"\n    if retry_while \"check_etcd $host\"; then\n        echo \"Connected to $host\"\n    else\n        echo \"Error connecting to $host\"\n        exit 1\n    fi\ndone\n\necho \"Connection success\"\nexit 0\n"
                  ],
                  "image": "docker.io/bitnami/os-shell:12-debian-12-r50",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "wait-for-etcd",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  }
                },
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\n# Build final config.yaml with the sections of the different files\nexport APISIX_ADMIN_API_TOKEN=\"$(\u003c $APISIX_ADMIN_API_TOKEN_FILE)\"\nexport APISIX_VIEWER_API_TOKEN=\"$(\u003c $APISIX_VIEWER_API_TOKEN_FILE)\"\nfind /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' \u003e /bitnami/apisix/rendered-conf/pre-render-config.yaml\nrender-template /bitnami/apisix/rendered-conf/pre-render-config.yaml \u003e /bitnami/apisix/rendered-conf/config.yaml\nchmod 644 /bitnami/apisix/rendered-conf/config.yaml\nrm /bitnami/apisix/rendered-conf/pre-render-config.yaml\n"
                  ],
                  "env": [
                    {
                      "name": "BITNAMI_DEBUG",
                      "value": "false"
                    },
                    {
                      "name": "APISIX_ADMIN_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/admin-token"
                    },
                    {
                      "name": "APISIX_VIEWER_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/viewer-token"
                    }
                  ],
                  "envFrom": null,
                  "image": "docker.io/bitnami/os-shell:12-debian-12-r50",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "render-conf",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/bitnami/apisix/rendered-conf",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/bitnami/apisix/conf/00_default",
                      "name": "config"
                    },
                    {
                      "mountPath": "/opt/bitnami/apisix/secrets",
                      "name": "apisix-secrets"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    }
                  ]
                },
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\ncp -R /opt/bitnami/apisix/conf /usr/local/apisix\nln -sf /opt/bitnami/apisix/deps /usr/local/apisix\nln -sf /opt/bitnami/apisix/ui /usr/local/apisix\nln -sf /opt/bitnami/apisix/openresty/luajit/share/lua/*/apisix /usr/local/apisix\nmkdir -p /usr/local/apisix/logs\nexport APISIX_ADMIN_API_TOKEN=\"$(\u003c $APISIX_ADMIN_API_TOKEN_FILE)\"\nexport APISIX_VIEWER_API_TOKEN=\"$(\u003c $APISIX_VIEWER_API_TOKEN_FILE)\"\n# Build final config.yaml with the sections of the different files\ncp /bitnami/apisix/rendered-conf/config.yaml /usr/local/apisix/conf/\nchmod 644 /usr/local/apisix/conf/config.yaml\napisix init\napisix init_etcd\n# The path is hardcoded in the conf so we need to copy them to the server folder\ncp /bitnami/certs/tls.crt /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.crt\ncp /bitnami/certs/tls.key /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.key\n"
                  ],
                  "env": [
                    {
                      "name": "BITNAMI_DEBUG",
                      "value": "false"
                    },
                    {
                      "name": "APISIX_ADMIN_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/admin-token"
                    },
                    {
                      "name": "APISIX_VIEWER_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/viewer-token"
                    }
                  ],
                  "envFrom": null,
                  "image": "docker.io/bitnami/apisix:3.13.0-debian-12-r4",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "prepare-apisix-dirs",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/usr/local/apisix",
                      "name": "empty-dir",
                      "subPath": "app-tmp-dir"
                    },
                    {
                      "mountPath": "/bitnami/apisix/rendered-conf",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/tmp",
                      "name": "empty-dir",
                      "subPath": "tmp-dir"
                    },
                    {
                      "mountPath": "/opt/bitnami/apisix/secrets",
                      "name": "apisix-secrets"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    }
                  ]
                }
              ],
              "securityContext": {
                "fsGroup": 1001,
                "fsGroupChangePolicy": "Always",
                "supplementalGroups": [],
                "sysctls": []
              },
              "serviceAccountName": "apisix-control-plane",
              "volumes": [
                {
                  "configMap": {
                    "name": "apisix-control-plane-default"
                  },
                  "name": "config"
                },
                {
                  "name": "apisix-secrets",
                  "projected": {
                    "sources": [
                      {
                        "secret": {
                          "name": "apisix-control-plane-api-token"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "certs",
                  "secret": {
                    "secretName": "apisix-control-plane-tls"
                  }
                },
                {
                  "emptyDir": {},
                  "name": "empty-dir"
                }
              ]
            }
          }
        }
      },
      "component": {
        "version": "apps/v1",
        "kind": "Deployment",
        "schema": ""
      }
    },
    {
      "id": "909c7b2d-9fc9-4ef4-bf9d-7400064a7b2e",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-data-plane",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/deployment-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/deployment-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/deployment-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "parent",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "data-plane",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "3.13.0",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-data-plane",
          "namespace": "default"
        },
        "spec": {
          "replicas": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "data-plane",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          },
          "strategy": {
            "type": "RollingUpdate"
          },
          "template": {
            "metadata": {
              "annotations": {
                "checksum/config": "8970a24266b9bc88505bb79ff25517c1395e2e0b57acf13834151c2ae1ded37f",
                "checksum/config-extra": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
                "checksum/secret": "8f07169dde57bd4d839926727fb18ccd9e58ff8c7b3a1687b2e417e05d4c644d"
              },
              "labels": {
                "app.kubernetes.io/component": "data-plane",
                "app.kubernetes.io/instance": "apisix",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "apisix",
                "app.kubernetes.io/part-of": "apisix",
                "app.kubernetes.io/version": "3.13.0",
                "helm.sh/chart": "apisix-6.0.0"
              }
            },
            "spec": {
              "affinity": {
                "nodeAffinity": null,
                "podAffinity": null,
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchLabels": {
                            "app.kubernetes.io/component": "data-plane",
                            "app.kubernetes.io/instance": "apisix",
                            "app.kubernetes.io/name": "apisix"
                          }
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 1
                    }
                  ]
                }
              },
              "automountServiceAccountToken": true,
              "containers": [
                {
                  "args": [
                    "#!/bin/bash\n# Clean up UDS file before starting APISIX\necho \"Checking for existing UDS file...\"\nUDS_FILE=\"/usr/local/apisix/logs/worker_events.sock\"\nif [ -e \"$UDS_FILE\" ]; then\n    echo \"Found existing UDS file: $UDS_FILE - removing it\"\n    rm -f \"$UDS_FILE\"\n    echo \"UDS file removed successfully\"\nelse\n    echo \"No existing UDS file found at: $UDS_FILE\"\nfi\n\n# Start OpenResty\nexec openresty -p /usr/local/apisix -g \"daemon off;\"\n"
                  ],
                  "command": [
                    "bash",
                    "-c"
                  ],
                  "env": null,
                  "envFrom": null,
                  "image": "docker.io/bitnami/apisix:3.13.0-debian-12-r4",
                  "imagePullPolicy": "IfNotPresent",
                  "livenessProbe": {
                    "failureThreshold": 5,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "tcpSocket": {
                      "port": "http-control"
                    },
                    "timeoutSeconds": 5
                  },
                  "name": "apisix",
                  "ports": [
                    {
                      "containerPort": 9080,
                      "name": "http"
                    },
                    {
                      "containerPort": 9443,
                      "name": "https"
                    },
                    {
                      "containerPort": 9090,
                      "name": "http-control"
                    }
                  ],
                  "readinessProbe": {
                    "failureThreshold": 5,
                    "httpGet": {
                      "path": "/v1/healthcheck",
                      "port": "http-control"
                    },
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "resources": {
                    "limits": {
                      "cpu": "150m",
                      "ephemeral-storage": "2Gi",
                      "memory": "192Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "ephemeral-storage": "50Mi",
                      "memory": "128Mi"
                    }
                  },
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/usr/local/apisix",
                      "name": "empty-dir",
                      "subPath": "app-tmp-dir"
                    },
                    {
                      "mountPath": "/tmp",
                      "name": "empty-dir",
                      "subPath": "tmp-dir"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    },
                    {
                      "mountPath": "/etc/ssl/certs/ca.crt",
                      "name": "control-plane-certs",
                      "subPath": "ca.crt"
                    }
                  ]
                }
              ],
              "dnsPolicy": "ClusterFirst",
              "initContainers": [
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\nretry_while() {\n  local -r cmd=\"${1:?cmd is missing}\"\n  local -r retries=\"${2:-12}\"\n  local -r sleep_time=\"${3:-5}\"\n  local return_value=1\n\n  read -r -a command \u003c\u003c\u003c \"$cmd\"\n  for ((i = 1 ; i \u003c= retries ; i+=1 )); do\n      \"${command[@]}\" \u0026\u0026 return_value=0 \u0026\u0026 break\n      sleep \"$sleep_time\"\n  done\n  return $return_value\n}\n\nhost=\"https://apisix-control-plane:9180\"\n\ncheck_control_plane() {\n    if curl --max-time 5 -k -I \"$host\"; then\n       return 0\n    else\n       return 1\n    fi\n}\n\necho \"Checking connection to $host\"\nif retry_while \"check_control_plane\"; then\n    echo \"Connected to $host\"\nelse\n    echo \"Error connecting to $host\"\n    exit 1\nfi\n\necho \"Connection success\"\nexit 0\n"
                  ],
                  "image": "docker.io/bitnami/os-shell:12-debian-12-r50",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "wait-for-control-plane",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  }
                },
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\n# Build final config.yaml with the sections of the different files\nexport APISIX_ADMIN_API_TOKEN=\"$(\u003c $APISIX_ADMIN_API_TOKEN_FILE)\"\nexport APISIX_VIEWER_API_TOKEN=\"$(\u003c $APISIX_VIEWER_API_TOKEN_FILE)\"\nfind /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' \u003e /bitnami/apisix/rendered-conf/pre-render-config.yaml\nrender-template /bitnami/apisix/rendered-conf/pre-render-config.yaml \u003e /bitnami/apisix/rendered-conf/config.yaml\nchmod 644 /bitnami/apisix/rendered-conf/config.yaml\nrm /bitnami/apisix/rendered-conf/pre-render-config.yaml\n"
                  ],
                  "env": [
                    {
                      "name": "BITNAMI_DEBUG",
                      "value": "false"
                    },
                    {
                      "name": "APISIX_ADMIN_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/admin-token"
                    },
                    {
                      "name": "APISIX_VIEWER_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/viewer-token"
                    }
                  ],
                  "envFrom": null,
                  "image": "docker.io/bitnami/os-shell:12-debian-12-r50",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "render-conf",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/bitnami/apisix/rendered-conf",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/bitnami/apisix/conf/00_default",
                      "name": "config"
                    },
                    {
                      "mountPath": "/opt/bitnami/apisix/secrets",
                      "name": "apisix-secrets"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    }
                  ]
                },
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\ncp -R /opt/bitnami/apisix/conf /usr/local/apisix\nln -sf /opt/bitnami/apisix/deps /usr/local/apisix\nln -sf /opt/bitnami/apisix/ui /usr/local/apisix\nln -sf /opt/bitnami/apisix/openresty/luajit/share/lua/*/apisix /usr/local/apisix\nmkdir -p /usr/local/apisix/logs\nexport APISIX_ADMIN_API_TOKEN=\"$(\u003c $APISIX_ADMIN_API_TOKEN_FILE)\"\nexport APISIX_VIEWER_API_TOKEN=\"$(\u003c $APISIX_VIEWER_API_TOKEN_FILE)\"\n# Build final config.yaml with the sections of the different files\ncp /bitnami/apisix/rendered-conf/config.yaml /usr/local/apisix/conf/\nchmod 644 /usr/local/apisix/conf/config.yaml\napisix init\n# The path is hardcoded in the conf so we need to copy them to the server folder\ncp /bitnami/certs/tls.crt /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.crt\ncp /bitnami/certs/tls.key /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.key\n"
                  ],
                  "env": [
                    {
                      "name": "BITNAMI_DEBUG",
                      "value": "false"
                    },
                    {
                      "name": "APISIX_ADMIN_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/admin-token"
                    },
                    {
                      "name": "APISIX_VIEWER_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/viewer-token"
                    }
                  ],
                  "envFrom": null,
                  "image": "docker.io/bitnami/apisix:3.13.0-debian-12-r4",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "prepare-apisix-dirs",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/usr/local/apisix",
                      "name": "empty-dir",
                      "subPath": "app-tmp-dir"
                    },
                    {
                      "mountPath": "/bitnami/apisix/rendered-conf",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/tmp",
                      "name": "empty-dir",
                      "subPath": "tmp-dir"
                    },
                    {
                      "mountPath": "/opt/bitnami/apisix/secrets",
                      "name": "apisix-secrets"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    }
                  ]
                }
              ],
              "securityContext": {
                "fsGroup": 1001,
                "fsGroupChangePolicy": "Always",
                "supplementalGroups": [],
                "sysctls": []
              },
              "serviceAccountName": "apisix-data-plane",
              "volumes": [
                {
                  "name": "apisix-secrets",
                  "projected": {
                    "sources": [
                      {
                        "secret": {
                          "name": "apisix-control-plane-api-token"
                        }
                      }
                    ]
                  }
                },
                {
                  "configMap": {
                    "name": "apisix-data-plane-default"
                  },
                  "name": "config"
                },
                {
                  "name": "certs",
                  "secret": {
                    "secretName": "apisix-data-plane-tls"
                  }
                },
                {
                  "emptyDir": {},
                  "name": "empty-dir"
                },
                {
                  "name": "control-plane-certs",
                  "secret": {
                    "secretName": "apisix-control-plane-tls"
                  }
                }
              ]
            }
          }
        }
      },
      "component": {
        "version": "apps/v1",
        "kind": "Deployment",
        "schema": ""
      }
    },
    {
      "id": "6488826e-5ed9-4ee8-b9f1-7a854cdb74ec",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-ingress-controller",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-image": "none",
        "background-opacity": 0.5,
        "border-width": 2,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/deployment-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/deployment-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/deployment-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "parent",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix-ingress-controller",
          "namespace": "default"
        },
        "spec": {
          "replicas": 1,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "ingress-controller",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "apisix",
              "app.kubernetes.io/part-of": "apisix"
            }
          },
          "strategy": {
            "type": "RollingUpdate"
          },
          "template": {
            "metadata": {
              "annotations": {
                "checksum/config": "0d52bdc68f52219d1ebef70710beaa16877978af191b72627bb052a554fa33c8",
                "checksum/config-extra": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
                "checksum/secret": "4be85b099828d888f3bea554b9490c62458ce096caa6c01715276e61fa21204e"
              },
              "labels": {
                "app.kubernetes.io/component": "ingress-controller",
                "app.kubernetes.io/instance": "apisix",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "apisix",
                "app.kubernetes.io/part-of": "apisix",
                "app.kubernetes.io/version": "1.8.4",
                "helm.sh/chart": "apisix-6.0.0"
              }
            },
            "spec": {
              "affinity": {
                "nodeAffinity": null,
                "podAffinity": null,
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchLabels": {
                            "app.kubernetes.io/component": "ingress-controller",
                            "app.kubernetes.io/instance": "apisix",
                            "app.kubernetes.io/name": "apisix"
                          }
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 1
                    }
                  ]
                }
              },
              "automountServiceAccountToken": true,
              "containers": [
                {
                  "args": [
                    "ingress",
                    "--config-path",
                    "/bitnami/apisix-ingress-controller/conf/config.yaml"
                  ],
                  "env": null,
                  "envFrom": null,
                  "image": "docker.io/bitnami/apisix-ingress-controller:1.8.4-debian-12-r14",
                  "imagePullPolicy": "IfNotPresent",
                  "livenessProbe": {
                    "failureThreshold": 5,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "tcpSocket": {
                      "port": "http"
                    },
                    "timeoutSeconds": 5
                  },
                  "name": "apisix-ingress-controller",
                  "ports": [
                    {
                      "containerPort": 8080,
                      "name": "http"
                    },
                    {
                      "containerPort": 8443,
                      "name": "https"
                    }
                  ],
                  "readinessProbe": {
                    "failureThreshold": 5,
                    "httpGet": {
                      "path": "/healthz",
                      "port": "http"
                    },
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "resources": {
                    "limits": {
                      "cpu": "150m",
                      "ephemeral-storage": "2Gi",
                      "memory": "192Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "ephemeral-storage": "50Mi",
                      "memory": "128Mi"
                    }
                  },
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/bitnami/apisix-ingress-controller/conf",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/tmp",
                      "name": "empty-dir",
                      "subPath": "tmp-dir"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    },
                    {
                      "mountPath": "/etc/ssl/certs/ca.crt",
                      "name": "control-plane-certs",
                      "subPath": "ca.crt"
                    }
                  ]
                }
              ],
              "initContainers": [
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\nretry_while() {\n  local -r cmd=\"${1:?cmd is missing}\"\n  local -r retries=\"${2:-12}\"\n  local -r sleep_time=\"${3:-5}\"\n  local return_value=1\n\n  read -r -a command \u003c\u003c\u003c \"$cmd\"\n  for ((i = 1 ; i \u003c= retries ; i+=1 )); do\n      \"${command[@]}\" \u0026\u0026 return_value=0 \u0026\u0026 break\n      sleep \"$sleep_time\"\n  done\n  return $return_value\n}\n\nhost=\"https://apisix-control-plane:9180\"\n\ncheck_control_plane() {\n    if curl --max-time 5 -k -I \"$host\"; then\n       return 0\n    else\n       return 1\n    fi\n}\n\necho \"Checking connection to $host\"\nif retry_while \"check_control_plane\"; then\n    echo \"Connected to $host\"\nelse\n    echo \"Error connecting to $host\"\n    exit 1\nfi\n\necho \"Connection success\"\nexit 0\n"
                  ],
                  "image": "docker.io/bitnami/os-shell:12-debian-12-r50",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "wait-for-control-plane",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  }
                },
                {
                  "command": [
                    "bash",
                    "-ec",
                    "#!/bin/bash\n# Build final config.yaml with the sections of the different files\nexport APISIX_ADMIN_API_TOKEN=\"$(\u003c $APISIX_ADMIN_API_TOKEN_FILE)\"\nexport APISIX_VIEWER_API_TOKEN=\"$(\u003c $APISIX_VIEWER_API_TOKEN_FILE)\"\nfind /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' \u003e /bitnami/apisix/rendered-conf/pre-render-config.yaml\nrender-template /bitnami/apisix/rendered-conf/pre-render-config.yaml \u003e /bitnami/apisix/rendered-conf/config.yaml\nchmod 644 /bitnami/apisix/rendered-conf/config.yaml\nrm /bitnami/apisix/rendered-conf/pre-render-config.yaml\n"
                  ],
                  "env": [
                    {
                      "name": "BITNAMI_DEBUG",
                      "value": "false"
                    },
                    {
                      "name": "APISIX_ADMIN_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/admin-token"
                    },
                    {
                      "name": "APISIX_VIEWER_API_TOKEN_FILE",
                      "value": "/opt/bitnami/apisix/secrets/viewer-token"
                    }
                  ],
                  "envFrom": null,
                  "image": "docker.io/bitnami/os-shell:12-debian-12-r50",
                  "imagePullPolicy": "IfNotPresent",
                  "name": "render-conf",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/bitnami/apisix/rendered-conf",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/bitnami/apisix/conf/00_default",
                      "name": "config"
                    },
                    {
                      "mountPath": "/opt/bitnami/apisix/secrets",
                      "name": "apisix-secrets"
                    },
                    {
                      "mountPath": "/bitnami/certs",
                      "name": "certs"
                    }
                  ]
                }
              ],
              "securityContext": {
                "fsGroup": 1001,
                "fsGroupChangePolicy": "Always",
                "supplementalGroups": [],
                "sysctls": []
              },
              "serviceAccountName": "apisix-ingress-controller",
              "volumes": [
                {
                  "configMap": {
                    "name": "apisix-ingress-controller-default"
                  },
                  "name": "config"
                },
                {
                  "name": "apisix-secrets",
                  "projected": {
                    "sources": [
                      {
                        "secret": {
                          "name": "apisix-control-plane-api-token"
                        }
                      }
                    ]
                  }
                },
                {
                  "emptyDir": {},
                  "name": "empty-dir"
                },
                {
                  "name": "certs",
                  "secret": {
                    "secretName": "apisix-ingress-controller-tls"
                  }
                },
                {
                  "name": "control-plane-certs",
                  "secret": {
                    "secretName": "apisix-control-plane-tls"
                  }
                }
              ]
            }
          }
        }
      },
      "component": {
        "version": "apps/v1",
        "kind": "Deployment",
        "schema": ""
      }
    },
    {
      "id": "2dc33e1d-97ad-4662-b853-122f1ba9266c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix-etcd",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "background-opacity": 0.2,
        "height": 15,
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "round-rectangle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/statefulset-color.svg",
        "svgComplete": "ui/public/static/img/meshmodels/kubernetes/complete/statefulset-complete.svg",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/statefulset-white.svg",
        "width": 15,
        "x": 12,
        "y": 20
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "parent",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": true,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "etcd",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "etcd",
            "app.kubernetes.io/version": "3.6.4",
            "helm.sh/chart": "etcd-12.0.18"
          },
          "name": "apisix-etcd",
          "namespace": "default"
        },
        "spec": {
          "podManagementPolicy": "Parallel",
          "replicas": 3,
          "selector": {
            "matchLabels": {
              "app.kubernetes.io/component": "etcd",
              "app.kubernetes.io/instance": "apisix",
              "app.kubernetes.io/name": "etcd"
            }
          },
          "serviceName": "apisix-etcd-headless",
          "template": {
            "metadata": {
              "annotations": {
                "checksum/token-secret": "edf81c3249339ff74152e718f0ea9fcb01b9d1f4f6363636746d7fe0c591e271"
              },
              "labels": {
                "app.kubernetes.io/component": "etcd",
                "app.kubernetes.io/instance": "apisix",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "etcd",
                "app.kubernetes.io/version": "3.6.4",
                "helm.sh/chart": "etcd-12.0.18"
              }
            },
            "spec": {
              "affinity": {
                "nodeAffinity": null,
                "podAffinity": null,
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchLabels": {
                            "app.kubernetes.io/component": "etcd",
                            "app.kubernetes.io/instance": "apisix",
                            "app.kubernetes.io/name": "etcd"
                          }
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 1
                    }
                  ]
                }
              },
              "automountServiceAccountToken": false,
              "containers": [
                {
                  "env": [
                    {
                      "name": "BITNAMI_DEBUG",
                      "value": "false"
                    },
                    {
                      "name": "MY_POD_IP",
                      "valueFrom": {
                        "fieldRef": {
                          "fieldPath": "status.podIP"
                        }
                      }
                    },
                    {
                      "name": "MY_POD_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "MY_STS_NAME",
                      "value": "apisix-etcd"
                    },
                    {
                      "name": "ETCD_ON_K8S",
                      "value": "yes"
                    },
                    {
                      "name": "ETCD_START_FROM_SNAPSHOT",
                      "value": "no"
                    },
                    {
                      "name": "ETCD_DISASTER_RECOVERY",
                      "value": "no"
                    },
                    {
                      "name": "ETCD_NAME",
                      "value": "$(MY_POD_NAME)"
                    },
                    {
                      "name": "ETCD_DATA_DIR",
                      "value": "/bitnami/etcd/data"
                    },
                    {
                      "name": "ETCD_LOG_LEVEL",
                      "value": "info"
                    },
                    {
                      "name": "ALLOW_NONE_AUTHENTICATION",
                      "value": "yes"
                    },
                    {
                      "name": "ETCD_AUTH_TOKEN",
                      "value": "jwt,priv-key=/opt/bitnami/etcd/certs/token/jwt-token.pem,sign-method=RS256,ttl=10m"
                    },
                    {
                      "name": "ETCD_ADVERTISE_CLIENT_URLS",
                      "value": "http://$(MY_POD_NAME).apisix-etcd-headless.default.svc.cluster.local:2379,http://apisix-etcd.default.svc.cluster.local:2379"
                    },
                    {
                      "name": "ETCD_LISTEN_CLIENT_URLS",
                      "value": "http://0.0.0.0:2379"
                    },
                    {
                      "name": "ETCD_INITIAL_ADVERTISE_PEER_URLS",
                      "value": "http://$(MY_POD_NAME).apisix-etcd-headless.default.svc.cluster.local:2380"
                    },
                    {
                      "name": "ETCD_LISTEN_PEER_URLS",
                      "value": "http://0.0.0.0:2380"
                    },
                    {
                      "name": "ETCD_INITIAL_CLUSTER_TOKEN",
                      "value": "etcd-cluster-k8s"
                    },
                    {
                      "name": "ETCD_INITIAL_CLUSTER",
                      "value": "apisix-etcd-0=http://apisix-etcd-0.apisix-etcd-headless.default.svc.cluster.local:2380,apisix-etcd-1=http://apisix-etcd-1.apisix-etcd-headless.default.svc.cluster.local:2380,apisix-etcd-2=http://apisix-etcd-2.apisix-etcd-headless.default.svc.cluster.local:2380"
                    },
                    {
                      "name": "ETCD_CLUSTER_DOMAIN",
                      "value": "apisix-etcd-headless.default.svc.cluster.local"
                    }
                  ],
                  "envFrom": null,
                  "image": "docker.io/bitnami/etcd:3.6.4-debian-12-r3",
                  "imagePullPolicy": "IfNotPresent",
                  "livenessProbe": {
                    "failureThreshold": 5,
                    "httpGet": {
                      "path": "/livez",
                      "port": 2379,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 60,
                    "periodSeconds": 30,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "name": "etcd",
                  "ports": [
                    {
                      "containerPort": 2379,
                      "name": "client",
                      "protocol": "TCP"
                    },
                    {
                      "containerPort": 2380,
                      "name": "peer",
                      "protocol": "TCP"
                    }
                  ],
                  "readinessProbe": {
                    "exec": {
                      "command": [
                        "/opt/bitnami/scripts/etcd/healthcheck.sh"
                      ]
                    },
                    "failureThreshold": 5,
                    "initialDelaySeconds": 60,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "resources": {
                    "limits": {
                      "cpu": "375m",
                      "ephemeral-storage": "2Gi",
                      "memory": "384Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "ephemeral-storage": "50Mi",
                      "memory": "256Mi"
                    }
                  },
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/opt/bitnami/etcd/conf/",
                      "name": "empty-dir",
                      "subPath": "app-conf-dir"
                    },
                    {
                      "mountPath": "/tmp",
                      "name": "empty-dir",
                      "subPath": "tmp-dir"
                    },
                    {
                      "mountPath": "/bitnami/etcd",
                      "name": "data"
                    },
                    {
                      "mountPath": "/opt/bitnami/etcd/certs/token/",
                      "name": "etcd-jwt-token",
                      "readOnly": true
                    }
                  ]
                }
              ],
              "securityContext": {
                "fsGroup": 1001,
                "fsGroupChangePolicy": "Always",
                "supplementalGroups": [],
                "sysctls": []
              },
              "serviceAccountName": "apisix-etcd",
              "volumes": [
                {
                  "emptyDir": {},
                  "name": "empty-dir"
                },
                {
                  "name": "etcd-jwt-token",
                  "secret": {
                    "defaultMode": 256,
                    "secretName": "apisix-etcd-jwt-token"
                  }
                }
              ]
            }
          },
          "updateStrategy": {
            "type": "RollingUpdate"
          },
          "volumeClaimTemplates": [
            {
              "metadata": {
                "name": "data"
              },
              "spec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "8Gi"
                  }
                }
              }
            }
          ]
        }
      },
      "component": {
        "version": "apps/v1",
        "kind": "StatefulSet",
        "schema": ""
      }
    },
    {
      "id": "e26c7d94-d3cd-41ee-bbb2-5e1813ff3c6c",
      "schemaVersion": "components.meshery.io/v1beta1",
      "version": "v1.0.0",
      "displayName": "apisix",
      "description": "",
      "format": "",
      "model": {
        "id": "b3f5bc0d-30f7-607d-6c73-784ddde6cad8",
        "schemaVersion": "models.meshery.io/v1beta1",
        "version": "v1.0.0",
        "name": "kubernetes",
        "displayName": "Kubernetes",
        "status": "enabled",
        "registrant": {
          "id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
          "name": "Github",
          "credential_id": "00000000-0000-0000-0000-000000000000",
          "type": "registry",
          "sub_type": "",
          "kind": "github",
          "status": "registered",
          "user_id": "00000000-0000-0000-0000-000000000000",
          "created_at": "2025-09-17T17:32:17.981302672Z",
          "updated_at": "2025-09-17T17:32:17.981302672Z",
          "deleted_at": "0001-01-01T00:00:00Z",
          "schemaVersion": ""
        },
        "connection_id": "5bc80e3c-5d43-9eb4-d16c-78a2769247a6",
        "category": {
          "id": "9ca27d0d-66ce-42a9-8c85-6236563f2ddb",
          "name": "Orchestration \u0026 Management"
        },
        "subCategory": "Scheduling \u0026 Orchestration",
        "metadata": {
          "isAnnotation": false,
          "primaryColor": "#326CE5",
          "secondaryColor": "#7aa1f0",
          "shape": "circle",
          "styleOverrides": "",
          "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/kubernetes-color.svg",
          "svgComplete": "",
          "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/kubernetes-white.svg"
        },
        "model": {
          "version": "v1.32.0-alpha.3"
        },
        "components_count": 0,
        "relationships_count": 0,
        "components": null,
        "relationships": null
      },
      "styles": {
        "primaryColor": "#326CE5",
        "secondaryColor": "#7aa1f0",
        "shape": "circle",
        "svgColor": "ui/public/static/img/meshmodels/kubernetes/color/ingressclass-color.svg",
        "svgComplete": "",
        "svgWhite": "ui/public/static/img/meshmodels/kubernetes/white/ingressclass-white.svg"
      },
      "capabilities": [],
      "status": "enabled",
      "metadata": {
        "configurationUISchema": "",
        "genealogy": "",
        "instanceDetails": null,
        "isAnnotation": false,
        "isNamespaced": false,
        "published": false,
        "source_uri": "git://github.com/kubernetes/kubernetes/master/api/openapi-spec/v3"
      },
      "configuration": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "ingress-controller",
            "app.kubernetes.io/instance": "apisix",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "apisix",
            "app.kubernetes.io/part-of": "apisix",
            "app.kubernetes.io/version": "1.8.4",
            "helm.sh/chart": "apisix-6.0.0"
          },
          "name": "apisix"
        },
        "spec": {
          "controller": "apisix.apache.org/apisix-ingress"
        }
      },
      "component": {
        "version": "networking.k8s.io/v1",
        "kind": "IngressClass",
        "schema": ""
      }
    }
  ],
  "relationships": null
}