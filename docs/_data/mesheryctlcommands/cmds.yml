global:
  name: mesheryctl
  description : A global command that displays an overview of all commands.
  usage:
    mesheryctl
  example: |
    mesheryctl
      mesheryctl --help
      mesheryctl version

  flags:
    config:
      name: --config
      description: configures Meshery with the meshconfig, generated with the help of user details to provide cluster access for public clouds(GKE/EKS).
      usage:
          mesheryctl [command] --config=[path to config file]
      example:
          mesheryctl system reset --config="~/.meshery/config.yaml"
    help:
      name: --help, -h
      description: Displays helpful information about any command.
      usage:
          mesheryctl --help
      example: |
          mesheryctl perf --help
            meshery system start --help
    verbose:
      name: --verbose, -v
      description: Sets the log level to debug for verbose output and displays verboose/debug logs.
      usage:
          mesheryctl [commands] --verbose
      example: |
          mesheryctl system update --verbose

  subcommands:
    version:
      name: version
      description: Displays the version of the Meshery Client (mesheryctl) and the SHA of the release binary.
      usage:
          mesheryctl version

    completion:
      name: completion
      description: Output shell completion code for the specified shell.
      usage:
          mesheryctl completion [bash|zsh|fish]
      example: |
          mesheryctl completion bash
            mesheryctl completion zsh
            mesheryctl completion fish

system:
  name: system
  description: Lifecycle management of Meshery deployments
  usage:
    mesheryctl system [flags]

  flags:
    context:
      name: --context, -c
      arg: system
      description: Temporarily override your current context by specifying an alternative context as an argument.
      usage:
        mesheryctl system reset -c [temporary context name]
      example: |

        # Resets the given context
        mesheryctl system reset -c docker-edge


  subcommands:
    start:
      name: start
      arg: system
      description: Start Meshery
      usage:
        mesheryctl system start
      notes:
        name: Set k8s context
        description: To create a new context for in-cluster Kubernetes deployments and set the new context as your current-context
        usage:
          mesheryctl system context create k8s -p kubernetes -s
      flags:
        skip-update:
          name: --skip-update
          description: (optional) skip checking for new updates available in Meshery.
          usage:
            mesheryctl system start --skip-update
        reset:
          name: --reset
          description: Reset Meshery’s configuration file to default settings.
          usage:
              mesheryctl system start --reset
        silent:
          name: --silent
          description: Silently create Meshery's configuration file with default settings.
          usage:
            mesheryctl system start --silent

    stop:
      name: stop
      arg: system
      description: Stop Meshery
      usage:
        mesheryctl system stop
      flags:
        reset:
          name: --reset
          description: Reset Meshery’s configuration file to default settings.
          usage:
              mesheryctl system stop --reset

    update:
      name: update
      description: Pull new Meshery images from Docker Hub. Does not update `mesheryctl`. This command may be executed while Meshery is running.
      usage:
          mesheryctl system update
      flags:
        skip-reset:
          name: --skip-reset
          description: Pull the latest manifest files
          usage:
              mesheryctl system update --skip-reset

    config:
      name: config
      description: Configures Meshery to use a Kubernetes cluster.
      usage:
          mesheryctl system config [minikube | gke | aks | eks] [flags]
      example: |
          mesheryctl system config minikube
            mesheryctl system config eks
      flags:
        token:
          name: --token
          description: Path to token for authenticating to Meshery API.
          usage:
            mesheryctl system config --token [path-to-file]
          example:
            mesheryctl system config --token "~/Downloads/auth.json"
      examples:
        aks:
          name: aks
          description: To configure Meshery to use Azure Kubernetes Service
          usage:
              mesheryctl system config aks --token [path-to-token]
        eks:
          name: eks
          description: To configure Meshery to use Elastic Kubernetes Service
          usage:
              mesheryctl system config eks --token [path-to-token]
        gke:
          name: gke
          description: To configure Meshery to use Google Kubernetes Engine
          usage:
              mesheryctl system config gke --token [path-to-token]

    logs:
      name: logs
      description: Starts tailing Meshery server debug logs
      usage: |

          # View logs for specific component
          mesheryctl system logs [component-name]

      example: |
          mesheryctl system logs --verbose
            mesheryctl system logs meshery-istio
    reset:
      name: reset
      description: Resets meshery.yaml file with a copy from Meshery repo
      usage:
          mesheryctl system reset

    restart:
      name: restart
      description: restart all Meshery containers, their instances and their connected volumes
      usage:
          mesheryctl system restart
      flags:
        skip-update:
          name: --skip-update
          description: (optional) skip checking for new updates available in Meshery.
          usage:
              mesheryctl system restart --skip-update

    status:
      name: status
      description: Check status of Meshery, Meshery adapters, Meshery Operator and its controllers.
      usage:
          mesheryctl system status
    
    dashboard:
      name: dashboard
      description: Open Meshery UI in browser.

    login:
      name: login
      description: "Authenticate with the Meshery Provider of your choice: the Local Provider or a Remote Provider."
      usage:
        mesheryctl system login

    logout:
      name: logout
      description: Invalidate current session with your Meshery Provider.
      usage:
        mesheryctl system logout

    check:
      name: check
      description: Run system checks for both pre and post mesh deployment scenarios on Meshery
      usage:
        mesheryctl system check [flags]
      example:
        mesheryctl system check
      flags:
        preflight:
          name: --preflight
          description: Run Pre-mesh deployment checks (Docker and Kubernetes)
          usage:
            mesheryctl system check --preflight
          example:
            mesheryctl system check --preflight
        adapter:
          name: --adapter
          description: Run checks on specific mesh adapter
          usage:
            mesheryctl system check --adapter [adapter-name]
          example:
            mesheryctl system check --adapter meshery-istio:10000
        operator:
          name: --operator
          description: Verify the health of Meshery Operator's deployment with MeshSync and Broker
          usage:
            mesheryctl system check --operator
          example:
            mesheryctl system check --operator
        report:
          name: --report
          description: Runs diagnostic checks and bundles up to open an issue if present
          usage:
            mesheryctl system check --report
          example:
            mesheryctl system check --report

system-channel:
  name: system-channel
  description: Switch between release channels.
  usage:
    mesheryctl system channel

  subcommands:
    set:
      name: set
      description: Subscribe to release channel and version.
      usage:
          mesheryctl system channel set [stable|stable-version|edge|edge-version]
      example: |
          mesheryctl system channel set stable
            mesheryctl system channel set edge
            mesheryctl system channel set v0.5.60
    switch:
      name: switch
      description: switch release channel and version
      usage:
          mesheryctl system channel switch [stable|stable-version|edge|edge-version]
      example: |
          mesheryctl system channel switch stable
            mesheryctl system channel switch edge
            mesheryctl system channel switch v0.5.60
    view:
      name: view
      description: view release channel and version
      usage:
          mesheryctl system channel view
      flags:
        all:
          name: --all, -a
          description: view release channel and version
          usage:
              mesheryctl system channel view --all

system-context:
  name: system-context
  description: Display the current context.
  usage:
      mesheryctl system context

  subcommands:
    create:
      name: create
      description: create a new context in config.yaml file
      usage:
          mesheryctl system context create [context name]
      example: |
          mesheryctl system context create k8s-sample
            mesheryctl system context create docker-edge
      flags:
        adapters:
          name: --adapters
          description: create a new context in config.yaml file- specify the list of adapters to be added
          usage:
              mesheryctl system context create [context name] --adapters [list of adapters]
          example:
              mesheryctl system context create k8s-sample --adapters "meshery-osm:10010", "meshery-istio:10000"
        set:
          name: --set, -s
          description: create a new context in config.yaml file- set as current context
          usage:
              mesheryctl system context create [context name] --set
          example:
              mesheryctl system context create k8s-sample --set
        url:
          name: --url, -u
          description: create a new context in config.yaml file- set Meshery server URL. Defaults to "https://localhost:9081"
          usage:
              mesheryctl system context create [context name] --url [URL]
          example:
              mesheryctl system context create k8s-sample --url "https://localhost:9990"

    delete:
      name: delete
      description: delete an existing context from Meshery config file
      usage:
          mesheryctl system context delete [context name]
      example: |
          mesheryctl system context delete k8s-sample
            mesheryctl system context delete docker-edge
    switch:
      name: switch
      description: configure mesheryctl to actively use one one context vs. the another context
      usage:
          mesheryctl system context switch [context name]
      example: |
          mesheryctl system context switch k8s-sample
            mesheryctl system context switch docker-edge
    view:
      name: view
      description: view the configurations of the current context
      usage:
          mesheryctl system context view
      flags:
        context:
          name: --context
          description: view the configurations of the specified context
          usage:
              mesheryctl system context view --context [context name]
          example:
              mesheryctl system context view --context docker-edge
        all:
          name: --all
          description: if set, shows the configurations of all the contexts
          usage:
              mesheryctl system context view --all

perf:
  name: perf
  description: Performance Management and Benchmarking using Meshery CLI
  usage:
    mesheryctl perf --name "a quick stress test" --url http://192.168.1.15/productpage --qps 300 --concurrent-requests 2 --duration 30s --token "provider=Meshery"

  flags:
    output-format:
      name: --output-format, -o
      description: format to display in json or yaml.
      usage:
          mesheryctl perf --token [path to access token] --output-format [format]
      example:
          mesheryctl perf --token "~/Downloads/auth.json" --output-format json
            mesheryctl perf --token "~/Downloads/auth.json" --output-format json
    token:
      name: --token
      description: (required) Path to Meshery user's access token.
      usage:
          mesheryctl perf --token [path to access token]
      example:
          mesheryctl perf --token "~/Downloads/auth.json"

  subcommands:
    apply:
      name: apply
      description: Runs Performance test using existing profiles or using flags.
      usage: |

          # Execute a Performance test with the specified performance profile
          mesheryctl perf apply [profile-name] --flags

          # Execute a Performance test without a specified performance profile
          mesheryctl perf apply [profile-name] --url [url]

          # Run Performance test using SMP compatible test configuration
          mesheryctl perf apply -f [filepath]
      example:
          mesheryctl perf apply test-sam --url https://192.168.1.15/productpage
      flags:
        concurrent-requests:
          name: --concurrent-requests
          arg: apply
          description: 'Number of Parallel Requests (default: 1).'
          usage:
              mesheryctl perf apply [profile-name] --url [URL] --concurrent-requests [number of requests]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --concurrent-requests 3
        duration:
          name: --duration
          arg: apply
          description: Length of the test.
          usage:
              mesheryctl perf apply [profile-name] --url [URL] --duration [time]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --duration 35s

        file:
          name: --file
          arg: apply
          description: 'Path to service mesh performance test configuration file (default: empty string).'
          usage:
              mesheryctl perf apply [profile-name] --url [URL] --file [path to file]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --file perf-config.yaml
        load-generator:
          name: --load-generator
          arg: apply
          description: 'Choice of load generator - fortio (OR) wrk2 (default: fortio).'
          usage:
              mesheryctl perf apply [profile-name] --url [URL] --load-generator [fortio/wrk2]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --load-generator wrk2

        mesh:
          name: --mesh
          arg: apply
          description: Name of the service mesh.
          usage:
              mesheryctl perf apply [profile-name] --url [URL] --mesh [name]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --mesh istio
        name:
          name: --name
          arg: apply
          description: 'A memorable name for the test (default: random string).'
          usage:
            mesheryctl perf apply [profile-name] --url [URL] --name "name"
          example:
            mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --name "local-test"
        qps:
          name: --qps
          arg: apply
          description: 'Queries per second (default: 0) (0 - means to use the CPU unbounded to generate as many requests as possible).'
          usage:
              mesheryctl perf apply [profile-name] --url [URL] --qps [queries]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage --qps 30
        url:
          name: --url
          arg: apply
          description: (required/optional) URL of the endpoint send load to during testing.
          usage:
              mesheryctl perf apply [profile-name] --url [URL]
          example:
              mesheryctl perf apply local-perf --url https://192.168.1.15/productpage
    profile:
      name: profile
      description: List the available performance profiles.
      usage: |

            # View performance profiles
            mesheryctl perf profile [profile-id] [flags]
      example: |
        # List performance profiles
          mesheryctl perf profile

          # Search for performance profiles
          mesheryctl perf profile soak-test

          # View detailed information about a performance profile
          mesheryctl perf profile --view
      flags:
        page:
          name: --page
          description: '(optional) List next set of performance profiles with --page (default = 1) (default 1).'
          usage:
            mesheryctl perf profile --page [page number]
          example:
            mesheryctl perf profile --page 2
        view:
          name: --view
          description: '(optional) View more information of the performance profile.'
          usage:
            mesheryctl perf profile --view
          example:
            mesheryctl perf profile --view

    result:
      name: result
      description: View the results of a performance profile.
      usage: |

          # View results of a performance profile
          mesheryctl perf result [profile-name] [flags]
      example: |
        # List test results of a performance profile
          mesheryctl perf result soak-test

          # View detailed information of a performance test result
          mesheryctl perf result soak-test --view
      flags:
        page:
          name: --page
          description: '(optional) List next set of performance results with --page (default = 1) (default 1).'
          usage:
            mesheryctl perf result --page [page number]
          example:
            mesheryctl perf result --page 2
        view:
          name: --view
          description: '(optional) View more information of the performance test results.'
          usage:
            mesheryctl perf result --view
          example:
            mesheryctl perf result --view

mesh:
  name: mesh
  description: Lifecycle management of service meshes

  subcommands:
    validate:
      name: validate
      description: validate service mesh conformance to different standard specifications
      flags:
        adapter:
          name: --adapter, -a
          description: (required) adapter to use for validation. Defaults to "meshery-osm:10010"
          usage:
              mesheryctl mesh validate --adapter [name of the adapter]
          example:
              mesheryctl mesh validate --adapter meshery-istio:10000 -t "~/Download/auth.json"
        namespace:
          name: --namespace, -n
          description: Kubernetes namespace to be used for deploying the validation tests and sample workload
          usage:
              mesheryctl mesh validate --namespace [namespace to be used]
          example:
              mesheryctl mesh validate --namespace test-x1 -t "~/Download/auth.json"
        spec:
          name: --spec, -s
          description: (required) specification to be used for conformance test. Defaults to "smi"
          usage:
              mesheryctl mesh validate --spec [specification to be used for conformance test]
          example:
              mesheryctl mesh validate --spec smi -t "~/Download/auth.json"
        tokenpath:
          name: --tokenpath, -t
          description: (required) path to token for authenticating to Meshery API
          usage:
              mesheryctl mesh validate --tokenPath [path to token for authentication]
          example:
              mesheryctl mesh validate --tokenPath "~/Downloads/auth.json"

    deploy:
      name: deploy
      description: Deploy a service mesh into the cluster
      usage:
          mesheryctl mesh deploy [flags]
      example:
          mesheryctl mesh deploy -t "~/Downloads/auth.json"
      flags:
        adapter:
          name: --adapter, -a
          description: (required) adapter to use for validation. Defaults to "meshery-osm:10010"
          usage:
              mesheryctl mesh deploy --adapter [name of the adapter]
          example:
              mesheryctl mesh deploy --adapter meshery-istio:10000
        namespace:
          name: --namespace, -n
          description: Kubernetes namespace to be used for deploying the validation tests and sample workload
          usage:
              mesheryctl mesh deploy --namespace [namespace to be used]
          example: |
              mesheryctl mesh deploy --namespace docker-desktop
                mesheryctl mesh deploy --namespace minikube
        token:
          name: --tokenpath, -t
          description: (required) path to token for authenticating to Meshery API
          usage:
              mesheryctl mesh deploy --tokenPath [path to token for authentication]
          example:
              mesheryctl mesh deploy --tokenPath "~/Downloads/auth.json"

pattern:
  name: pattern
  description :
  usage:
    mesheryctl pattern

  flags:
    file:
      name: --file, -f
      description: (required) path to pattern file.
      usage: |
        mesheryctl pattern apply --file [pattern path]
        mesheryctl pattern delete --file [pattern path]
      example: |
        mesheryctl pattern apply --file "bookInfo.yaml"
          mesheryctl pattern delete --file "bookInfo.yaml"

  subcommands:
    apply:
      name: apply
      description: apply pattern file will trigger deploy of the pattern file
      usage:
          mesheryctl pattern apply [flags]
      flags:
        file:
          name: --file, -f
          description: apply pattern file will trigger deploy of the pattern file and also supports file retrieval from GitHub
          usage:
              mesheryctl pattern apply --file [path to pattern file]
          example:
              mesheryctl pattern apply -f "bookInfo.yaml"


    delete:
      name: delete
      description: Deprovision the resources/ service mesh using the pattern file
      usage:
          mesheryctl pattern delete [flags]
      flags:
        file:
          name: --file, -f
          description: Deletes the resources that were created, using pattern file
          usage:
              mesheryctl pattern delete -f [path to pattern file]
          example:
              mesheryctl pattern delete -f "bookInfo.yaml"

    list:
      name: list
      description: displays a list of available pattern files
      usage:
          mesheryctl pattern list
      flags:
        all:
          name: --all, -a
          description: show all pattern file metadata
          usage:
              mesheryctl pattern list --all

    view:
      name: view
      description: displays the contents of a specific pattern file
      usage:
          mesheryctl pattern view [pattern-name|pattern-id]
      flags:
        all:
          name: --all, -a
          description: show all pattern file content
          usage:
              mesheryctl pattern view [pattern-name|pattern-id] --all
          example:
              mesheryctl pattern view bookInfo --all
        json:
          name: -o json
          description: display the content of a pattern in json format
          usage:
              mesheryctl pattern view [pattern-name|pattern-id] -o json
          example:
              mesheryctl pattern view bookInfo -o json

app:
  name: app
  description: Service Mesh application management
  usage:
    mesheryctl app
  flags:
    file:
      name: --file, -f
      description: (required) path to pattern file
      usage:
        mesheryctl app --file [path to pattern file]
      example:
        mesheryctl app --file "bookInfo.yaml"
  subcommands:
    list:
      name: list
      description: displays a list of available applications
      usage:
          mesheryctl app list
    offboard:
      name: offboard
      description: offboard application
      usage:
          mesheryctl app offboard [app name] [flags]
      flags:
        file:
          name: --file, -f
          description: Offboard application with an application file
          usage:
              mesheryctl app offboard -f [filepath]
          example:
              mesheryctl app offboard -f "bookInfo.yaml"
    onboard:
      name: onboard
      description: onboard application
      usage:
          mesheryctl app onboard [app name] [flags]
      flags:
        file:
          name: --file, -f
          description: onboard application with application file
          usage:
              mesheryctl app onboard --file [filepath]
          example:
              mesheryctl app onboard -f "bookInfo.yaml"
    view:
      name: view
      description: displays the contents of a application
      usage: |
          mesheryctl app view [application-name|application-id]
      flags:
        view-all:
          name: --all, -a
          description: show all application file content
          usage:
              mesheryctl app view --all
          example:
              mesheryctl app view --all
        view-json:
          name: -o json
          description: display the content of an application in json format
          usage: |
              mesheryctl app view [application-name|application-id] -o json
          example:
              mesheryctl app view bookInfo -o json

filter:
  name: filter
  description: Service Mesh Filter Management (experimental feature)
  flags:
    file:
      name: --file, -f
      description: (required) path to WASM file [GitHub links only supported]

  subcommands:
    apply:
      name: apply
      description: Apply WASM file to deploy a filter

    delete:
      name: delete
      description: Delete filter from Meshery

    list:
      name: list
      description: List all WASM filters

    view:
      name: view
      description: View the specified WASM filter
