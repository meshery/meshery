name: Trivy Container Image Scan

on:
  workflow_dispatch:

permissions:
  issues: write

jobs:
  scan:
    name: Scan Container Image
    runs-on: ubuntu-latest

    steps:
      - name: Pull latest Meshery image
        run: |
          docker pull layer5/meshery:stable-latest

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'layer5/meshery:stable-latest'
          format: 'json'
          output: 'trivy-scan-results.json'

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-scan-results.json

      - name: Parse Trivy Results
        id: parse_trivy
        run: |
          vuln_count=$(jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] 
            | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length' trivy-scan-results.json)

          echo "Found $vuln_count critical/high vulnerabilities" > issue_body.txt
          echo '```json' >> issue_body.txt
          jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] 
            | select(.Severity == "CRITICAL" or .Severity == "HIGH")][0:5]' trivy-scan-results.json >> issue_body.txt
          echo '```' >> issue_body.txt
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue
        if: steps.parse_trivy.outputs.vuln_count != '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "Trivy Scan: CRITICAL/HIGH Vulnerabilities Found - $(date +'%Y-%m-%d %H:%M:%S')" \
            --body-file issue_body.txt \
