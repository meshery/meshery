
name: Meshery End-to-End Tests with mesheryctl
on:
  workflow_dispatch:
    inputs:
      profile_name:
        description: "performance profile to use"
        required: true
      profile_filename:
        description: "test configuration file"
        required: false
      patternfile_url:
        description: "URL of the pattern file"
        required: false
      patternfile_name:
        description: "name of the pattern file"
        required: false
  # scheduled to run at the 43rd minute of every 12th hour
  schedule:
    - cron: '43 */12 * * *'

jobs:
  manual-test:
    name: Manual e2e Test
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        k8s_version: ['v1.29.2', 'v1.28.7', 'v1.27.11']
        platform: ['docker', 'kubernetes']
    steps:
      - name: Setup Kubernetes
        uses: manusa/actions-setup-minikube@v2.10.0
        with:
          minikube version: 'v1.32.0'
          kubernetes version: ${{ matrix.k8s_version }}
          driver: docker

      # Other steps for manual test job...

  scheduled-test:
    name: Scheduled e2e Test
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'schedule' && github.repository == 'meshery/meshery' }}
    strategy:
      fail-fast: false
      matrix:
        k8s_version: ['v1.29.2', 'v1.28.7', 'v1.27.11']
        platform: ['docker', 'kubernetes']
    steps:
      - name: Setup Kubernetes
        uses: manusa/actions-setup-minikube@v2.10.0
        with:
          minikube version: 'v1.32.0'
          kubernetes version: ${{ matrix.k8s_version }}
          driver: docker

      # Other steps for scheduled test job...

  test-mesheryctl-invalid-platform:
    name: Test Mesheryctl Invalid Platform
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Capture Output of Installation Attempt
        id: install
        run: |
          output=$(curl -L https://meshery.io/install | PLATFORM=bob bash)
          echo "::set-output name=output::$output"

      - name: Check for Invalid Platform Message
        run: |
          if [[ "${{ steps.install.outputs.output }}" == *"Invalid platform"* ]]; then
            echo "The installation output indicates an invalid platform."
          else
            echo "The installation output does not indicate an invalid platform."
            exit 1
          fi
