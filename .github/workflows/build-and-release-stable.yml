name: Meshery Build and Releaser (stable)
on:
  push:
    tags:
      - "v*"

jobs:
  update-rest-api-docs:
    name: Update REST API Documentation
    if: github.repository == 'meshery/meshery'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Check if handlers were modified
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            modified:
              - added|modified: "server/handlers/**"
      - name: Setup go-swagger
        if: steps.changes.outputs.modified == 'true'
        uses: minchao/setup-go-swagger@v1
        with:
          version: v0.30.5
      - name: swagger-spec
        if: steps.changes.outputs.modified == 'true'
        run: make swagger-build
      - name: swagger-docs
        if: steps.changes.outputs.modified == 'true'
        run: make swagger-docs-build
      - name: Pull changes from remote
        run: git pull origin master
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: docs
          commit_user_name: l5io
          commit_user_email: ci@meshery.io
          commit_author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          commit_options: "--signoff"
          commit_message: "[Docs] Updated Swagger Docs for REST API"

  update-graphql-docs:
    name: Update GraphQL API Documentation
    if: github.repository == 'meshery/meshery'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Check if schema was modified
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            modified:
              - added|modified: 'server/internal/graphql/schema/schema.graphql'
      - name: Set up Ruby
        if: steps.filter.outputs.modified == 'true'
        uses: ruby/setup-ruby@v1.162.0
        with:
          ruby-version: 3.2.6
          bundler-cache: true
      - name: graphql-docs
        if: steps.filter.outputs.modified == 'true'
        run: |
          cd docs; bundle install; cd ..; \
          make graphql-docs-build
      - name: Pull changes from remote
        run: git pull origin master
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: docs
          commit_user_name: l5io
          commit_user_email: ci@meshery.io
          commit_author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          commit_options: "--signoff"
          commit_message: "[Docs] Updated GraphQL API Documentation"

  build:
    name: Docker build, push and sign
    if: github.repository == 'meshery/meshery' && github.event_name == 'push'
    env:
      RELEASE_CHANNEL: "stable"
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          docker system prune -af

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker stable and playground build & tag
        run: |
          DOCKER_BUILDKIT=1 docker build -f install/docker/Dockerfile --no-cache \
            -t ${{ secrets.IMAGE_NAME }}:stable-latest \
            --build-arg TOKEN=${{ secrets.GLOBAL_TOKEN }} \
            --build-arg GIT_COMMITSHA=${GITHUB_SHA::8} \
            --build-arg GIT_VERSION=${GITHUB_REF/refs\/tags\//} \
            --build-arg RELEASE_CHANNEL=${RELEASE_CHANNEL} \
            --build-arg PLAYGROUND=true .
          docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}
          docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::8}
          docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:playground-latest
          docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:playground-${GITHUB_REF/refs\/tags\//}
          docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:playground-${GITHUB_SHA::8}

      - name: Docker stable and playground push
        if: github.repository == 'meshery/meshery' && github.event_name == 'push'
        run: |
          docker push ${{ secrets.IMAGE_NAME }}:stable-latest
          docker push ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}
          docker push ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::8}
          docker push ${{ secrets.IMAGE_NAME }}:playground-latest
          docker push ${{ secrets.IMAGE_NAME }}:playground-${GITHUB_REF/refs\/tags\//}
          docker push ${{ secrets.IMAGE_NAME }}:playground-${GITHUB_SHA::8}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: "v2.2.3"

      - name: Sign Docker images
        if: github.repository == 'meshery/meshery' && github.event_name == 'push'
        run: |
          images=(
            "${{ secrets.IMAGE_NAME }}:stable-latest"
            "${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}"
            "${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::8}"
            "${{ secrets.IMAGE_NAME }}:playground-latest"
            "${{ secrets.IMAGE_NAME }}:playground-${GITHUB_REF/refs\/tags\//}"
            "${{ secrets.IMAGE_NAME }}:playground-${GITHUB_SHA::8}"
          )
          for img in "${images[@]}"; do
            cosign sign $img --key ${{ secrets.COSIGN_PRIVATE_KEY }} --password ${{ secrets.COSIGN_PASSWORD }}
          done

      - name: Verify Docker image signatures
        if: github.repository == 'meshery/meshery' && github.event_name == 'push'
        run: |
          for img in "${images[@]}"; do
            cosign verify $img --key ${{ secrets.COSIGN_PUBLIC_KEY }}
          done

  ctlrelease:
    name: Mesheryctl build & release
    if: github.repository == 'meshery/meshery' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'patch') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@master
        with:
          go-version: "1.24"
      - name: goreleaser with tag
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_NOTES_PAT }}
          RELEASE_CHANNEL: "stable"
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        with:
          version: 2
          args: release --clean --skip=validate -f .github/.goreleaser.yml

      - name: Sign release artifacts
        run: |
          ARTIFACTS_DIR=dist
          for file in $ARTIFACTS_DIR/*; do
            echo "Signing $file"
            cosign sign-blob --key ${{ secrets.COSIGN_PRIVATE_KEY }} $file
          done

      - name: Verify signed artifacts
        run: |
          for file in $ARTIFACTS_DIR/*; do
            echo "Verifying $file"
            cosign verify-blob --key ${{ secrets.COSIGN_PUBLIC_KEY }} $file
          done

      - name: bump homebrew-core formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: mesheryctl
          download-url: https://github.com/meshery/meshery.git
        env:
          COMMITTER_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

  call-dde-release-workflow:
    needs:
      - build
      - ctlrelease
    name: Build and Release Docker Extension
    uses: meshery/meshery/.github/workflows/build-and-release-dde.yml@master
    secrets: inherit

  call-helm-chart-releaser:
    needs:
      - build
    name: Release Helm Charts
    uses: meshery/meshery/.github/workflows/helm-chart-releaser.yml@master
    secrets: inherit
