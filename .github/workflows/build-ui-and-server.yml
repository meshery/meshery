name: Meshery UI and Server
on:
  pull_request_target:
    branches:
      - "master"
    paths-ignore:
      - "docs/**"
      - "mesheryctl/**"
      - "*.md"
      - "*.github/**"
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

jobs:
  build-ui-and-server:
    uses: meshery/meshery/.github/workflows/build-ui-server-reusable-workflow.yml@master
    secrets:
      NODE_VERSION: ${{ secrets.NODE_VERSION }}
      GO_VERSION: ${{ secrets.GO_VERSION }}
  tests-ui-e2e:
    needs: [build-ui-and-server]
    name: UI end-to-end tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out Meshery code
        uses: actions/checkout@v4
        with:
          repository: meshery/meshery
          fetch-depth: 1
          path: meshery
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ secrets.NODE_VERSION }}
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - name: Check out meshery-istio code
        uses: actions/checkout@v4
        with:
          repository: layer5io/meshery-istio
          path: ./meshery-istio
      - name: Check out meshery-consul code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: layer5io/meshery-consul
          path: ./meshery-consul
      - name: Create a out/ folder in meshery ui
        run: |
          mkdir -p meshery/ui/out
          mkdir -p meshery/provider-ui/out/
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: "kind-cluster"
      - name: Run meshery-istio
        run: |
          mkdir -p /home/runner/.meshery/bin
          cd ./meshery-istio
          go run main.go &
          sleep 60
      - name: make directories
        run: |
          echo ${{env.tag}}
          echo ${{env}}
          mkdir -p /home/runner/.meshery/provider/Meshery/${{env.tag}}/provider/
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: meshery
          path: meshery/server/cmd/
      - name: Download Meshery-ui artifacts
        uses: actions/download-artifact@v4
        with:
          name: meshery-ui-build
          path: meshery/ui/out/
      - name: Download Meshery-provider-ui artifacts
        uses: actions/download-artifact@v4
        with:
          name: meshery-provider-ui build
          path: meshery/provider-ui/out/
      - name: Update /etc/hosts
        run: echo "127.0.0.1 mesherylocal.layer5.io" | sudo tee -a /etc/hosts
      - name: Run meshery-consul
        run: |
          mkdir -p /home/runner/.meshery/bin
          cd ./meshery-consul
          go run main.go &
          sleep 60
      - name: Run backend
        working-directory: meshery
        env:
          PROVIDER_BASE_URLS: https://meshery.layer5.io
          PORT: 9081
          ADAPTER_URLS: "mesherylocal.layer5.io:10000 mesherylocal.layer5.io:10001 mesherylocal.layer5.io:10002 mesherylocal.layer5.io:10003 mesherylocal.layer5.io:10004 mesherylocal.layer5.io:10008 mesherylocal.layer5.io:10009 mesherylocal.layer5.io:10007"
        run: |
          cd server/cmd
          chmod +x ./main
          BUILD=${{env.tag}} ./main &
      - name: Run Playwright End-to-End Tests
        working-directory: meshery
        env:
          MESHERY_SERVER_URL: "http://localhost:9081"
          REMOTE_PROVIDER_URL: "https://meshery.layer5.io"
          REMOTE_PROVIDER_USER_EMAIL: ${{ secrets.REMOTE_PROVIDER_USER_EMAIL }}
          REMOTE_PROVIDER_USER_PASSWORD: ${{ secrets.REMOTE_PROVIDER_USER_PASS }}
          PROVIDER_TOKEN: ${{ secrets.PROVIDER_TOKEN }}
        run: |
          make test-setup-ui
          make test-ui
  docker-build-test:
    name: Docker build
    if: github.repository == 'meshery/meshery'
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Docker edge build & tag
        if: startsWith(github.ref, 'refs/tags/') != true && success()
        env:
          RELEASE_CHANNEL: "edge"
        run: |
          DOCKER_BUILDKIT=1 docker build -f install/docker/Dockerfile --no-cache -t meshery:edge-latest --build-arg TOKEN=test --build-arg GIT_COMMITSHA=${GITHUB_SHA::8} --build-arg RELEASE_CHANNEL=${RELEASE_CHANNEL} .
          docker tag meshery:edge-latest meshery:edge-${GITHUB_SHA::8}
      - name: Docker edge push
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
        run: |
          docker push ${{ secrets.IMAGE_NAME }}:edge-latest
          docker push ${{ secrets.IMAGE_NAME }}:edge-${GITHUB_REF/refs\/tags\//}
          docker push ${{ secrets.IMAGE_NAME }}:edge-${GITHUB_SHA::8}
      - name: Docker Hub Description
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
        uses: peter-evans/dockerhub-description@v4
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKERHUB_REPOSITORY: ${{ secrets.IMAGE_NAME }}

  # validate the swagger docs
  swaggerci:
    if: github.repository == 'meshery/meshery'
    name: swagger-docs
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Check if handlers were modified
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            modified:
              - added|modified: "handlers/**"
      - name: Setup go-swagger
        if: steps.changes.outputs.modified == 'true'
        uses: minchao/setup-go-swagger@v1
        with:
          version: v0.26.1
      - name: swagger-spec
        if: steps.changes.outputs.modified == 'true'
        run: swagger generate spec -o ./server/helpers/swagger.yaml --scan-models
      - name: swagger-docs
        if: steps.changes.outputs.modified == 'true'
        run: swagger generate spec -o ./docs/_data/swagger.yml --scan-models && swagger flatten ./docs/_data/swagger.yml -o ./docs/_data/swagger.yml --with-expand --format=yaml

  # validate graphQL schema
  garphql_validate:
    name: Validate GraphQL schema
    if: github.repository == 'meshery/meshery'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Check if schema was modified
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            modified:
              - added|modified: 'server/internal/graphql/schema/schema.graphql'
      - name: Set up Ruby
        if: steps.filter.outputs.modified == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: graphql-docs
        if: steps.filter.outputs.modified == 'true'
        run: |
          cd docs
          bundle install
          bundle exec rake graphql:compile_docs

