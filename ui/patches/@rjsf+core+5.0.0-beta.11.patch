diff --git a/node_modules/@rjsf/core/dist/core.cjs.development.js b/node_modules/@rjsf/core/dist/core.cjs.development.js
index 7e6e4cc..9c1f47a 100644
--- a/node_modules/@rjsf/core/dist/core.cjs.development.js
+++ b/node_modules/@rjsf/core/dist/core.cjs.development.js
@@ -4131,7 +4131,7 @@ class Form extends React.Component {
 
 /** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */
 
-function withTheme(themeProps) {
+function withTheme(themeProps, RJSFForm) {
   return /*#__PURE__*/React.forwardRef((_ref, ref) => {
     var _themeProps$templates, _templates;
 
@@ -4153,6 +4153,17 @@ function withTheme(themeProps) {
         ...((_templates = templates) === null || _templates === void 0 ? void 0 : _templates.ButtonTemplates)
       }
     };
+
+    if (RJSFForm) {
+      return /*#__PURE__*/React__default["default"].createElement(RJSFForm, { ...themeProps,
+        ...directProps,
+        fields: fields,
+        widgets: widgets,
+        templates: templates,
+        ref: ref
+      });
+    }
+
     return /*#__PURE__*/React__default["default"].createElement(Form, { ...themeProps,
       ...directProps,
       fields: fields,
diff --git a/node_modules/@rjsf/core/dist/core.cjs.development.js.map b/node_modules/@rjsf/core/dist/core.cjs.development.js.map
index dbc8220..d6d66ea 100644
--- a/node_modules/@rjsf/core/dist/core.cjs.development.js.map
+++ b/node_modules/@rjsf/core/dist/core.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"core.cjs.development.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","forwardRef","directProps"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"core.cjs.development.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>, RJSFForm: any\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      if(RJSFForm) {\n        return (\n          <RJSFForm\n            {...themeProps}\n            {...directProps}\n            fields={fields}\n            widgets={widgets}\n            templates={templates}\n            ref={ref}\n        />\n        )\n      }\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","RJSFForm","forwardRef","directProps"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@rjsf/core/dist/core.cjs.production.min.js b/node_modules/@rjsf/core/dist/core.cjs.production.min.js
index 9a01488..322350f 100644
--- a/node_modules/@rjsf/core/dist/core.cjs.production.min.js
+++ b/node_modules/@rjsf/core/dist/core.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("react"),t=require("@rjsf/utils"),a=require("lodash/pick"),r=require("lodash/get"),o=require("lodash/isEmpty"),i=require("lodash/isObject"),n=require("lodash/set"),l=require("nanoid"),s=require("lodash/unset"),d=require("lodash/has"),c=require("lodash/omit");function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var m=u(e),p=u(a),h=u(r),f=u(o),g=u(i),y=u(n),S=u(s),E=u(d),b=u(c);function v(){return l.nanoid()}function C(e){return Array.isArray(e)?e.map((e=>({key:v(),item:e}))):[]}function F(e){return Array.isArray(e)?e.map((e=>e.item)):[]}class D extends e.Component{constructor(e){super(e),this.onOptionChange=e=>{const a=parseInt(e,10),{formData:r,onChange:o,options:i,registry:n}=this.props,{schemaUtils:l}=n,s=l.retrieveSchema(i[a],r);let d;if("object"===t.guessType(r)&&("object"===s.type||s.properties)){d=Object.assign({},r);const e=i.slice();e.splice(a,1);for(const t of e)if(t.properties)for(const e in t.properties)e in d&&S.default(d,e)}o(l.getDefaultFormState(i[a],d),void 0,this.getFieldId()),this.setState({selectedOption:parseInt(e,10)})};const{formData:a,options:r}=this.props;this.state={selectedOption:this.getMatchingOption(0,a,r)}}componentDidUpdate(e,a){const{formData:r,options:o,idSchema:i}=this.props,{selectedOption:n}=this.state;if(!t.deepEquals(r,e.formData)&&i.$id===e.idSchema.$id){const e=this.getMatchingOption(n,r,o);if(!a||e===n)return;this.setState({selectedOption:e})}}getMatchingOption(e,t,a){const{schemaUtils:r}=this.props.registry,o=r.getMatchingOption(t,a);return 0!==o?o:e||0}getFieldId(){const{idSchema:e,schema:t}=this.props;return e.$id+(t.oneOf?"__oneof_select":"__anyof_select")}render(){const{name:e,baseType:a,disabled:r=!1,readonly:o=!1,hideError:i=!1,errorSchema:n={},formData:l,formContext:s,idPrefix:d,idSeparator:c,idSchema:u,onBlur:p,onChange:h,onFocus:f,options:g,registry:y,uiSchema:S}=this.props,{widgets:E,fields:b}=y,{SchemaField:v}=b,{selectedOption:C}=this.state,{widget:F="select",...D}=t.getUiOptions(S),x=t.getWidget({type:"number"},F,E),k=g[C]||null;let T;k&&(T=k.type?k:Object.assign({},k,{type:a}));const N=g.map(((e,t)=>({label:e.title||"Option "+(t+1),value:t})));return m.default.createElement("div",{className:"panel panel-default panel-body"},m.default.createElement("div",{className:"form-group"},m.default.createElement(x,{id:this.getFieldId(),schema:{type:"number",default:0},onChange:this.onOptionChange,onBlur:p,onFocus:f,value:C,options:{enumOptions:N},registry:y,formContext:s,...D,label:""})),null!==k&&m.default.createElement(v,{name:e,schema:T,uiSchema:S,errorSchema:n,idSchema:u,idPrefix:d,idSeparator:c,formData:l,formContext:s,onChange:h,onBlur:p,onFocus:f,registry:y,disabled:r,readonly:o,hideError:i}))}}const x=/\.([0-9]*0)*$/,k=/[0.]0*$/,T={array:"ArrayField",boolean:"BooleanField",integer:"NumberField",number:"NumberField",object:"ObjectField",string:"StringField",null:"NullField"};function N(e){const{schema:a,idSchema:r,uiSchema:o,formData:i,errorSchema:n,idPrefix:l,idSeparator:s,name:d,onChange:c,onKeyChange:u,onDropPropertyClick:p,required:h,registry:f,wasPropertyKeyModified:y=!1}=e,{formContext:S,schemaUtils:E}=f,v=t.getUiOptions(o),C=t.getTemplate("FieldTemplate",f,v),F=t.getTemplate("DescriptionFieldTemplate",f,v),D=t.getTemplate("FieldHelpTemplate",f,v),x=t.getTemplate("FieldErrorTemplate",f,v),k=E.retrieveSchema(a,i),N=r[t.ID_KEY],A=t.mergeObjects(E.toIdSchema(k,N,i,l,s),r),w=m.default.useCallback(((e,t,a)=>c(e,t,a||N)),[N,c]),O=function(e,a,r,o){const i=a.field,{fields:n}=o;if("function"==typeof i)return i;if("string"==typeof i&&i in n)return n[i];const l=t.getSchemaType(e),s=Array.isArray(l)?l[0]:l||"",d=T[s];return d||!e.anyOf&&!e.oneOf?d in n?n[d]:()=>{const i=t.getTemplate("UnsupportedFieldTemplate",o,a);return m.default.createElement(i,{schema:e,idSchema:r,reason:"Unknown field type "+e.type,registry:o})}:()=>null}(k,v,A,f),B=Boolean(e.disabled||v.disabled),I=Boolean(e.readonly||v.readonly||e.schema.readOnly||k.readOnly),U=v.hideError,q=void 0===U?e.hideError:Boolean(U),P=Boolean(e.autofocus||v.autofocus);if(0===Object.keys(k).length)return null;const _=E.getDisplayLabel(k,o),{__errors:R,...V}=n||{},M=b.default(o,["ui:classNames","classNames"]);"ui:options"in M&&(M["ui:options"]=b.default(M["ui:options"],["classNames"]));const K=m.default.createElement(O,{...e,onChange:w,idSchema:A,schema:k,uiSchema:M,disabled:B,readonly:I,hideError:q,autofocus:P,errorSchema:V,formContext:S,rawErrors:R}),W=A[t.ID_KEY];let j;j=y||t.ADDITIONAL_PROPERTY_FLAG in k?d:v.title||e.schema.title||k.title||d;const L=v.description||e.schema.description||k.description||"",$=v.help,Y="hidden"===v.widget,z=["form-group","field","field-"+k.type];!q&&R&&R.length>0&&z.push("field-error has-error has-danger"),null!=o&&o.classNames&&z.push(o.classNames),v.classNames&&z.push(v.classNames);const H=m.default.createElement(D,{help:$,idSchema:A,schema:k,uiSchema:o,hasErrors:!q&&R&&R.length>0,registry:f}),J=q?void 0:m.default.createElement(x,{errors:R,errorSchema:n,idSchema:A,schema:k,uiSchema:o,registry:f}),G={description:m.default.createElement(F,{id:W+"__description",description:L,schema:k,uiSchema:o,registry:f}),rawDescription:L,help:H,rawHelp:"string"==typeof $?$:void 0,errors:J,rawErrors:q?void 0:R,id:W,label:j,hidden:Y,onChange:c,onKeyChange:u,onDropPropertyClick:p,required:h,disabled:B,readonly:I,hideError:q,displayLabel:_,classNames:z.join(" ").trim(),formContext:S,formData:i,schema:k,uiSchema:o,registry:f},Q=f.fields.AnyOfField,X=f.fields.OneOfField;return m.default.createElement(C,{...G},m.default.createElement(m.default.Fragment,null,K,k.anyOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&m.default.createElement(Q,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.anyOf.map((e=>E.retrieveSchema(g.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o}),k.oneOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&m.default.createElement(X,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.oneOf.map((e=>E.retrieveSchema(g.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o})))}const A={AnyOfField:D,ArrayField:class extends e.Component{constructor(e){super(e),this._getNewFormDataRow=()=>{const{schema:e,registry:a}=this.props,{schemaUtils:r}=a;let o=e.items;return t.isFixedItems(e)&&t.allowAdditionalItems(e)&&(o=e.additionalItems),r.getDefaultFormState(o)},this.onAddClick=e=>{e&&e.preventDefault();const{onChange:t}=this.props,{keyedFormData:a}=this.state,r=[...a,{key:v(),item:this._getNewFormDataRow()}];this.setState({keyedFormData:r,updatedKeyedFormData:!0},(()=>t(F(r))))},this.onAddIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a}=this.props,{keyedFormData:r}=this.state,o={key:v(),item:this._getNewFormDataRow()},i=[...r];i.splice(e,0,o),this.setState({keyedFormData:i,updatedKeyedFormData:!0},(()=>a(F(i))))},this.onDropIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a,errorSchema:r}=this.props,{keyedFormData:o}=this.state;let i;if(r){i={};for(const t in r){const a=parseInt(t);a<e?y.default(i,[a],r[t]):a>e&&y.default(i,[a-1],r[t])}}const n=o.filter(((t,a)=>a!==e));this.setState({keyedFormData:n,updatedKeyedFormData:!0},(()=>a(F(n),i)))},this.onReorderClick=(e,t)=>a=>{a&&(a.preventDefault(),a.currentTarget.blur());const{onChange:r,errorSchema:o}=this.props;let i;if(this.props.errorSchema){i={};for(const a in o){const r=parseInt(a);r==e?y.default(i,[t],o[e]):r==t?y.default(i,[e],o[t]):y.default(i,[a],o[r])}}const{keyedFormData:n}=this.state,l=function(){const a=n.slice();return a.splice(e,1),a.splice(t,0,n[e]),a}();this.setState({keyedFormData:l},(()=>r(F(l),i)))},this.onChangeForIndex=e=>(t,a,r)=>{const{formData:o,onChange:i,errorSchema:n}=this.props;i((Array.isArray(o)?o:[]).map(((a,r)=>e===r?void 0===t?null:t:a)),n&&n&&{...n,[e]:a},r)},this.onSelectChange=e=>{const{onChange:t,idSchema:a}=this.props;t(e,void 0,a&&a.$id)};const{formData:a=[]}=e,r=C(a);this.state={keyedFormData:r,updatedKeyedFormData:!1}}static getDerivedStateFromProps(e,t){if(t.updatedKeyedFormData)return{updatedKeyedFormData:!1};const a=Array.isArray(e.formData)?e.formData:[],r=t.keyedFormData||[];return{keyedFormData:a.length===r.length?r.map(((e,t)=>({key:e.key,item:a[t]}))):C(a)}}get itemTitle(){const{schema:e}=this.props;return h.default(e,[t.ITEMS_KEY,"title"],h.default(e,[t.ITEMS_KEY,"description"],"Item"))}isItemRequired(e){return Array.isArray(e.type)?!e.type.includes("null"):"null"!==e.type}canAddItem(e){const{schema:a,uiSchema:r}=this.props;let{addable:o}=t.getUiOptions(r);return!1!==o&&(o=void 0===a.maxItems||e.length<a.maxItems),o}render(){const{schema:e,uiSchema:a,idSchema:r,registry:o}=this.props,{schemaUtils:i}=o;if(!(t.ITEMS_KEY in e)){const i=t.getUiOptions(a),n=t.getTemplate("UnsupportedFieldTemplate",o,i);return m.default.createElement(n,{schema:e,idSchema:r,reason:"Missing items definition",registry:o})}return i.isMultiSelect(e)?this.renderMultiSelect():t.isCustomWidget(a)?this.renderCustomWidget():t.isFixedItems(e)?this.renderFixedArray():i.isFilesArray(e,a)?this.renderFiles():this.renderNormalArray()}renderNormalArray(){const{schema:e,uiSchema:a={},errorSchema:r,idSchema:o,name:i,disabled:n=!1,readonly:l=!1,autofocus:s=!1,required:d=!1,registry:c,onBlur:u,onFocus:p,idPrefix:h,idSeparator:f="_",rawErrors:y}=this.props,{keyedFormData:S}=this.state,E=void 0===e.title?i:e.title,{schemaUtils:b,formContext:v}=c,C=t.getUiOptions(a),D=g.default(e.items)?e.items:{},x=b.retrieveSchema(D),k=F(this.state.keyedFormData),T={canAdd:this.canAddItem(k),items:S.map(((e,t)=>{const{key:n,item:l}=e,d=l,c=b.retrieveSchema(D,d),m=r?r[t]:void 0,g=b.toIdSchema(c,o.$id+f+t,d,h,f);return this.renderArrayFieldItem({key:n,index:t,name:i&&i+"-"+t,canMoveUp:t>0,canMoveDown:t<k.length-1,itemSchema:c,itemIdSchema:g,itemErrorSchema:m,itemData:d,itemUiSchema:a.items,autofocus:s&&0===t,onBlur:u,onFocus:p,rawErrors:y})})),className:"field field-array field-array-of-"+x.type,disabled:n,idSchema:o,uiSchema:a,onAddClick:this.onAddClick,readonly:l,required:d,schema:e,title:E,formContext:v,formData:k,rawErrors:y,registry:c},N=t.getTemplate("ArrayFieldTemplate",c,C);return m.default.createElement(N,{...T})}renderCustomWidget(){const{schema:e,idSchema:a,uiSchema:r,disabled:o=!1,readonly:i=!1,autofocus:n=!1,required:l=!1,hideError:s,placeholder:d,onBlur:c,onFocus:u,formData:p=[],registry:h,rawErrors:f,name:g}=this.props,{widgets:y,formContext:S}=h,E=e.title||g,{widget:b,...v}=t.getUiOptions(r),C=t.getWidget(e,b,y);return m.default.createElement(C,{id:a&&a.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:v,schema:e,uiSchema:r,registry:h,value:p,disabled:o,readonly:i,hideError:s,required:l,label:E,placeholder:d,formContext:S,autofocus:n,rawErrors:f})}renderMultiSelect(){const{schema:e,idSchema:a,uiSchema:r,formData:o=[],disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,placeholder:d,onBlur:c,onFocus:u,registry:p,rawErrors:h,name:f}=this.props,{widgets:g,schemaUtils:y,formContext:S}=p,E=y.retrieveSchema(e.items,o),b=e.title||f,v=t.optionsList(E),{widget:C="select",...F}=t.getUiOptions(r),D=t.getWidget(e,C,g);return m.default.createElement(D,{id:a&&a.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:{...F,enumOptions:v},schema:e,uiSchema:r,registry:p,value:o,disabled:i,readonly:n,required:s,label:b,placeholder:d,formContext:S,autofocus:l,rawErrors:h})}renderFiles(){const{schema:e,uiSchema:a,idSchema:r,name:o,disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,onBlur:d,onFocus:c,registry:u,formData:p=[],rawErrors:h}=this.props,f=e.title||o,{widgets:g,formContext:y}=u,{widget:S="files",...E}=t.getUiOptions(a),b=t.getWidget(e,S,g);return m.default.createElement(b,{options:E,id:r&&r.$id,multiple:!0,onChange:this.onSelectChange,onBlur:d,onFocus:c,schema:e,uiSchema:a,title:f,value:p,disabled:i,readonly:n,required:s,registry:u,formContext:y,autofocus:l,rawErrors:h,label:""})}renderFixedArray(){const{schema:e,uiSchema:a={},formData:r=[],errorSchema:o,idPrefix:i,idSeparator:n="_",idSchema:l,name:s,disabled:d=!1,readonly:c=!1,autofocus:u=!1,required:p=!1,registry:h,onBlur:f,onFocus:y,rawErrors:S}=this.props,{keyedFormData:E}=this.state;let{formData:b=[]}=this.props;const v=e.title||s,C=t.getUiOptions(a),{schemaUtils:F,formContext:D}=h,x=(g.default(e.items)?e.items:[]).map(((e,t)=>F.retrieveSchema(e,r[t]))),k=g.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,r):null;(!b||b.length<x.length)&&(b=b||[],b=b.concat(new Array(x.length-b.length)));const T={canAdd:this.canAddItem(b)&&!!k,className:"field field-array field-array-fixed-items",disabled:d,idSchema:l,formData:r,items:E.map(((t,r)=>{const{key:d,item:c}=t,m=c,p=r>=x.length,h=p&&g.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,m):x[r],E=F.toIdSchema(h,l.$id+n+r,m,i,n),v=p?a.additionalItems||{}:Array.isArray(a.items)?a.items[r]:a.items||{};return this.renderArrayFieldItem({key:d,index:r,name:s&&s+"-"+r,canRemove:p,canMoveUp:r>=x.length+1,canMoveDown:p&&r<b.length-1,itemSchema:h,itemData:m,itemUiSchema:v,itemIdSchema:E,itemErrorSchema:o?o[r]:void 0,autofocus:u&&0===r,onBlur:f,onFocus:y,rawErrors:S})})),onAddClick:this.onAddClick,readonly:c,required:p,registry:h,schema:e,uiSchema:a,title:v,formContext:D,rawErrors:S},N=t.getTemplate("ArrayFieldTemplate",h,C);return m.default.createElement(N,{...T})}renderArrayFieldItem(e){const{key:a,index:r,name:o,canRemove:i=!0,canMoveUp:n=!0,canMoveDown:l=!0,itemSchema:s,itemData:d,itemUiSchema:c,itemIdSchema:u,itemErrorSchema:p,autofocus:h,onBlur:f,onFocus:g,rawErrors:y}=e,{disabled:S,hideError:E,idPrefix:b,idSeparator:v,readonly:C,uiSchema:F,registry:D,formContext:x}=this.props,{fields:{ArraySchemaField:k,SchemaField:T}}=D,N=k||T,{orderable:A=!0,removable:w=!0}=t.getUiOptions(F),O={moveUp:A&&n,moveDown:A&&l,remove:w&&i,toolbar:!1};return O.toolbar=Object.keys(O).some((e=>O[e])),{children:m.default.createElement(N,{name:o,index:r,schema:s,uiSchema:c,formData:d,formContext:x,errorSchema:p,idPrefix:b,idSeparator:v,idSchema:u,required:this.isItemRequired(s),onChange:this.onChangeForIndex(r),onBlur:f,onFocus:g,registry:D,disabled:S,readonly:C,hideError:E,autofocus:h,rawErrors:y}),className:"array-item",disabled:S,hasToolbar:O.toolbar,hasMoveUp:O.moveUp,hasMoveDown:O.moveDown,hasRemove:O.remove,index:r,key:a,onAddIndexClick:this.onAddIndexClick,onDropIndexClick:this.onDropIndexClick,onReorderClick:this.onReorderClick,readonly:C,registry:D,uiSchema:c}}},BooleanField:function(e){const{schema:a,name:r,uiSchema:o,idSchema:i,formData:n,registry:l,required:s,disabled:d,readonly:c,autofocus:u,onChange:p,onFocus:h,onBlur:f,rawErrors:y}=e,{title:S}=a,{widgets:E,formContext:b}=l,{widget:v="checkbox",...C}=t.getUiOptions(o),F=t.getWidget(a,v,E);let D;if(Array.isArray(a.oneOf))D=t.optionsList({oneOf:a.oneOf.map((e=>{if(g.default(e))return{...e,title:e.title||(!0===e.const?"Yes":"No")}})).filter((e=>e))});else{var x;const e=a,r=null!=(x=a.enum)?x:[!0,!1];D=!e.enumNames&&2===r.length&&r.every((e=>"boolean"==typeof e))?[{value:r[0],label:r[0]?"Yes":"No"},{value:r[1],label:r[1]?"Yes":"No"}]:t.optionsList({enum:r,enumNames:e.enumNames})}return m.default.createElement(F,{options:{...C,enumOptions:D},schema:a,uiSchema:o,id:i&&i.$id,onChange:p,onFocus:h,onBlur:f,label:void 0===S?r:S,value:n,required:s,disabled:d,readonly:c,registry:l,formContext:b,autofocus:u,rawErrors:y})},NumberField:function(a){const{registry:r,onChange:o,formData:i,value:n}=a,[l,s]=e.useState(n),{StringField:d}=r.fields;let c=i;const u=e.useCallback((e=>{s(e),"."===(""+e).charAt(0)&&(e="0"+e);const a="string"==typeof e&&e.match(x)?t.asNumber(e.replace(k,"")):t.asNumber(e);o(a)}),[o]);if("string"==typeof l&&"number"==typeof c){const e=new RegExp((""+c).replace(".","\\.")+"\\.?0*$");l.match(e)&&(c=l)}return m.default.createElement(d,{...a,formData:c,onChange:u})},ObjectField:class extends e.Component{constructor(){var e;super(...arguments),e=this,this.state={wasPropertyKeyModified:!1,additionalProperties:{}},this.onPropertyChange=function(t,a){return void 0===a&&(a=!1),(r,o,i)=>{const{formData:n,onChange:l,errorSchema:s}=e.props;void 0===r&&a&&(r=""),l({...n,[t]:r},s&&s&&{...s,[t]:o},i)}},this.onDropPropertyClick=e=>t=>{t.preventDefault();const{onChange:a,formData:r}=this.props,o={...r};S.default(o,e),a(o)},this.getAvailableKey=(e,a)=>{const{uiSchema:r}=this.props,{duplicateKeySuffixSeparator:o="-"}=t.getUiOptions(r);let i=0,n=e;for(;n in a;)n=""+e+o+ ++i;return n},this.onKeyChange=e=>(t,a)=>{if(e===t)return;const{formData:r,onChange:o,errorSchema:i}=this.props;t=this.getAvailableKey(t,r);const n={...r},l={[e]:t},s=Object.keys(n).map((e=>({[l[e]||e]:n[e]}))),d=Object.assign({},...s);this.setState({wasPropertyKeyModified:!0}),o(d,i&&i&&{...i,[t]:a})},this.handleAddClick=e=>()=>{if(!e.additionalProperties)return;const{formData:a,onChange:r,registry:o}=this.props,i={...a};let n;if(g.default(e.additionalProperties)&&(n=e.additionalProperties.type,t.REF_KEY in e.additionalProperties)){const{schemaUtils:r}=o;n=r.retrieveSchema({$ref:e.additionalProperties[t.REF_KEY]},a).type}const l=this.getAvailableKey("newKey",i);y.default(i,l,this.getDefaultValue(n)),r(i)}}isRequired(e){const{schema:t}=this.props;return Array.isArray(t.required)&&-1!==t.required.indexOf(e)}getDefaultValue(e){switch(e){case"string":default:return"New Value";case"array":return[];case"boolean":return!1;case"null":return null;case"number":return 0;case"object":return{}}}render(){const{schema:e,uiSchema:a={},formData:r,errorSchema:o,idSchema:i,name:n,required:l=!1,disabled:s=!1,readonly:d=!1,hideError:c,idPrefix:u,idSeparator:p,onBlur:f,onFocus:g,registry:y}=this.props,{fields:S,formContext:b,schemaUtils:v}=y,{SchemaField:C}=S,F=v.retrieveSchema(e,r),D=t.getUiOptions(a),{properties:x={}}=F,k=void 0===F.title?n:F.title,T=D.description||F.description;let N;try{const e=Object.keys(x);N=t.orderProperties(e,D.order)}catch(e){return m.default.createElement("div",null,m.default.createElement("p",{className:"config-error",style:{color:"red"}},"Invalid ",n||"root"," object field configuration:",m.default.createElement("em",null,e.message),"."),m.default.createElement("pre",null,JSON.stringify(F)))}const A=t.getTemplate("ObjectFieldTemplate",y,D),w={title:D.title||k,description:T,properties:N.map((e=>{const n=E.default(F,[t.PROPERTIES_KEY,e,t.ADDITIONAL_PROPERTY_FLAG]),S=n?a.additionalProperties:a[e],v="hidden"===t.getUiOptions(S).widget,D=h.default(i,[e],{});return{content:m.default.createElement(C,{key:e,name:e,required:this.isRequired(e),schema:h.default(F,[t.PROPERTIES_KEY,e],{}),uiSchema:S,errorSchema:h.default(o,e),idSchema:D,idPrefix:u,idSeparator:p,formData:h.default(r,e),formContext:b,wasPropertyKeyModified:this.state.wasPropertyKeyModified,onKeyChange:this.onKeyChange(e),onChange:this.onPropertyChange(e,n),onBlur:f,onFocus:g,registry:y,disabled:s,readonly:d,hideError:c,onDropPropertyClick:this.onDropPropertyClick}),name:e,readonly:d,disabled:s,required:l,hidden:v}})),readonly:d,disabled:s,required:l,idSchema:i,uiSchema:a,schema:F,formData:r,formContext:b,registry:y};return m.default.createElement(A,{...w,onAddClick:this.handleAddClick})}},OneOfField:D,SchemaField:class extends m.default.Component{shouldComponentUpdate(e){return!t.deepEquals(this.props,e)}render(){return m.default.createElement(N,{...this.props})}},StringField:function(e){const{schema:a,name:r,uiSchema:o,idSchema:i,formData:n,required:l,disabled:s=!1,readonly:d=!1,autofocus:c=!1,onChange:u,onBlur:p,onFocus:h,registry:f,rawErrors:g}=e,{title:y,format:S}=a,{widgets:E,formContext:b,schemaUtils:v}=f,C=v.isSelect(a)?t.optionsList(a):void 0;let F=C?"select":"text";S&&t.hasWidget(a,S,E)&&(F=S);const{widget:D=F,placeholder:x="",...k}=t.getUiOptions(o),T=t.getWidget(a,D,E);return m.default.createElement(T,{options:{...k,enumOptions:C},schema:a,uiSchema:o,id:i&&i.$id,label:void 0===y?r:y,value:n,onChange:u,onBlur:p,onFocus:h,required:l,disabled:s,readonly:d,formContext:b,autofocus:c,registry:f,placeholder:x,rawErrors:g})},NullField:function(t){const{formData:a,onChange:r}=t;return e.useEffect((()=>{void 0===a&&r(null)}),[a,r]),null}};function w(e){const{iconType:t="default",icon:a,className:r,uiSchema:o,...i}=e;return m.default.createElement("button",{type:"button",className:"btn btn-"+t+" "+r,...i},m.default.createElement("i",{className:"glyphicon glyphicon-"+a}))}function O(e){const{label:t,required:a,id:r}=e;return t?m.default.createElement("label",{className:"control-label",htmlFor:r},t,a&&m.default.createElement("span",{className:"required"},"*")):null}const B={ArrayFieldDescriptionTemplate:function(e){const{idSchema:a,description:r,registry:o,schema:i,uiSchema:n}=e,l=t.getUiOptions(n),{label:s=!0}=l;if(!r||!s)return null;const d=t.getTemplate("DescriptionFieldTemplate",o,l);return m.default.createElement(d,{id:a.$id+"__description",description:r,schema:i,uiSchema:n,registry:o})},ArrayFieldItemTemplate:function(e){const{children:t,className:a,disabled:r,hasToolbar:o,hasMoveDown:i,hasMoveUp:n,hasRemove:l,index:s,onDropIndexClick:d,onReorderClick:c,readonly:u,registry:p,uiSchema:h}=e,{MoveDownButton:f,MoveUpButton:g,RemoveButton:y}=p.templates.ButtonTemplates,S={flex:1,paddingLeft:6,paddingRight:6,fontWeight:"bold"};return m.default.createElement("div",{className:a},m.default.createElement("div",{className:o?"col-xs-9":"col-xs-12"},t),o&&m.default.createElement("div",{className:"col-xs-3 array-item-toolbox"},m.default.createElement("div",{className:"btn-group",style:{display:"flex",justifyContent:"space-around"}},(n||i)&&m.default.createElement(g,{style:S,disabled:r||u||!n,onClick:c(s,s-1),uiSchema:h}),(n||i)&&m.default.createElement(f,{style:S,disabled:r||u||!i,onClick:c(s,s+1),uiSchema:h}),l&&m.default.createElement(y,{style:S,disabled:r||u,onClick:d(s),uiSchema:h}))))},ArrayFieldTemplate:function(e){const{canAdd:a,className:r,disabled:o,idSchema:i,uiSchema:n,items:l,onAddClick:s,readonly:d,registry:c,required:u,schema:p,title:h}=e,f=t.getUiOptions(n),g=t.getTemplate("ArrayFieldDescriptionTemplate",c,f),y=t.getTemplate("ArrayFieldItemTemplate",c,f),S=t.getTemplate("ArrayFieldTitleTemplate",c,f),{ButtonTemplates:{AddButton:E}}=c.templates;return m.default.createElement("fieldset",{className:r,id:i.$id},m.default.createElement(S,{idSchema:i,title:f.title||h,required:u,schema:p,uiSchema:n,registry:c}),m.default.createElement(g,{idSchema:i,description:f.description||p.description,schema:p,uiSchema:n,registry:c}),m.default.createElement("div",{className:"row array-item-list"},l&&l.map((e=>{let{key:t,...a}=e;return m.default.createElement(y,{key:t,...a})}))),a&&m.default.createElement(E,{className:"array-item-add",onClick:s,disabled:o||d,uiSchema:n}))},ArrayFieldTitleTemplate:function(e){const{idSchema:a,title:r,schema:o,uiSchema:i,required:n,registry:l}=e,s=t.getUiOptions(i),{label:d=!0}=s;if(!r||!d)return null;const c=t.getTemplate("TitleFieldTemplate",l,s);return m.default.createElement(c,{id:a.$id+"__title",title:r,required:n,schema:o,uiSchema:i,registry:l})},ButtonTemplates:{SubmitButton:function(e){let{uiSchema:a}=e;const{submitText:r,norender:o,props:i={}}=t.getSubmitButtonOptions(a);return o?null:m.default.createElement("div",null,m.default.createElement("button",{type:"submit",...i,className:"btn btn-info "+i.className},r))},AddButton:function(e){let{className:t,onClick:a,disabled:r}=e;return m.default.createElement("div",{className:"row"},m.default.createElement("p",{className:"col-xs-3 col-xs-offset-9 text-right "+t},m.default.createElement(w,{iconType:"info",icon:"plus",className:"btn-add col-xs-12",title:"Add",onClick:a,disabled:r})))},MoveDownButton:function(e){return m.default.createElement(w,{title:"Move down",className:"array-item-move-down",...e,icon:"arrow-down"})},MoveUpButton:function(e){return m.default.createElement(w,{title:"Move up",className:"array-item-move-up",...e,icon:"arrow-up"})},RemoveButton:function(e){return m.default.createElement(w,{title:"Remove",className:"array-item-remove",...e,iconType:"danger",icon:"remove"})}},BaseInputTemplate:function(a){const{id:r,value:o,readonly:i,disabled:n,autofocus:l,onBlur:s,onFocus:d,onChange:c,options:u,schema:p,uiSchema:h,formContext:f,registry:g,rawErrors:y,type:S,...E}=a;if(!r)throw console.log("No id for",a),new Error("no id for props "+JSON.stringify(a));const b={...E,...t.getInputProps(p,S,u)};let v;v="number"===b.type||"integer"===b.type?o||0===o?o:"":null==o?"":o;const C=e.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?u.emptyValue:t)}),[c,u]),F=e.useCallback((e=>{let{target:{value:t}}=e;return s(r,t)}),[s,r]),D=e.useCallback((e=>{let{target:{value:t}}=e;return d(r,t)}),[d,r]);return m.default.createElement(m.default.Fragment,null,m.default.createElement("input",{id:r,name:r,className:"form-control",readOnly:i,disabled:n,autoFocus:l,value:v,...b,list:p.examples?"examples_"+r:void 0,onChange:C,onBlur:F,onFocus:D}),Array.isArray(p.examples)&&m.default.createElement("datalist",{key:"datalist_"+r,id:"examples_"+r},[...new Set(p.examples.concat(p.default?[p.default]:[]))].map((e=>m.default.createElement("option",{key:e,value:e})))))},DescriptionFieldTemplate:function(e){const{id:t,description:a}=e;return a?m.default.createElement("string"==typeof a?"p":"div",{id:t,className:"field-description"},a):null},ErrorListTemplate:function(e){let{errors:t}=e;return m.default.createElement("div",{className:"panel panel-danger errors"},m.default.createElement("div",{className:"panel-heading"},m.default.createElement("h3",{className:"panel-title"},"Errors")),m.default.createElement("ul",{className:"list-group"},t.map(((e,t)=>m.default.createElement("li",{key:t,className:"list-group-item text-danger"},e.stack)))))},FieldTemplate:function(e){const{id:a,label:r,children:o,errors:i,help:n,description:l,hidden:s,required:d,displayLabel:c,registry:u,uiSchema:p}=e,h=t.getUiOptions(p),f=t.getTemplate("WrapIfAdditionalTemplate",u,h);return s?m.default.createElement("div",{className:"hidden"},o):m.default.createElement(f,{...e},c&&m.default.createElement(O,{label:r,required:d,id:a}),c&&l?l:null,o,i,n)},FieldErrorTemplate:function(e){const{errors:t=[],idSchema:a}=e;return 0===t.length?null:m.default.createElement("div",null,m.default.createElement("ul",{id:a.$id+"__error",className:"error-detail bs-callout bs-callout-info"},t.filter((e=>!!e)).map(((e,t)=>m.default.createElement("li",{className:"text-danger",key:t},e)))))},FieldHelpTemplate:function(e){const{idSchema:t,help:a}=e;return a?m.default.createElement("string"==typeof a?"p":"div",{id:t.$id+"__help",className:"help-block"},a):null},ObjectFieldTemplate:function(e){const{description:a,disabled:r,formData:o,idSchema:i,onAddClick:n,properties:l,readonly:s,registry:d,required:c,schema:u,title:p,uiSchema:h}=e,f=t.getUiOptions(h),g=t.getTemplate("TitleFieldTemplate",d,f),y=t.getTemplate("DescriptionFieldTemplate",d,f),{ButtonTemplates:{AddButton:S}}=d.templates;return m.default.createElement("fieldset",{id:i.$id},(f.title||p)&&m.default.createElement(g,{id:i.$id+"__title",title:f.title||p,required:c,schema:u,uiSchema:h,registry:d}),(f.description||a)&&m.default.createElement(y,{id:i.$id+"__description",description:f.description||a,schema:u,uiSchema:h,registry:d}),l.map((e=>e.content)),t.canExpand(u,h,o)&&m.default.createElement(S,{className:"object-property-expand",onClick:n(u),disabled:r||s,uiSchema:h}))},TitleFieldTemplate:function(e){const{id:t,title:a,required:r}=e;return m.default.createElement("legend",{id:t},a,r&&m.default.createElement("span",{className:"required"},"*"))},UnsupportedFieldTemplate:function(e){const{schema:t,idSchema:a,reason:r}=e;return m.default.createElement("div",{className:"unsupported-field"},m.default.createElement("p",null,"Unsupported field schema",a&&a.$id&&m.default.createElement("span",null," for"," field ",m.default.createElement("code",null,a.$id)),r&&m.default.createElement("em",null,": ",r),"."),t&&m.default.createElement("pre",null,JSON.stringify(t,null,2)))},WrapIfAdditionalTemplate:function(e){const{id:a,classNames:r,disabled:o,label:i,onKeyChange:n,onDropPropertyClick:l,readonly:s,required:d,schema:c,children:u,uiSchema:p,registry:h}=e,{RemoveButton:f}=h.templates.ButtonTemplates;return m.default.createElement("div",{className:r},t.ADDITIONAL_PROPERTY_FLAG in c?m.default.createElement("div",{className:"row"},m.default.createElement("div",{className:"col-xs-5 form-additional"},m.default.createElement("div",{className:"form-group"},m.default.createElement(O,{label:i+" Key",required:d,id:a+"-key"}),m.default.createElement("input",{className:"form-control",type:"text",id:a+"-key",onBlur:e=>n(e.target.value),defaultValue:i}))),m.default.createElement("div",{className:"form-additional form-group col-xs-5"},u),m.default.createElement("div",{className:"col-xs-2"},m.default.createElement(f,{className:"array-item-remove btn-block",style:{border:"0"},disabled:o||s,onClick:l(i),uiSchema:p}))):u)}};function I(e,a){const r=[];for(let o=e;o<=a;o++)r.push({value:o,label:t.pad(o,2)});return r}function U(e){let{type:t,range:a,value:r,select:o,rootId:i,disabled:n,readonly:l,autofocus:s,registry:d,onBlur:c,onFocus:u}=e;const p=i+"_"+t,{SelectWidget:h}=d.widgets;return m.default.createElement(h,{schema:{type:"integer"},id:p,className:"form-control",options:{enumOptions:I(a[0],a[1])},placeholder:t,value:r,disabled:n,readonly:l,autofocus:s,onChange:e=>o(t,e),onBlur:c,onFocus:u,registry:d,label:""})}function q(e,t){return null===e?null:e.replace(";base64",";name="+encodeURIComponent(t)+";base64")}function P(e){const{name:t,size:a,type:r}=e;return new Promise(((o,i)=>{const n=new window.FileReader;n.onerror=i,n.onload=e=>{var i;"string"==typeof(null===(i=e.target)||void 0===i?void 0:i.result)?o({dataURL:q(e.target.result,t),name:t,size:a,type:r}):o({dataURL:null,name:t,size:a,type:r})},n.readAsDataURL(e)}))}function _(e){let{filesInfo:t}=e;return 0===t.length?null:m.default.createElement("ul",{className:"file-info"},t.map(((e,t)=>{const{name:a,size:r,type:o}=e;return m.default.createElement("li",{key:t},m.default.createElement("strong",null,a)," (",o,", ",r," bytes)")})))}function R(e){return e.filter((e=>void 0!==e)).map((e=>{const{blob:a,name:r}=t.dataURItoBlob(e);return{name:r,size:a.size,type:a.type}}))}function V(e,t){return t?Array.from(e.target.options).slice().filter((e=>e.selected)).map((e=>e.value)):e.target.value}function M(t){let{id:a,options:r={},placeholder:o,value:i,required:n,disabled:l,readonly:s,autofocus:d=!1,onChange:c,onBlur:u,onFocus:p}=t;const h=e.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?r.emptyValue:t)}),[c,r.emptyValue]),f=e.useCallback((e=>{let{target:{value:t}}=e;return u(a,t)}),[u,a]),g=e.useCallback((e=>{let{target:{value:t}}=e;return p(a,t)}),[a,p]);return m.default.createElement("textarea",{id:a,name:a,className:"form-control",value:i||"",placeholder:o,required:n,disabled:l,readOnly:s,autoFocus:d,rows:r.rows,onBlur:f,onFocus:g,onChange:h})}M.defaultProps={autofocus:!1,options:{}};const K={PasswordWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"password",...e})},RadioWidget:function(t){let{options:a,value:r,required:o,disabled:i,readonly:n,autofocus:l=!1,onBlur:s,onFocus:d,onChange:c,id:u}=t;const p=Math.random().toString(),{enumOptions:h,enumDisabled:f,inline:g}=a,y=e.useCallback((e=>s(u,e.target.value)),[s,u]),S=e.useCallback((e=>d(u,e.target.value)),[d,u]);return m.default.createElement("div",{className:"field-radio-group",id:u},Array.isArray(h)&&h.map(((e,t)=>{const a=e.value===r,s=Array.isArray(f)&&-1!=f.indexOf(e.value),d=i||s||n?"disabled":"",h=m.default.createElement("span",null,m.default.createElement("input",{type:"radio",id:u+"-"+e.value,checked:a,name:p,required:o,value:e.value,disabled:i||s||n,autoFocus:l&&0===t,onChange:()=>c(e.value),onBlur:y,onFocus:S}),m.default.createElement("span",null,e.label));return g?m.default.createElement("label",{key:e.value,className:"radio-inline "+d},h):m.default.createElement("div",{key:e.value,className:"radio "+d},m.default.createElement("label",null,h))})))},UpDownWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"number",...e})},RangeWidget:function(e){const{value:t,registry:{templates:{BaseInputTemplate:a}}}=e;return m.default.createElement("div",{className:"field-range-wrapper"},m.default.createElement(a,{type:"range",...e}),m.default.createElement("span",{className:"range-view"},t))},SelectWidget:function(a){let{schema:r,id:o,options:i,value:n,required:l,disabled:s,readonly:d,multiple:c=!1,autofocus:u=!1,onChange:p,onBlur:h,onFocus:f,placeholder:g}=a;const{enumOptions:y,enumDisabled:S}=i,E=c?[]:"",b=e.useCallback((e=>{const a=V(e,c);return f(o,t.processSelectValue(r,a,i))}),[f,o,r,c,i]),v=e.useCallback((e=>{const a=V(e,c);return h(o,t.processSelectValue(r,a,i))}),[h,o,r,c,i]),C=e.useCallback((e=>{const a=V(e,c);return p(t.processSelectValue(r,a,i))}),[p,r,c,i]);return m.default.createElement("select",{id:o,name:o,multiple:c,className:"form-control",value:void 0===n?E:n,required:l,disabled:s||d,autoFocus:u,onBlur:v,onFocus:b,onChange:C},!c&&void 0===r.default&&m.default.createElement("option",{value:""},g),Array.isArray(y)&&y.map(((e,t)=>{let{value:a,label:r}=e;const o=S&&-1!=S.indexOf(a);return m.default.createElement("option",{key:t,value:a,disabled:o},r)})))},TextWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{...e})},DateWidget:function(a){const{onChange:r,options:o,registry:i}=a,n=t.getTemplate("BaseInputTemplate",i,o),l=e.useCallback((e=>r(e||void 0)),[r]);return m.default.createElement(n,{type:"date",...a,onChange:l})},DateTimeWidget:function(e){const{onChange:a,value:r,options:o,registry:i}=e,n=t.getTemplate("BaseInputTemplate",i,o);return m.default.createElement(n,{type:"datetime-local",...e,value:t.utcToLocal(r),onChange:e=>a(t.localToUTC(e))})},AltDateWidget:function(a){let{time:r=!1,disabled:o=!1,readonly:i=!1,autofocus:n=!1,options:l,id:s,registry:d,onBlur:c,onFocus:u,onChange:p,value:h}=a;const[f,g]=e.useReducer(((e,t)=>({...e,...t})),t.parseDateString(h,r));e.useEffect((()=>{h&&h!==t.toDateString(f,r)&&g(t.parseDateString(h,r))}),[h,f,r]),e.useEffect((()=>{(function(e){return Object.values(e).every((e=>-1!==e))})(f)&&p(t.toDateString(f,r))}),[f,r,p]);const y=e.useCallback(((e,t)=>{g({[e]:t})}),[]),S=e.useCallback((e=>{if(e.preventDefault(),o||i)return;const a=t.parseDateString((new Date).toJSON(),r);g(a)}),[o,i,r]),E=e.useCallback((e=>{e.preventDefault(),o||i||(g(t.parseDateString("",r)),p(void 0))}),[o,i,r,p]);return m.default.createElement("ul",{className:"list-inline"},function(e,t,a){void 0===a&&(a=[1900,(new Date).getFullYear()+2]);const{year:r,month:o,day:i,hour:n,minute:l,second:s}=e,d=[{type:"year",range:a,value:r},{type:"month",range:[1,12],value:o},{type:"day",range:[1,31],value:i}];return t&&d.push({type:"hour",range:[0,23],value:n},{type:"minute",range:[0,59],value:l},{type:"second",range:[0,59],value:s}),d}(f,r,l.yearsRange).map(((e,t)=>m.default.createElement("li",{key:t},m.default.createElement(U,{rootId:s,select:y,...e,disabled:o,readonly:i,registry:d,onBlur:c,onFocus:u,autofocus:n&&0===t})))),("undefined"===l.hideNowButton||!l.hideNowButton)&&m.default.createElement("li",null,m.default.createElement("a",{href:"#",className:"btn btn-info btn-now",onClick:S},"Now")),("undefined"===l.hideClearButton||!l.hideClearButton)&&m.default.createElement("li",null,m.default.createElement("a",{href:"#",className:"btn btn-warning btn-clear",onClick:E},"Clear")))},AltDateTimeWidget:function(e){let{time:t=!0,...a}=e;const{AltDateWidget:r}=a.registry.widgets;return m.default.createElement(r,{time:t,...a})},EmailWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"email",...e})},URLWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"url",...e})},TextareaWidget:M,HiddenWidget:function(e){let{id:t,value:a}=e;return m.default.createElement("input",{type:"hidden",id:t,name:t,value:void 0===a?"":a})},ColorWidget:function(e){const{disabled:a,readonly:r,options:o,registry:i}=e,n=t.getTemplate("BaseInputTemplate",i,o);return m.default.createElement(n,{type:"color",...e,disabled:a||r})},FileWidget:function(t){let{multiple:a,id:r,readonly:o,disabled:i,onChange:n,value:l,autofocus:s=!1,options:d}=t;const c=e.useMemo((()=>Array.isArray(l)?R(l):R([l])),[l]),[u,p]=e.useState(c),h=e.useCallback((e=>{var t;e.target.files&&(t=e.target.files,Promise.all(Array.from(t).map(P))).then((e=>{p(e);const t=e.map((e=>e.dataURL));n(a?t:t[0])}))}),[a,n]);return m.default.createElement("div",null,m.default.createElement("p",null,m.default.createElement("input",{id:r,name:r,type:"file",disabled:o||i,onChange:h,defaultValue:"",autoFocus:s,multiple:a,accept:d.accept?String(d.accept):void 0})),m.default.createElement(_,{filesInfo:u}))},CheckboxWidget:function(a){let{schema:r,uiSchema:o,options:i,id:n,value:l,disabled:s,readonly:d,label:c,autofocus:u=!1,onBlur:p,onFocus:h,onChange:f,registry:g}=a;const y=t.getTemplate("DescriptionFieldTemplate",g,i),S=t.schemaRequiresTrueValue(r),E=e.useCallback((e=>f(e.target.checked)),[f]),b=e.useCallback((e=>p(n,e.target.checked)),[p,n]),v=e.useCallback((e=>h(n,e.target.checked)),[h,n]);return m.default.createElement("div",{className:"checkbox "+(s||d?"disabled":"")},r.description&&m.default.createElement(y,{id:n+"__description",description:r.description,schema:r,uiSchema:o,registry:g}),m.default.createElement("label",null,m.default.createElement("input",{type:"checkbox",id:n,name:n,checked:void 0!==l&&l,required:S,disabled:s||d,autoFocus:u,onChange:E,onBlur:b,onFocus:v}),m.default.createElement("span",null,c)))},CheckboxesWidget:function(e){let{id:t,disabled:a,options:{inline:r=!1,enumOptions:o,enumDisabled:i},value:n,autofocus:l=!1,readonly:s,onChange:d}=e;return m.default.createElement("div",{className:"checkboxes",id:t},Array.isArray(o)&&o.map(((e,c)=>{const u=-1!==n.indexOf(e.value),p=Array.isArray(i)&&-1!=i.indexOf(e.value),h=a||p||s?"disabled":"",f=m.default.createElement("span",null,m.default.createElement("input",{type:"checkbox",id:t+"-"+e.value,name:t,checked:u,disabled:a||p||s,autoFocus:l&&0===c,onChange:t=>{const a=o.map((e=>{let{value:t}=e;return t}));d(t.target.checked?function(e,t,a){const r=a.indexOf(e);return t.slice(0,r).concat(e,t.slice(r)).sort(((e,t)=>Number(a.indexOf(e)>a.indexOf(t))))}(e.value,n,a):function(e,t){return t.filter((t=>t!==e))}(e.value,n))}}),m.default.createElement("span",null,e.label));return r?m.default.createElement("label",{key:e.value,className:"checkbox-inline "+h},f):m.default.createElement("div",{key:e.value,className:"checkbox "+h},m.default.createElement("label",null,f))})))}};function W(){return{fields:A,templates:B,widgets:K,rootSchema:{},formContext:{}}}class j extends e.Component{constructor(e){if(super(e),this.formElement=void 0,this.getUsedFormData=(e,t)=>{if(0===t.length&&"object"!=typeof e)return e;const a=p.default(e,t);return Array.isArray(e)?Object.keys(a).map((e=>a[e])):a},this.getFieldNames=(e,a)=>{const r=function(e,o,i){return void 0===o&&(o=[]),void 0===i&&(i=[""]),Object.keys(e).forEach((n=>{if("object"==typeof e[n]){const a=i.map((e=>e+"."+n));e[n][t.RJSF_ADDITONAL_PROPERTIES_FLAG]&&""!==e[n][t.NAME_KEY]?o.push(e[n][t.NAME_KEY]):r(e[n],o,a)}else n===t.NAME_KEY&&""!==e[n]&&i.forEach((e=>{e=e.replace(/^\./,"");const t=h.default(a,e);("object"!=typeof t||f.default(t))&&o.push(e)}))})),o};return r(e)},this.onChange=(e,a,r)=>{const{extraErrors:o,omitExtraData:i,liveOmit:n,noValidate:l,liveValidate:s,onChange:d}=this.props,{schemaUtils:c,schema:u}=this.state;(t.isObject(e)||Array.isArray(e))&&(e=this.getStateFromProps(this.props,e).formData);const m=!l&&s;let p={formData:e,schema:u},h=e;if(!0===i&&!0===n){const t=c.retrieveSchema(u,e),a=c.toPathSchema(t,"",e),r=this.getFieldNames(a,e);h=this.getUsedFormData(e,r),p={formData:h}}if(m){const e=this.validate(h);let t=e.errors,a=e.errorSchema;const r=t,i=a;if(o){const r=c.mergeValidationData(e,o);a=r.errorSchema,t=r.errors}p={formData:h,errors:t,errorSchema:a,schemaValidationErrors:r,schemaValidationErrorSchema:i}}else if(!l&&a){const e=o?t.mergeObjects(a,o,!0):a;p={formData:h,errorSchema:e,errors:c.getValidator().toErrorList(e)}}this.setState(p,(()=>d&&d({...this.state,...p},r)))},this.onBlur=(e,t)=>{const{onBlur:a}=this.props;a&&a(e,t)},this.onFocus=(e,t)=>{const{onFocus:a}=this.props;a&&a(e,t)},this.onSubmit=e=>{if(e.preventDefault(),e.target!==e.currentTarget)return;e.persist();const{omitExtraData:t,extraErrors:a,noValidate:r,onSubmit:o}=this.props;let{formData:i}=this.state;const{schema:n,schemaUtils:l}=this.state;if(!0===t){const e=l.retrieveSchema(n,i),t=l.toPathSchema(e,"",i),a=this.getFieldNames(t,i);i=this.getUsedFormData(i,a)}if(r||this.validateForm()){const t=a||{},r=a?l.getValidator().toErrorList(a):[];this.setState({formData:i,errors:r,errorSchema:t,schemaValidationErrors:[],schemaValidationErrorSchema:{}},(()=>{o&&o({...this.state,formData:i,status:"submitted"},e)}))}},!e.validator)throw new Error("A validator is required for Form functionality to work");this.state=this.getStateFromProps(e,e.formData),this.props.onChange&&!t.deepEquals(this.state.formData,this.props.formData)&&this.props.onChange(this.state),this.formElement=m.default.createRef()}UNSAFE_componentWillReceiveProps(e){const a=this.getStateFromProps(e,e.formData);t.deepEquals(a.formData,e.formData)||t.deepEquals(a.formData,this.state.formData)||!e.onChange||e.onChange(a),this.setState(a)}getStateFromProps(e,a){const r=this.state||{},o="schema"in e?e.schema:this.props.schema,i=("uiSchema"in e?e.uiSchema:this.props.uiSchema)||{},n=void 0!==a,l=n&&!e.noValidate&&("liveValidate"in e?e.liveValidate:this.props.liveValidate),s=o;let d=r.schemaUtils;d&&!d.doesSchemaUtilsDiffer(e.validator,s)||(d=t.createSchemaUtils(e.validator,s));const c=d.getDefaultFormState(o,a),u=d.retrieveSchema(o,c);let m,p,h=r.schemaValidationErrors,f=r.schemaValidationErrorSchema;if(l){const e=this.validate(c,o,d);m=e.errors,p=e.errorSchema,h=m,f=p}else{const t=e.noValidate?{errors:[],errorSchema:{}}:e.liveValidate?{errors:r.errors||[],errorSchema:r.errorSchema||{}}:{errors:r.schemaValidationErrors||[],errorSchema:r.schemaValidationErrorSchema||{}};m=t.errors,p=t.errorSchema}if(e.extraErrors){const t=d.mergeValidationData({errorSchema:p,errors:m},e.extraErrors);p=t.errorSchema,m=t.errors}const g=d.toIdSchema(u,i["ui:rootFieldId"],c,e.idPrefix,e.idSeparator);return{schemaUtils:d,schema:o,uiSchema:i,idSchema:g,formData:c,edit:n,errors:m,errorSchema:p,schemaValidationErrors:h,schemaValidationErrorSchema:f}}shouldComponentUpdate(e,a){return t.shouldRender(this,e,a)}validate(e,t,a){void 0===t&&(t=this.props.schema);const r=a||this.state.schemaUtils,{customValidate:o,transformErrors:i}=this.props,n=r.retrieveSchema(t,e);return r.getValidator().validateFormData(e,n,o,i)}renderErrors(e){const{errors:a,errorSchema:r,schema:o,uiSchema:i}=this.state,{showErrorList:n,formContext:l}=this.props,s=t.getUiOptions(i),d=t.getTemplate("ErrorListTemplate",e,s);return a&&a.length&&0!=n?m.default.createElement(d,{errors:a,errorSchema:r||{},schema:o,uiSchema:i,formContext:l}):null}getRegistry(){var e;const{schemaUtils:t}=this.state,{fields:a,templates:r,widgets:o,formContext:i}=W();return{fields:{...a,...this.props.fields},templates:{...r,...this.props.templates,ButtonTemplates:{...r.ButtonTemplates,...null===(e=this.props.templates)||void 0===e?void 0:e.ButtonTemplates}},widgets:{...o,...this.props.widgets},rootSchema:this.props.schema,formContext:this.props.formContext||i,schemaUtils:t}}submit(){this.formElement.current&&(this.formElement.current.dispatchEvent(new CustomEvent("submit",{cancelable:!0})),this.formElement.current.requestSubmit())}validateForm(){const{extraErrors:e,onError:t}=this.props,{formData:a}=this.state,{schemaUtils:r}=this.state,o=this.validate(a);let i=o.errors,n=o.errorSchema;const l=i,s=n;if(i.length>0){if(e){const t=r.mergeValidationData(o,e);n=t.errorSchema,i=t.errors}return this.setState({errors:i,errorSchema:n,schemaValidationErrors:l,schemaValidationErrorSchema:s},(()=>{t?t(i):console.error("Form validation failed",i)})),!1}return!0}render(){const{children:e,id:t,idPrefix:a,idSeparator:r,className:o="",tagName:i,name:n,method:l,target:s,action:d,autoComplete:c,enctype:u,acceptcharset:p,noHtml5Validate:h=!1,disabled:f=!1,readonly:g=!1,formContext:y,_internalFormWrapper:S}=this.props,{schema:E,uiSchema:b,formData:v,errorSchema:C,idSchema:F}=this.state,D=this.getRegistry(),{SchemaField:x}=D.fields,{SubmitButton:k}=D.templates.ButtonTemplates;return m.default.createElement(S||i||"form",{className:o||"rjsf",id:t,name:n,method:l,target:s,action:d,autoComplete:c,encType:u,acceptCharset:p,noValidate:h,onSubmit:this.onSubmit,as:S?i:void 0,ref:this.formElement},this.renderErrors(D),m.default.createElement(x,{name:"",schema:E,uiSchema:b,errorSchema:C,idSchema:F,idPrefix:a,idSeparator:r,formContext:y,formData:v,onChange:this.onChange,onBlur:this.onBlur,onFocus:this.onFocus,registry:D,disabled:f,readonly:g}),e||m.default.createElement(k,{uiSchema:b}))}}exports.default=j,exports.getDefaultRegistry=W,exports.withTheme=function(t){return e.forwardRef(((e,a)=>{var r,o;let{fields:i,widgets:n,templates:l,...s}=e;return i={...t.fields,...i},n={...t.widgets,...n},l={...t.templates,...l,ButtonTemplates:{...null==t||null===(r=t.templates)||void 0===r?void 0:r.ButtonTemplates,...null===(o=l)||void 0===o?void 0:o.ButtonTemplates}},m.default.createElement(j,{...t,...s,fields:i,widgets:n,templates:l,ref:a})}))};
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("react"),t=require("@rjsf/utils"),a=require("lodash/pick"),r=require("lodash/get"),o=require("lodash/isEmpty"),i=require("lodash/isObject"),n=require("lodash/set"),l=require("nanoid"),s=require("lodash/unset"),d=require("lodash/has"),c=require("lodash/omit");function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var m=u(e),p=u(a),h=u(r),f=u(o),g=u(i),y=u(n),S=u(s),E=u(d),b=u(c);function v(){return l.nanoid()}function C(e){return Array.isArray(e)?e.map((e=>({key:v(),item:e}))):[]}function F(e){return Array.isArray(e)?e.map((e=>e.item)):[]}class D extends e.Component{constructor(e){super(e),this.onOptionChange=e=>{const a=parseInt(e,10),{formData:r,onChange:o,options:i,registry:n}=this.props,{schemaUtils:l}=n,s=l.retrieveSchema(i[a],r);let d;if("object"===t.guessType(r)&&("object"===s.type||s.properties)){d=Object.assign({},r);const e=i.slice();e.splice(a,1);for(const t of e)if(t.properties)for(const e in t.properties)e in d&&S.default(d,e)}o(l.getDefaultFormState(i[a],d),void 0,this.getFieldId()),this.setState({selectedOption:parseInt(e,10)})};const{formData:a,options:r}=this.props;this.state={selectedOption:this.getMatchingOption(0,a,r)}}componentDidUpdate(e,a){const{formData:r,options:o,idSchema:i}=this.props,{selectedOption:n}=this.state;if(!t.deepEquals(r,e.formData)&&i.$id===e.idSchema.$id){const e=this.getMatchingOption(n,r,o);if(!a||e===n)return;this.setState({selectedOption:e})}}getMatchingOption(e,t,a){const{schemaUtils:r}=this.props.registry,o=r.getMatchingOption(t,a);return 0!==o?o:e||0}getFieldId(){const{idSchema:e,schema:t}=this.props;return e.$id+(t.oneOf?"__oneof_select":"__anyof_select")}render(){const{name:e,baseType:a,disabled:r=!1,readonly:o=!1,hideError:i=!1,errorSchema:n={},formData:l,formContext:s,idPrefix:d,idSeparator:c,idSchema:u,onBlur:p,onChange:h,onFocus:f,options:g,registry:y,uiSchema:S}=this.props,{widgets:E,fields:b}=y,{SchemaField:v}=b,{selectedOption:C}=this.state,{widget:F="select",...D}=t.getUiOptions(S),x=t.getWidget({type:"number"},F,E),k=g[C]||null;let T;k&&(T=k.type?k:Object.assign({},k,{type:a}));const N=g.map(((e,t)=>({label:e.title||"Option "+(t+1),value:t})));return m.default.createElement("div",{className:"panel panel-default panel-body"},m.default.createElement("div",{className:"form-group"},m.default.createElement(x,{id:this.getFieldId(),schema:{type:"number",default:0},onChange:this.onOptionChange,onBlur:p,onFocus:f,value:C,options:{enumOptions:N},registry:y,formContext:s,...D,label:""})),null!==k&&m.default.createElement(v,{name:e,schema:T,uiSchema:S,errorSchema:n,idSchema:u,idPrefix:d,idSeparator:c,formData:l,formContext:s,onChange:h,onBlur:p,onFocus:f,registry:y,disabled:r,readonly:o,hideError:i}))}}const x=/\.([0-9]*0)*$/,k=/[0.]0*$/,T={array:"ArrayField",boolean:"BooleanField",integer:"NumberField",number:"NumberField",object:"ObjectField",string:"StringField",null:"NullField"};function N(e){const{schema:a,idSchema:r,uiSchema:o,formData:i,errorSchema:n,idPrefix:l,idSeparator:s,name:d,onChange:c,onKeyChange:u,onDropPropertyClick:p,required:h,registry:f,wasPropertyKeyModified:y=!1}=e,{formContext:S,schemaUtils:E}=f,v=t.getUiOptions(o),C=t.getTemplate("FieldTemplate",f,v),F=t.getTemplate("DescriptionFieldTemplate",f,v),D=t.getTemplate("FieldHelpTemplate",f,v),x=t.getTemplate("FieldErrorTemplate",f,v),k=E.retrieveSchema(a,i),N=r[t.ID_KEY],A=t.mergeObjects(E.toIdSchema(k,N,i,l,s),r),w=m.default.useCallback(((e,t,a)=>c(e,t,a||N)),[N,c]),O=function(e,a,r,o){const i=a.field,{fields:n}=o;if("function"==typeof i)return i;if("string"==typeof i&&i in n)return n[i];const l=t.getSchemaType(e),s=Array.isArray(l)?l[0]:l||"",d=T[s];return d||!e.anyOf&&!e.oneOf?d in n?n[d]:()=>{const i=t.getTemplate("UnsupportedFieldTemplate",o,a);return m.default.createElement(i,{schema:e,idSchema:r,reason:"Unknown field type "+e.type,registry:o})}:()=>null}(k,v,A,f),B=Boolean(e.disabled||v.disabled),I=Boolean(e.readonly||v.readonly||e.schema.readOnly||k.readOnly),U=v.hideError,q=void 0===U?e.hideError:Boolean(U),P=Boolean(e.autofocus||v.autofocus);if(0===Object.keys(k).length)return null;const _=E.getDisplayLabel(k,o),{__errors:R,...V}=n||{},M=b.default(o,["ui:classNames","classNames"]);"ui:options"in M&&(M["ui:options"]=b.default(M["ui:options"],["classNames"]));const K=m.default.createElement(O,{...e,onChange:w,idSchema:A,schema:k,uiSchema:M,disabled:B,readonly:I,hideError:q,autofocus:P,errorSchema:V,formContext:S,rawErrors:R}),W=A[t.ID_KEY];let j;j=y||t.ADDITIONAL_PROPERTY_FLAG in k?d:v.title||e.schema.title||k.title||d;const L=v.description||e.schema.description||k.description||"",$=v.help,Y="hidden"===v.widget,z=["form-group","field","field-"+k.type];!q&&R&&R.length>0&&z.push("field-error has-error has-danger"),null!=o&&o.classNames&&z.push(o.classNames),v.classNames&&z.push(v.classNames);const H=m.default.createElement(D,{help:$,idSchema:A,schema:k,uiSchema:o,hasErrors:!q&&R&&R.length>0,registry:f}),J=q?void 0:m.default.createElement(x,{errors:R,errorSchema:n,idSchema:A,schema:k,uiSchema:o,registry:f}),G={description:m.default.createElement(F,{id:W+"__description",description:L,schema:k,uiSchema:o,registry:f}),rawDescription:L,help:H,rawHelp:"string"==typeof $?$:void 0,errors:J,rawErrors:q?void 0:R,id:W,label:j,hidden:Y,onChange:c,onKeyChange:u,onDropPropertyClick:p,required:h,disabled:B,readonly:I,hideError:q,displayLabel:_,classNames:z.join(" ").trim(),formContext:S,formData:i,schema:k,uiSchema:o,registry:f},Q=f.fields.AnyOfField,X=f.fields.OneOfField;return m.default.createElement(C,{...G},m.default.createElement(m.default.Fragment,null,K,k.anyOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&m.default.createElement(Q,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.anyOf.map((e=>E.retrieveSchema(g.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o}),k.oneOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&m.default.createElement(X,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.oneOf.map((e=>E.retrieveSchema(g.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o})))}const A={AnyOfField:D,ArrayField:class extends e.Component{constructor(e){super(e),this._getNewFormDataRow=()=>{const{schema:e,registry:a}=this.props,{schemaUtils:r}=a;let o=e.items;return t.isFixedItems(e)&&t.allowAdditionalItems(e)&&(o=e.additionalItems),r.getDefaultFormState(o)},this.onAddClick=e=>{e&&e.preventDefault();const{onChange:t}=this.props,{keyedFormData:a}=this.state,r=[...a,{key:v(),item:this._getNewFormDataRow()}];this.setState({keyedFormData:r,updatedKeyedFormData:!0},(()=>t(F(r))))},this.onAddIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a}=this.props,{keyedFormData:r}=this.state,o={key:v(),item:this._getNewFormDataRow()},i=[...r];i.splice(e,0,o),this.setState({keyedFormData:i,updatedKeyedFormData:!0},(()=>a(F(i))))},this.onDropIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a,errorSchema:r}=this.props,{keyedFormData:o}=this.state;let i;if(r){i={};for(const t in r){const a=parseInt(t);a<e?y.default(i,[a],r[t]):a>e&&y.default(i,[a-1],r[t])}}const n=o.filter(((t,a)=>a!==e));this.setState({keyedFormData:n,updatedKeyedFormData:!0},(()=>a(F(n),i)))},this.onReorderClick=(e,t)=>a=>{a&&(a.preventDefault(),a.currentTarget.blur());const{onChange:r,errorSchema:o}=this.props;let i;if(this.props.errorSchema){i={};for(const a in o){const r=parseInt(a);r==e?y.default(i,[t],o[e]):r==t?y.default(i,[e],o[t]):y.default(i,[a],o[r])}}const{keyedFormData:n}=this.state,l=function(){const a=n.slice();return a.splice(e,1),a.splice(t,0,n[e]),a}();this.setState({keyedFormData:l},(()=>r(F(l),i)))},this.onChangeForIndex=e=>(t,a,r)=>{const{formData:o,onChange:i,errorSchema:n}=this.props;i((Array.isArray(o)?o:[]).map(((a,r)=>e===r?void 0===t?null:t:a)),n&&n&&{...n,[e]:a},r)},this.onSelectChange=e=>{const{onChange:t,idSchema:a}=this.props;t(e,void 0,a&&a.$id)};const{formData:a=[]}=e,r=C(a);this.state={keyedFormData:r,updatedKeyedFormData:!1}}static getDerivedStateFromProps(e,t){if(t.updatedKeyedFormData)return{updatedKeyedFormData:!1};const a=Array.isArray(e.formData)?e.formData:[],r=t.keyedFormData||[];return{keyedFormData:a.length===r.length?r.map(((e,t)=>({key:e.key,item:a[t]}))):C(a)}}get itemTitle(){const{schema:e}=this.props;return h.default(e,[t.ITEMS_KEY,"title"],h.default(e,[t.ITEMS_KEY,"description"],"Item"))}isItemRequired(e){return Array.isArray(e.type)?!e.type.includes("null"):"null"!==e.type}canAddItem(e){const{schema:a,uiSchema:r}=this.props;let{addable:o}=t.getUiOptions(r);return!1!==o&&(o=void 0===a.maxItems||e.length<a.maxItems),o}render(){const{schema:e,uiSchema:a,idSchema:r,registry:o}=this.props,{schemaUtils:i}=o;if(!(t.ITEMS_KEY in e)){const i=t.getUiOptions(a),n=t.getTemplate("UnsupportedFieldTemplate",o,i);return m.default.createElement(n,{schema:e,idSchema:r,reason:"Missing items definition",registry:o})}return i.isMultiSelect(e)?this.renderMultiSelect():t.isCustomWidget(a)?this.renderCustomWidget():t.isFixedItems(e)?this.renderFixedArray():i.isFilesArray(e,a)?this.renderFiles():this.renderNormalArray()}renderNormalArray(){const{schema:e,uiSchema:a={},errorSchema:r,idSchema:o,name:i,disabled:n=!1,readonly:l=!1,autofocus:s=!1,required:d=!1,registry:c,onBlur:u,onFocus:p,idPrefix:h,idSeparator:f="_",rawErrors:y}=this.props,{keyedFormData:S}=this.state,E=void 0===e.title?i:e.title,{schemaUtils:b,formContext:v}=c,C=t.getUiOptions(a),D=g.default(e.items)?e.items:{},x=b.retrieveSchema(D),k=F(this.state.keyedFormData),T={canAdd:this.canAddItem(k),items:S.map(((e,t)=>{const{key:n,item:l}=e,d=l,c=b.retrieveSchema(D,d),m=r?r[t]:void 0,g=b.toIdSchema(c,o.$id+f+t,d,h,f);return this.renderArrayFieldItem({key:n,index:t,name:i&&i+"-"+t,canMoveUp:t>0,canMoveDown:t<k.length-1,itemSchema:c,itemIdSchema:g,itemErrorSchema:m,itemData:d,itemUiSchema:a.items,autofocus:s&&0===t,onBlur:u,onFocus:p,rawErrors:y})})),className:"field field-array field-array-of-"+x.type,disabled:n,idSchema:o,uiSchema:a,onAddClick:this.onAddClick,readonly:l,required:d,schema:e,title:E,formContext:v,formData:k,rawErrors:y,registry:c},N=t.getTemplate("ArrayFieldTemplate",c,C);return m.default.createElement(N,{...T})}renderCustomWidget(){const{schema:e,idSchema:a,uiSchema:r,disabled:o=!1,readonly:i=!1,autofocus:n=!1,required:l=!1,hideError:s,placeholder:d,onBlur:c,onFocus:u,formData:p=[],registry:h,rawErrors:f,name:g}=this.props,{widgets:y,formContext:S}=h,E=e.title||g,{widget:b,...v}=t.getUiOptions(r),C=t.getWidget(e,b,y);return m.default.createElement(C,{id:a&&a.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:v,schema:e,uiSchema:r,registry:h,value:p,disabled:o,readonly:i,hideError:s,required:l,label:E,placeholder:d,formContext:S,autofocus:n,rawErrors:f})}renderMultiSelect(){const{schema:e,idSchema:a,uiSchema:r,formData:o=[],disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,placeholder:d,onBlur:c,onFocus:u,registry:p,rawErrors:h,name:f}=this.props,{widgets:g,schemaUtils:y,formContext:S}=p,E=y.retrieveSchema(e.items,o),b=e.title||f,v=t.optionsList(E),{widget:C="select",...F}=t.getUiOptions(r),D=t.getWidget(e,C,g);return m.default.createElement(D,{id:a&&a.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:{...F,enumOptions:v},schema:e,uiSchema:r,registry:p,value:o,disabled:i,readonly:n,required:s,label:b,placeholder:d,formContext:S,autofocus:l,rawErrors:h})}renderFiles(){const{schema:e,uiSchema:a,idSchema:r,name:o,disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,onBlur:d,onFocus:c,registry:u,formData:p=[],rawErrors:h}=this.props,f=e.title||o,{widgets:g,formContext:y}=u,{widget:S="files",...E}=t.getUiOptions(a),b=t.getWidget(e,S,g);return m.default.createElement(b,{options:E,id:r&&r.$id,multiple:!0,onChange:this.onSelectChange,onBlur:d,onFocus:c,schema:e,uiSchema:a,title:f,value:p,disabled:i,readonly:n,required:s,registry:u,formContext:y,autofocus:l,rawErrors:h,label:""})}renderFixedArray(){const{schema:e,uiSchema:a={},formData:r=[],errorSchema:o,idPrefix:i,idSeparator:n="_",idSchema:l,name:s,disabled:d=!1,readonly:c=!1,autofocus:u=!1,required:p=!1,registry:h,onBlur:f,onFocus:y,rawErrors:S}=this.props,{keyedFormData:E}=this.state;let{formData:b=[]}=this.props;const v=e.title||s,C=t.getUiOptions(a),{schemaUtils:F,formContext:D}=h,x=(g.default(e.items)?e.items:[]).map(((e,t)=>F.retrieveSchema(e,r[t]))),k=g.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,r):null;(!b||b.length<x.length)&&(b=b||[],b=b.concat(new Array(x.length-b.length)));const T={canAdd:this.canAddItem(b)&&!!k,className:"field field-array field-array-fixed-items",disabled:d,idSchema:l,formData:r,items:E.map(((t,r)=>{const{key:d,item:c}=t,m=c,p=r>=x.length,h=p&&g.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,m):x[r],E=F.toIdSchema(h,l.$id+n+r,m,i,n),v=p?a.additionalItems||{}:Array.isArray(a.items)?a.items[r]:a.items||{};return this.renderArrayFieldItem({key:d,index:r,name:s&&s+"-"+r,canRemove:p,canMoveUp:r>=x.length+1,canMoveDown:p&&r<b.length-1,itemSchema:h,itemData:m,itemUiSchema:v,itemIdSchema:E,itemErrorSchema:o?o[r]:void 0,autofocus:u&&0===r,onBlur:f,onFocus:y,rawErrors:S})})),onAddClick:this.onAddClick,readonly:c,required:p,registry:h,schema:e,uiSchema:a,title:v,formContext:D,rawErrors:S},N=t.getTemplate("ArrayFieldTemplate",h,C);return m.default.createElement(N,{...T})}renderArrayFieldItem(e){const{key:a,index:r,name:o,canRemove:i=!0,canMoveUp:n=!0,canMoveDown:l=!0,itemSchema:s,itemData:d,itemUiSchema:c,itemIdSchema:u,itemErrorSchema:p,autofocus:h,onBlur:f,onFocus:g,rawErrors:y}=e,{disabled:S,hideError:E,idPrefix:b,idSeparator:v,readonly:C,uiSchema:F,registry:D,formContext:x}=this.props,{fields:{ArraySchemaField:k,SchemaField:T}}=D,N=k||T,{orderable:A=!0,removable:w=!0}=t.getUiOptions(F),O={moveUp:A&&n,moveDown:A&&l,remove:w&&i,toolbar:!1};return O.toolbar=Object.keys(O).some((e=>O[e])),{children:m.default.createElement(N,{name:o,index:r,schema:s,uiSchema:c,formData:d,formContext:x,errorSchema:p,idPrefix:b,idSeparator:v,idSchema:u,required:this.isItemRequired(s),onChange:this.onChangeForIndex(r),onBlur:f,onFocus:g,registry:D,disabled:S,readonly:C,hideError:E,autofocus:h,rawErrors:y}),className:"array-item",disabled:S,hasToolbar:O.toolbar,hasMoveUp:O.moveUp,hasMoveDown:O.moveDown,hasRemove:O.remove,index:r,key:a,onAddIndexClick:this.onAddIndexClick,onDropIndexClick:this.onDropIndexClick,onReorderClick:this.onReorderClick,readonly:C,registry:D,uiSchema:c}}},BooleanField:function(e){const{schema:a,name:r,uiSchema:o,idSchema:i,formData:n,registry:l,required:s,disabled:d,readonly:c,autofocus:u,onChange:p,onFocus:h,onBlur:f,rawErrors:y}=e,{title:S}=a,{widgets:E,formContext:b}=l,{widget:v="checkbox",...C}=t.getUiOptions(o),F=t.getWidget(a,v,E);let D;if(Array.isArray(a.oneOf))D=t.optionsList({oneOf:a.oneOf.map((e=>{if(g.default(e))return{...e,title:e.title||(!0===e.const?"Yes":"No")}})).filter((e=>e))});else{var x;const e=a,r=null!=(x=a.enum)?x:[!0,!1];D=!e.enumNames&&2===r.length&&r.every((e=>"boolean"==typeof e))?[{value:r[0],label:r[0]?"Yes":"No"},{value:r[1],label:r[1]?"Yes":"No"}]:t.optionsList({enum:r,enumNames:e.enumNames})}return m.default.createElement(F,{options:{...C,enumOptions:D},schema:a,uiSchema:o,id:i&&i.$id,onChange:p,onFocus:h,onBlur:f,label:void 0===S?r:S,value:n,required:s,disabled:d,readonly:c,registry:l,formContext:b,autofocus:u,rawErrors:y})},NumberField:function(a){const{registry:r,onChange:o,formData:i,value:n}=a,[l,s]=e.useState(n),{StringField:d}=r.fields;let c=i;const u=e.useCallback((e=>{s(e),"."===(""+e).charAt(0)&&(e="0"+e);const a="string"==typeof e&&e.match(x)?t.asNumber(e.replace(k,"")):t.asNumber(e);o(a)}),[o]);if("string"==typeof l&&"number"==typeof c){const e=new RegExp((""+c).replace(".","\\.")+"\\.?0*$");l.match(e)&&(c=l)}return m.default.createElement(d,{...a,formData:c,onChange:u})},ObjectField:class extends e.Component{constructor(){var e;super(...arguments),e=this,this.state={wasPropertyKeyModified:!1,additionalProperties:{}},this.onPropertyChange=function(t,a){return void 0===a&&(a=!1),(r,o,i)=>{const{formData:n,onChange:l,errorSchema:s}=e.props;void 0===r&&a&&(r=""),l({...n,[t]:r},s&&s&&{...s,[t]:o},i)}},this.onDropPropertyClick=e=>t=>{t.preventDefault();const{onChange:a,formData:r}=this.props,o={...r};S.default(o,e),a(o)},this.getAvailableKey=(e,a)=>{const{uiSchema:r}=this.props,{duplicateKeySuffixSeparator:o="-"}=t.getUiOptions(r);let i=0,n=e;for(;n in a;)n=""+e+o+ ++i;return n},this.onKeyChange=e=>(t,a)=>{if(e===t)return;const{formData:r,onChange:o,errorSchema:i}=this.props;t=this.getAvailableKey(t,r);const n={...r},l={[e]:t},s=Object.keys(n).map((e=>({[l[e]||e]:n[e]}))),d=Object.assign({},...s);this.setState({wasPropertyKeyModified:!0}),o(d,i&&i&&{...i,[t]:a})},this.handleAddClick=e=>()=>{if(!e.additionalProperties)return;const{formData:a,onChange:r,registry:o}=this.props,i={...a};let n;if(g.default(e.additionalProperties)&&(n=e.additionalProperties.type,t.REF_KEY in e.additionalProperties)){const{schemaUtils:r}=o;n=r.retrieveSchema({$ref:e.additionalProperties[t.REF_KEY]},a).type}const l=this.getAvailableKey("newKey",i);y.default(i,l,this.getDefaultValue(n)),r(i)}}isRequired(e){const{schema:t}=this.props;return Array.isArray(t.required)&&-1!==t.required.indexOf(e)}getDefaultValue(e){switch(e){case"string":default:return"New Value";case"array":return[];case"boolean":return!1;case"null":return null;case"number":return 0;case"object":return{}}}render(){const{schema:e,uiSchema:a={},formData:r,errorSchema:o,idSchema:i,name:n,required:l=!1,disabled:s=!1,readonly:d=!1,hideError:c,idPrefix:u,idSeparator:p,onBlur:f,onFocus:g,registry:y}=this.props,{fields:S,formContext:b,schemaUtils:v}=y,{SchemaField:C}=S,F=v.retrieveSchema(e,r),D=t.getUiOptions(a),{properties:x={}}=F,k=void 0===F.title?n:F.title,T=D.description||F.description;let N;try{const e=Object.keys(x);N=t.orderProperties(e,D.order)}catch(e){return m.default.createElement("div",null,m.default.createElement("p",{className:"config-error",style:{color:"red"}},"Invalid ",n||"root"," object field configuration:",m.default.createElement("em",null,e.message),"."),m.default.createElement("pre",null,JSON.stringify(F)))}const A=t.getTemplate("ObjectFieldTemplate",y,D),w={title:D.title||k,description:T,properties:N.map((e=>{const n=E.default(F,[t.PROPERTIES_KEY,e,t.ADDITIONAL_PROPERTY_FLAG]),S=n?a.additionalProperties:a[e],v="hidden"===t.getUiOptions(S).widget,D=h.default(i,[e],{});return{content:m.default.createElement(C,{key:e,name:e,required:this.isRequired(e),schema:h.default(F,[t.PROPERTIES_KEY,e],{}),uiSchema:S,errorSchema:h.default(o,e),idSchema:D,idPrefix:u,idSeparator:p,formData:h.default(r,e),formContext:b,wasPropertyKeyModified:this.state.wasPropertyKeyModified,onKeyChange:this.onKeyChange(e),onChange:this.onPropertyChange(e,n),onBlur:f,onFocus:g,registry:y,disabled:s,readonly:d,hideError:c,onDropPropertyClick:this.onDropPropertyClick}),name:e,readonly:d,disabled:s,required:l,hidden:v}})),readonly:d,disabled:s,required:l,idSchema:i,uiSchema:a,schema:F,formData:r,formContext:b,registry:y};return m.default.createElement(A,{...w,onAddClick:this.handleAddClick})}},OneOfField:D,SchemaField:class extends m.default.Component{shouldComponentUpdate(e){return!t.deepEquals(this.props,e)}render(){return m.default.createElement(N,{...this.props})}},StringField:function(e){const{schema:a,name:r,uiSchema:o,idSchema:i,formData:n,required:l,disabled:s=!1,readonly:d=!1,autofocus:c=!1,onChange:u,onBlur:p,onFocus:h,registry:f,rawErrors:g}=e,{title:y,format:S}=a,{widgets:E,formContext:b,schemaUtils:v}=f,C=v.isSelect(a)?t.optionsList(a):void 0;let F=C?"select":"text";S&&t.hasWidget(a,S,E)&&(F=S);const{widget:D=F,placeholder:x="",...k}=t.getUiOptions(o),T=t.getWidget(a,D,E);return m.default.createElement(T,{options:{...k,enumOptions:C},schema:a,uiSchema:o,id:i&&i.$id,label:void 0===y?r:y,value:n,onChange:u,onBlur:p,onFocus:h,required:l,disabled:s,readonly:d,formContext:b,autofocus:c,registry:f,placeholder:x,rawErrors:g})},NullField:function(t){const{formData:a,onChange:r}=t;return e.useEffect((()=>{void 0===a&&r(null)}),[a,r]),null}};function w(e){const{iconType:t="default",icon:a,className:r,uiSchema:o,...i}=e;return m.default.createElement("button",{type:"button",className:"btn btn-"+t+" "+r,...i},m.default.createElement("i",{className:"glyphicon glyphicon-"+a}))}function O(e){const{label:t,required:a,id:r}=e;return t?m.default.createElement("label",{className:"control-label",htmlFor:r},t,a&&m.default.createElement("span",{className:"required"},"*")):null}const B={ArrayFieldDescriptionTemplate:function(e){const{idSchema:a,description:r,registry:o,schema:i,uiSchema:n}=e,l=t.getUiOptions(n),{label:s=!0}=l;if(!r||!s)return null;const d=t.getTemplate("DescriptionFieldTemplate",o,l);return m.default.createElement(d,{id:a.$id+"__description",description:r,schema:i,uiSchema:n,registry:o})},ArrayFieldItemTemplate:function(e){const{children:t,className:a,disabled:r,hasToolbar:o,hasMoveDown:i,hasMoveUp:n,hasRemove:l,index:s,onDropIndexClick:d,onReorderClick:c,readonly:u,registry:p,uiSchema:h}=e,{MoveDownButton:f,MoveUpButton:g,RemoveButton:y}=p.templates.ButtonTemplates,S={flex:1,paddingLeft:6,paddingRight:6,fontWeight:"bold"};return m.default.createElement("div",{className:a},m.default.createElement("div",{className:o?"col-xs-9":"col-xs-12"},t),o&&m.default.createElement("div",{className:"col-xs-3 array-item-toolbox"},m.default.createElement("div",{className:"btn-group",style:{display:"flex",justifyContent:"space-around"}},(n||i)&&m.default.createElement(g,{style:S,disabled:r||u||!n,onClick:c(s,s-1),uiSchema:h}),(n||i)&&m.default.createElement(f,{style:S,disabled:r||u||!i,onClick:c(s,s+1),uiSchema:h}),l&&m.default.createElement(y,{style:S,disabled:r||u,onClick:d(s),uiSchema:h}))))},ArrayFieldTemplate:function(e){const{canAdd:a,className:r,disabled:o,idSchema:i,uiSchema:n,items:l,onAddClick:s,readonly:d,registry:c,required:u,schema:p,title:h}=e,f=t.getUiOptions(n),g=t.getTemplate("ArrayFieldDescriptionTemplate",c,f),y=t.getTemplate("ArrayFieldItemTemplate",c,f),S=t.getTemplate("ArrayFieldTitleTemplate",c,f),{ButtonTemplates:{AddButton:E}}=c.templates;return m.default.createElement("fieldset",{className:r,id:i.$id},m.default.createElement(S,{idSchema:i,title:f.title||h,required:u,schema:p,uiSchema:n,registry:c}),m.default.createElement(g,{idSchema:i,description:f.description||p.description,schema:p,uiSchema:n,registry:c}),m.default.createElement("div",{className:"row array-item-list"},l&&l.map((e=>{let{key:t,...a}=e;return m.default.createElement(y,{key:t,...a})}))),a&&m.default.createElement(E,{className:"array-item-add",onClick:s,disabled:o||d,uiSchema:n}))},ArrayFieldTitleTemplate:function(e){const{idSchema:a,title:r,schema:o,uiSchema:i,required:n,registry:l}=e,s=t.getUiOptions(i),{label:d=!0}=s;if(!r||!d)return null;const c=t.getTemplate("TitleFieldTemplate",l,s);return m.default.createElement(c,{id:a.$id+"__title",title:r,required:n,schema:o,uiSchema:i,registry:l})},ButtonTemplates:{SubmitButton:function(e){let{uiSchema:a}=e;const{submitText:r,norender:o,props:i={}}=t.getSubmitButtonOptions(a);return o?null:m.default.createElement("div",null,m.default.createElement("button",{type:"submit",...i,className:"btn btn-info "+i.className},r))},AddButton:function(e){let{className:t,onClick:a,disabled:r}=e;return m.default.createElement("div",{className:"row"},m.default.createElement("p",{className:"col-xs-3 col-xs-offset-9 text-right "+t},m.default.createElement(w,{iconType:"info",icon:"plus",className:"btn-add col-xs-12",title:"Add",onClick:a,disabled:r})))},MoveDownButton:function(e){return m.default.createElement(w,{title:"Move down",className:"array-item-move-down",...e,icon:"arrow-down"})},MoveUpButton:function(e){return m.default.createElement(w,{title:"Move up",className:"array-item-move-up",...e,icon:"arrow-up"})},RemoveButton:function(e){return m.default.createElement(w,{title:"Remove",className:"array-item-remove",...e,iconType:"danger",icon:"remove"})}},BaseInputTemplate:function(a){const{id:r,value:o,readonly:i,disabled:n,autofocus:l,onBlur:s,onFocus:d,onChange:c,options:u,schema:p,uiSchema:h,formContext:f,registry:g,rawErrors:y,type:S,...E}=a;if(!r)throw console.log("No id for",a),new Error("no id for props "+JSON.stringify(a));const b={...E,...t.getInputProps(p,S,u)};let v;v="number"===b.type||"integer"===b.type?o||0===o?o:"":null==o?"":o;const C=e.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?u.emptyValue:t)}),[c,u]),F=e.useCallback((e=>{let{target:{value:t}}=e;return s(r,t)}),[s,r]),D=e.useCallback((e=>{let{target:{value:t}}=e;return d(r,t)}),[d,r]);return m.default.createElement(m.default.Fragment,null,m.default.createElement("input",{id:r,name:r,className:"form-control",readOnly:i,disabled:n,autoFocus:l,value:v,...b,list:p.examples?"examples_"+r:void 0,onChange:C,onBlur:F,onFocus:D}),Array.isArray(p.examples)&&m.default.createElement("datalist",{key:"datalist_"+r,id:"examples_"+r},[...new Set(p.examples.concat(p.default?[p.default]:[]))].map((e=>m.default.createElement("option",{key:e,value:e})))))},DescriptionFieldTemplate:function(e){const{id:t,description:a}=e;return a?m.default.createElement("string"==typeof a?"p":"div",{id:t,className:"field-description"},a):null},ErrorListTemplate:function(e){let{errors:t}=e;return m.default.createElement("div",{className:"panel panel-danger errors"},m.default.createElement("div",{className:"panel-heading"},m.default.createElement("h3",{className:"panel-title"},"Errors")),m.default.createElement("ul",{className:"list-group"},t.map(((e,t)=>m.default.createElement("li",{key:t,className:"list-group-item text-danger"},e.stack)))))},FieldTemplate:function(e){const{id:a,label:r,children:o,errors:i,help:n,description:l,hidden:s,required:d,displayLabel:c,registry:u,uiSchema:p}=e,h=t.getUiOptions(p),f=t.getTemplate("WrapIfAdditionalTemplate",u,h);return s?m.default.createElement("div",{className:"hidden"},o):m.default.createElement(f,{...e},c&&m.default.createElement(O,{label:r,required:d,id:a}),c&&l?l:null,o,i,n)},FieldErrorTemplate:function(e){const{errors:t=[],idSchema:a}=e;return 0===t.length?null:m.default.createElement("div",null,m.default.createElement("ul",{id:a.$id+"__error",className:"error-detail bs-callout bs-callout-info"},t.filter((e=>!!e)).map(((e,t)=>m.default.createElement("li",{className:"text-danger",key:t},e)))))},FieldHelpTemplate:function(e){const{idSchema:t,help:a}=e;return a?m.default.createElement("string"==typeof a?"p":"div",{id:t.$id+"__help",className:"help-block"},a):null},ObjectFieldTemplate:function(e){const{description:a,disabled:r,formData:o,idSchema:i,onAddClick:n,properties:l,readonly:s,registry:d,required:c,schema:u,title:p,uiSchema:h}=e,f=t.getUiOptions(h),g=t.getTemplate("TitleFieldTemplate",d,f),y=t.getTemplate("DescriptionFieldTemplate",d,f),{ButtonTemplates:{AddButton:S}}=d.templates;return m.default.createElement("fieldset",{id:i.$id},(f.title||p)&&m.default.createElement(g,{id:i.$id+"__title",title:f.title||p,required:c,schema:u,uiSchema:h,registry:d}),(f.description||a)&&m.default.createElement(y,{id:i.$id+"__description",description:f.description||a,schema:u,uiSchema:h,registry:d}),l.map((e=>e.content)),t.canExpand(u,h,o)&&m.default.createElement(S,{className:"object-property-expand",onClick:n(u),disabled:r||s,uiSchema:h}))},TitleFieldTemplate:function(e){const{id:t,title:a,required:r}=e;return m.default.createElement("legend",{id:t},a,r&&m.default.createElement("span",{className:"required"},"*"))},UnsupportedFieldTemplate:function(e){const{schema:t,idSchema:a,reason:r}=e;return m.default.createElement("div",{className:"unsupported-field"},m.default.createElement("p",null,"Unsupported field schema",a&&a.$id&&m.default.createElement("span",null," for"," field ",m.default.createElement("code",null,a.$id)),r&&m.default.createElement("em",null,": ",r),"."),t&&m.default.createElement("pre",null,JSON.stringify(t,null,2)))},WrapIfAdditionalTemplate:function(e){const{id:a,classNames:r,disabled:o,label:i,onKeyChange:n,onDropPropertyClick:l,readonly:s,required:d,schema:c,children:u,uiSchema:p,registry:h}=e,{RemoveButton:f}=h.templates.ButtonTemplates;return m.default.createElement("div",{className:r},t.ADDITIONAL_PROPERTY_FLAG in c?m.default.createElement("div",{className:"row"},m.default.createElement("div",{className:"col-xs-5 form-additional"},m.default.createElement("div",{className:"form-group"},m.default.createElement(O,{label:i+" Key",required:d,id:a+"-key"}),m.default.createElement("input",{className:"form-control",type:"text",id:a+"-key",onBlur:e=>n(e.target.value),defaultValue:i}))),m.default.createElement("div",{className:"form-additional form-group col-xs-5"},u),m.default.createElement("div",{className:"col-xs-2"},m.default.createElement(f,{className:"array-item-remove btn-block",style:{border:"0"},disabled:o||s,onClick:l(i),uiSchema:p}))):u)}};function I(e,a){const r=[];for(let o=e;o<=a;o++)r.push({value:o,label:t.pad(o,2)});return r}function U(e){let{type:t,range:a,value:r,select:o,rootId:i,disabled:n,readonly:l,autofocus:s,registry:d,onBlur:c,onFocus:u}=e;const p=i+"_"+t,{SelectWidget:h}=d.widgets;return m.default.createElement(h,{schema:{type:"integer"},id:p,className:"form-control",options:{enumOptions:I(a[0],a[1])},placeholder:t,value:r,disabled:n,readonly:l,autofocus:s,onChange:e=>o(t,e),onBlur:c,onFocus:u,registry:d,label:""})}function q(e,t){return null===e?null:e.replace(";base64",";name="+encodeURIComponent(t)+";base64")}function P(e){const{name:t,size:a,type:r}=e;return new Promise(((o,i)=>{const n=new window.FileReader;n.onerror=i,n.onload=e=>{var i;"string"==typeof(null===(i=e.target)||void 0===i?void 0:i.result)?o({dataURL:q(e.target.result,t),name:t,size:a,type:r}):o({dataURL:null,name:t,size:a,type:r})},n.readAsDataURL(e)}))}function _(e){let{filesInfo:t}=e;return 0===t.length?null:m.default.createElement("ul",{className:"file-info"},t.map(((e,t)=>{const{name:a,size:r,type:o}=e;return m.default.createElement("li",{key:t},m.default.createElement("strong",null,a)," (",o,", ",r," bytes)")})))}function R(e){return e.filter((e=>void 0!==e)).map((e=>{const{blob:a,name:r}=t.dataURItoBlob(e);return{name:r,size:a.size,type:a.type}}))}function V(e,t){return t?Array.from(e.target.options).slice().filter((e=>e.selected)).map((e=>e.value)):e.target.value}function M(t){let{id:a,options:r={},placeholder:o,value:i,required:n,disabled:l,readonly:s,autofocus:d=!1,onChange:c,onBlur:u,onFocus:p}=t;const h=e.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?r.emptyValue:t)}),[c,r.emptyValue]),f=e.useCallback((e=>{let{target:{value:t}}=e;return u(a,t)}),[u,a]),g=e.useCallback((e=>{let{target:{value:t}}=e;return p(a,t)}),[a,p]);return m.default.createElement("textarea",{id:a,name:a,className:"form-control",value:i||"",placeholder:o,required:n,disabled:l,readOnly:s,autoFocus:d,rows:r.rows,onBlur:f,onFocus:g,onChange:h})}M.defaultProps={autofocus:!1,options:{}};const K={PasswordWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"password",...e})},RadioWidget:function(t){let{options:a,value:r,required:o,disabled:i,readonly:n,autofocus:l=!1,onBlur:s,onFocus:d,onChange:c,id:u}=t;const p=Math.random().toString(),{enumOptions:h,enumDisabled:f,inline:g}=a,y=e.useCallback((e=>s(u,e.target.value)),[s,u]),S=e.useCallback((e=>d(u,e.target.value)),[d,u]);return m.default.createElement("div",{className:"field-radio-group",id:u},Array.isArray(h)&&h.map(((e,t)=>{const a=e.value===r,s=Array.isArray(f)&&-1!=f.indexOf(e.value),d=i||s||n?"disabled":"",h=m.default.createElement("span",null,m.default.createElement("input",{type:"radio",id:u+"-"+e.value,checked:a,name:p,required:o,value:e.value,disabled:i||s||n,autoFocus:l&&0===t,onChange:()=>c(e.value),onBlur:y,onFocus:S}),m.default.createElement("span",null,e.label));return g?m.default.createElement("label",{key:e.value,className:"radio-inline "+d},h):m.default.createElement("div",{key:e.value,className:"radio "+d},m.default.createElement("label",null,h))})))},UpDownWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"number",...e})},RangeWidget:function(e){const{value:t,registry:{templates:{BaseInputTemplate:a}}}=e;return m.default.createElement("div",{className:"field-range-wrapper"},m.default.createElement(a,{type:"range",...e}),m.default.createElement("span",{className:"range-view"},t))},SelectWidget:function(a){let{schema:r,id:o,options:i,value:n,required:l,disabled:s,readonly:d,multiple:c=!1,autofocus:u=!1,onChange:p,onBlur:h,onFocus:f,placeholder:g}=a;const{enumOptions:y,enumDisabled:S}=i,E=c?[]:"",b=e.useCallback((e=>{const a=V(e,c);return f(o,t.processSelectValue(r,a,i))}),[f,o,r,c,i]),v=e.useCallback((e=>{const a=V(e,c);return h(o,t.processSelectValue(r,a,i))}),[h,o,r,c,i]),C=e.useCallback((e=>{const a=V(e,c);return p(t.processSelectValue(r,a,i))}),[p,r,c,i]);return m.default.createElement("select",{id:o,name:o,multiple:c,className:"form-control",value:void 0===n?E:n,required:l,disabled:s||d,autoFocus:u,onBlur:v,onFocus:b,onChange:C},!c&&void 0===r.default&&m.default.createElement("option",{value:""},g),Array.isArray(y)&&y.map(((e,t)=>{let{value:a,label:r}=e;const o=S&&-1!=S.indexOf(a);return m.default.createElement("option",{key:t,value:a,disabled:o},r)})))},TextWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{...e})},DateWidget:function(a){const{onChange:r,options:o,registry:i}=a,n=t.getTemplate("BaseInputTemplate",i,o),l=e.useCallback((e=>r(e||void 0)),[r]);return m.default.createElement(n,{type:"date",...a,onChange:l})},DateTimeWidget:function(e){const{onChange:a,value:r,options:o,registry:i}=e,n=t.getTemplate("BaseInputTemplate",i,o);return m.default.createElement(n,{type:"datetime-local",...e,value:t.utcToLocal(r),onChange:e=>a(t.localToUTC(e))})},AltDateWidget:function(a){let{time:r=!1,disabled:o=!1,readonly:i=!1,autofocus:n=!1,options:l,id:s,registry:d,onBlur:c,onFocus:u,onChange:p,value:h}=a;const[f,g]=e.useReducer(((e,t)=>({...e,...t})),t.parseDateString(h,r));e.useEffect((()=>{h&&h!==t.toDateString(f,r)&&g(t.parseDateString(h,r))}),[h,f,r]),e.useEffect((()=>{(function(e){return Object.values(e).every((e=>-1!==e))})(f)&&p(t.toDateString(f,r))}),[f,r,p]);const y=e.useCallback(((e,t)=>{g({[e]:t})}),[]),S=e.useCallback((e=>{if(e.preventDefault(),o||i)return;const a=t.parseDateString((new Date).toJSON(),r);g(a)}),[o,i,r]),E=e.useCallback((e=>{e.preventDefault(),o||i||(g(t.parseDateString("",r)),p(void 0))}),[o,i,r,p]);return m.default.createElement("ul",{className:"list-inline"},function(e,t,a){void 0===a&&(a=[1900,(new Date).getFullYear()+2]);const{year:r,month:o,day:i,hour:n,minute:l,second:s}=e,d=[{type:"year",range:a,value:r},{type:"month",range:[1,12],value:o},{type:"day",range:[1,31],value:i}];return t&&d.push({type:"hour",range:[0,23],value:n},{type:"minute",range:[0,59],value:l},{type:"second",range:[0,59],value:s}),d}(f,r,l.yearsRange).map(((e,t)=>m.default.createElement("li",{key:t},m.default.createElement(U,{rootId:s,select:y,...e,disabled:o,readonly:i,registry:d,onBlur:c,onFocus:u,autofocus:n&&0===t})))),("undefined"===l.hideNowButton||!l.hideNowButton)&&m.default.createElement("li",null,m.default.createElement("a",{href:"#",className:"btn btn-info btn-now",onClick:S},"Now")),("undefined"===l.hideClearButton||!l.hideClearButton)&&m.default.createElement("li",null,m.default.createElement("a",{href:"#",className:"btn btn-warning btn-clear",onClick:E},"Clear")))},AltDateTimeWidget:function(e){let{time:t=!0,...a}=e;const{AltDateWidget:r}=a.registry.widgets;return m.default.createElement(r,{time:t,...a})},EmailWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"email",...e})},URLWidget:function(e){const{options:a,registry:r}=e,o=t.getTemplate("BaseInputTemplate",r,a);return m.default.createElement(o,{type:"url",...e})},TextareaWidget:M,HiddenWidget:function(e){let{id:t,value:a}=e;return m.default.createElement("input",{type:"hidden",id:t,name:t,value:void 0===a?"":a})},ColorWidget:function(e){const{disabled:a,readonly:r,options:o,registry:i}=e,n=t.getTemplate("BaseInputTemplate",i,o);return m.default.createElement(n,{type:"color",...e,disabled:a||r})},FileWidget:function(t){let{multiple:a,id:r,readonly:o,disabled:i,onChange:n,value:l,autofocus:s=!1,options:d}=t;const c=e.useMemo((()=>Array.isArray(l)?R(l):R([l])),[l]),[u,p]=e.useState(c),h=e.useCallback((e=>{var t;e.target.files&&(t=e.target.files,Promise.all(Array.from(t).map(P))).then((e=>{p(e);const t=e.map((e=>e.dataURL));n(a?t:t[0])}))}),[a,n]);return m.default.createElement("div",null,m.default.createElement("p",null,m.default.createElement("input",{id:r,name:r,type:"file",disabled:o||i,onChange:h,defaultValue:"",autoFocus:s,multiple:a,accept:d.accept?String(d.accept):void 0})),m.default.createElement(_,{filesInfo:u}))},CheckboxWidget:function(a){let{schema:r,uiSchema:o,options:i,id:n,value:l,disabled:s,readonly:d,label:c,autofocus:u=!1,onBlur:p,onFocus:h,onChange:f,registry:g}=a;const y=t.getTemplate("DescriptionFieldTemplate",g,i),S=t.schemaRequiresTrueValue(r),E=e.useCallback((e=>f(e.target.checked)),[f]),b=e.useCallback((e=>p(n,e.target.checked)),[p,n]),v=e.useCallback((e=>h(n,e.target.checked)),[h,n]);return m.default.createElement("div",{className:"checkbox "+(s||d?"disabled":"")},r.description&&m.default.createElement(y,{id:n+"__description",description:r.description,schema:r,uiSchema:o,registry:g}),m.default.createElement("label",null,m.default.createElement("input",{type:"checkbox",id:n,name:n,checked:void 0!==l&&l,required:S,disabled:s||d,autoFocus:u,onChange:E,onBlur:b,onFocus:v}),m.default.createElement("span",null,c)))},CheckboxesWidget:function(e){let{id:t,disabled:a,options:{inline:r=!1,enumOptions:o,enumDisabled:i},value:n,autofocus:l=!1,readonly:s,onChange:d}=e;return m.default.createElement("div",{className:"checkboxes",id:t},Array.isArray(o)&&o.map(((e,c)=>{const u=-1!==n.indexOf(e.value),p=Array.isArray(i)&&-1!=i.indexOf(e.value),h=a||p||s?"disabled":"",f=m.default.createElement("span",null,m.default.createElement("input",{type:"checkbox",id:t+"-"+e.value,name:t,checked:u,disabled:a||p||s,autoFocus:l&&0===c,onChange:t=>{const a=o.map((e=>{let{value:t}=e;return t}));d(t.target.checked?function(e,t,a){const r=a.indexOf(e);return t.slice(0,r).concat(e,t.slice(r)).sort(((e,t)=>Number(a.indexOf(e)>a.indexOf(t))))}(e.value,n,a):function(e,t){return t.filter((t=>t!==e))}(e.value,n))}}),m.default.createElement("span",null,e.label));return r?m.default.createElement("label",{key:e.value,className:"checkbox-inline "+h},f):m.default.createElement("div",{key:e.value,className:"checkbox "+h},m.default.createElement("label",null,f))})))}};function W(){return{fields:A,templates:B,widgets:K,rootSchema:{},formContext:{}}}class j extends e.Component{constructor(e){if(super(e),this.formElement=void 0,this.getUsedFormData=(e,t)=>{if(0===t.length&&"object"!=typeof e)return e;const a=p.default(e,t);return Array.isArray(e)?Object.keys(a).map((e=>a[e])):a},this.getFieldNames=(e,a)=>{const r=function(e,o,i){return void 0===o&&(o=[]),void 0===i&&(i=[""]),Object.keys(e).forEach((n=>{if("object"==typeof e[n]){const a=i.map((e=>e+"."+n));e[n][t.RJSF_ADDITONAL_PROPERTIES_FLAG]&&""!==e[n][t.NAME_KEY]?o.push(e[n][t.NAME_KEY]):r(e[n],o,a)}else n===t.NAME_KEY&&""!==e[n]&&i.forEach((e=>{e=e.replace(/^\./,"");const t=h.default(a,e);("object"!=typeof t||f.default(t))&&o.push(e)}))})),o};return r(e)},this.onChange=(e,a,r)=>{const{extraErrors:o,omitExtraData:i,liveOmit:n,noValidate:l,liveValidate:s,onChange:d}=this.props,{schemaUtils:c,schema:u}=this.state;(t.isObject(e)||Array.isArray(e))&&(e=this.getStateFromProps(this.props,e).formData);const m=!l&&s;let p={formData:e,schema:u},h=e;if(!0===i&&!0===n){const t=c.retrieveSchema(u,e),a=c.toPathSchema(t,"",e),r=this.getFieldNames(a,e);h=this.getUsedFormData(e,r),p={formData:h}}if(m){const e=this.validate(h);let t=e.errors,a=e.errorSchema;const r=t,i=a;if(o){const r=c.mergeValidationData(e,o);a=r.errorSchema,t=r.errors}p={formData:h,errors:t,errorSchema:a,schemaValidationErrors:r,schemaValidationErrorSchema:i}}else if(!l&&a){const e=o?t.mergeObjects(a,o,!0):a;p={formData:h,errorSchema:e,errors:c.getValidator().toErrorList(e)}}this.setState(p,(()=>d&&d({...this.state,...p},r)))},this.onBlur=(e,t)=>{const{onBlur:a}=this.props;a&&a(e,t)},this.onFocus=(e,t)=>{const{onFocus:a}=this.props;a&&a(e,t)},this.onSubmit=e=>{if(e.preventDefault(),e.target!==e.currentTarget)return;e.persist();const{omitExtraData:t,extraErrors:a,noValidate:r,onSubmit:o}=this.props;let{formData:i}=this.state;const{schema:n,schemaUtils:l}=this.state;if(!0===t){const e=l.retrieveSchema(n,i),t=l.toPathSchema(e,"",i),a=this.getFieldNames(t,i);i=this.getUsedFormData(i,a)}if(r||this.validateForm()){const t=a||{},r=a?l.getValidator().toErrorList(a):[];this.setState({formData:i,errors:r,errorSchema:t,schemaValidationErrors:[],schemaValidationErrorSchema:{}},(()=>{o&&o({...this.state,formData:i,status:"submitted"},e)}))}},!e.validator)throw new Error("A validator is required for Form functionality to work");this.state=this.getStateFromProps(e,e.formData),this.props.onChange&&!t.deepEquals(this.state.formData,this.props.formData)&&this.props.onChange(this.state),this.formElement=m.default.createRef()}UNSAFE_componentWillReceiveProps(e){const a=this.getStateFromProps(e,e.formData);t.deepEquals(a.formData,e.formData)||t.deepEquals(a.formData,this.state.formData)||!e.onChange||e.onChange(a),this.setState(a)}getStateFromProps(e,a){const r=this.state||{},o="schema"in e?e.schema:this.props.schema,i=("uiSchema"in e?e.uiSchema:this.props.uiSchema)||{},n=void 0!==a,l=n&&!e.noValidate&&("liveValidate"in e?e.liveValidate:this.props.liveValidate),s=o;let d=r.schemaUtils;d&&!d.doesSchemaUtilsDiffer(e.validator,s)||(d=t.createSchemaUtils(e.validator,s));const c=d.getDefaultFormState(o,a),u=d.retrieveSchema(o,c);let m,p,h=r.schemaValidationErrors,f=r.schemaValidationErrorSchema;if(l){const e=this.validate(c,o,d);m=e.errors,p=e.errorSchema,h=m,f=p}else{const t=e.noValidate?{errors:[],errorSchema:{}}:e.liveValidate?{errors:r.errors||[],errorSchema:r.errorSchema||{}}:{errors:r.schemaValidationErrors||[],errorSchema:r.schemaValidationErrorSchema||{}};m=t.errors,p=t.errorSchema}if(e.extraErrors){const t=d.mergeValidationData({errorSchema:p,errors:m},e.extraErrors);p=t.errorSchema,m=t.errors}const g=d.toIdSchema(u,i["ui:rootFieldId"],c,e.idPrefix,e.idSeparator);return{schemaUtils:d,schema:o,uiSchema:i,idSchema:g,formData:c,edit:n,errors:m,errorSchema:p,schemaValidationErrors:h,schemaValidationErrorSchema:f}}shouldComponentUpdate(e,a){return t.shouldRender(this,e,a)}validate(e,t,a){void 0===t&&(t=this.props.schema);const r=a||this.state.schemaUtils,{customValidate:o,transformErrors:i}=this.props,n=r.retrieveSchema(t,e);return r.getValidator().validateFormData(e,n,o,i)}renderErrors(e){const{errors:a,errorSchema:r,schema:o,uiSchema:i}=this.state,{showErrorList:n,formContext:l}=this.props,s=t.getUiOptions(i),d=t.getTemplate("ErrorListTemplate",e,s);return a&&a.length&&0!=n?m.default.createElement(d,{errors:a,errorSchema:r||{},schema:o,uiSchema:i,formContext:l}):null}getRegistry(){var e;const{schemaUtils:t}=this.state,{fields:a,templates:r,widgets:o,formContext:i}=W();return{fields:{...a,...this.props.fields},templates:{...r,...this.props.templates,ButtonTemplates:{...r.ButtonTemplates,...null===(e=this.props.templates)||void 0===e?void 0:e.ButtonTemplates}},widgets:{...o,...this.props.widgets},rootSchema:this.props.schema,formContext:this.props.formContext||i,schemaUtils:t}}submit(){this.formElement.current&&(this.formElement.current.dispatchEvent(new CustomEvent("submit",{cancelable:!0})),this.formElement.current.requestSubmit())}validateForm(){const{extraErrors:e,onError:t}=this.props,{formData:a}=this.state,{schemaUtils:r}=this.state,o=this.validate(a);let i=o.errors,n=o.errorSchema;const l=i,s=n;if(i.length>0){if(e){const t=r.mergeValidationData(o,e);n=t.errorSchema,i=t.errors}return this.setState({errors:i,errorSchema:n,schemaValidationErrors:l,schemaValidationErrorSchema:s},(()=>{t?t(i):console.error("Form validation failed",i)})),!1}return!0}render(){const{children:e,id:t,idPrefix:a,idSeparator:r,className:o="",tagName:i,name:n,method:l,target:s,action:d,autoComplete:c,enctype:u,acceptcharset:p,noHtml5Validate:h=!1,disabled:f=!1,readonly:g=!1,formContext:y,_internalFormWrapper:S}=this.props,{schema:E,uiSchema:b,formData:v,errorSchema:C,idSchema:F}=this.state,D=this.getRegistry(),{SchemaField:x}=D.fields,{SubmitButton:k}=D.templates.ButtonTemplates;return m.default.createElement(S||i||"form",{className:o||"rjsf",id:t,name:n,method:l,target:s,action:d,autoComplete:c,encType:u,acceptCharset:p,noValidate:h,onSubmit:this.onSubmit,as:S?i:void 0,ref:this.formElement},this.renderErrors(D),m.default.createElement(x,{name:"",schema:E,uiSchema:b,errorSchema:C,idSchema:F,idPrefix:a,idSeparator:r,formContext:y,formData:v,onChange:this.onChange,onBlur:this.onBlur,onFocus:this.onFocus,registry:D,disabled:f,readonly:g}),e||m.default.createElement(k,{uiSchema:b}))}}exports.default=j,exports.getDefaultRegistry=W,exports.withTheme=function(t,a){return e.forwardRef(((e,r)=>{var o,i;let{fields:n,widgets:l,templates:s,...d}=e;return n={...t.fields,...n},l={...t.widgets,...l},s={...t.templates,...s,ButtonTemplates:{...null==t||null===(o=t.templates)||void 0===o?void 0:o.ButtonTemplates,...null===(i=s)||void 0===i?void 0:i.ButtonTemplates}},m.default.createElement(a||j,{...t,...d,fields:n,widgets:l,templates:s,ref:r})}))};
 //# sourceMappingURL=core.cjs.production.min.js.map
diff --git a/node_modules/@rjsf/core/dist/core.cjs.production.min.js.map b/node_modules/@rjsf/core/dist/core.cjs.production.min.js.map
index 345cc75..b631c17 100644
--- a/node_modules/@rjsf/core/dist/core.cjs.production.min.js.map
+++ b/node_modules/@rjsf/core/dist/core.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"core.cjs.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/index.ts","../src/components/fields/BooleanField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/index.ts","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","AnyOfField","Component","constructor","props","super","this","onOptionChange","option","selectedOption","parseInt","onChange","options","registry","schemaUtils","newOption","retrieveSchema","newFormData","guessType","type","properties","Object","assign","optionsToDiscard","slice","splice","unset","getDefaultFormState","undefined","getFieldId","setState","state","getMatchingOption","componentDidUpdate","prevProps","prevState","idSchema","deepEquals","$id","matchingOption","schema","oneOf","render","name","baseType","disabled","readonly","hideError","errorSchema","formContext","idPrefix","idSeparator","onBlur","onFocus","uiSchema","widgets","fields","SchemaField","_SchemaField","widget","uiOptions","getUiOptions","Widget","getWidget","optionSchema","enumOptions","index","label","title","value","React","createElement","className","id","default","trailingCharMatcherWithPrefix","trailingCharMatcher","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","onKeyChange","onDropPropertyClick","required","wasPropertyKeyModified","FieldTemplate","getTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","toIdSchema","handleFieldComponentChange","useCallback","newErrorSchema","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnsupportedFieldTemplate","reason","getFieldComponent","Boolean","readOnly","uiSchemaHideError","autofocus","keys","length","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","fieldUiSchema","omit","rawErrors","ADDITIONAL_PROPERTY_FLAG","description","help","hidden","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","isObject","MultiSchemaField","ArrayField","_getNewFormDataRow","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","onAddClick","event","preventDefault","newKeyedFormData","updatedKeyedFormData","onAddIndexClick","newKeyedFormDataRow","onDropIndexClick","idx","i","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","reOrderArray","onChangeForIndex","onSelectChange","static","nextProps","nextFormData","previousKeyedFormData","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","includes","canAddItem","formItems","addable","maxItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_schemaItems","itemsSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","Template","placeholder","multiple","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","ArraySchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","const","o","_schema$enum","schemaWithEnumNames","enums","enum","enumNames","every","v","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_this","arguments","additionalProperties","onPropertyChange","addedByAdditionalProperties","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldIdSchema","content","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","IconButton","iconType","icon","otherProps","Label","htmlFor","templates","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","_ref","itemProps","TitleFieldTemplate","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","BaseInputTemplate","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","ErrorListTemplate","error","stack","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","getValue","from","selected","TextareaWidget","handleBlur","handleFocus","_ref4","rows","defaultProps","PasswordWidget","RadioWidget","Math","random","toString","enumDisabled","inline","checked","itemDisabled","disabledCls","radio","UpDownWidget","RangeWidget","newValue","processSelectValue","TextWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","AltDateWidget","time","useReducer","action","parseDateString","toDateString","values","readyForChange","property","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","year","month","day","hour","minute","second","data","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","EmailWidget","URLWidget","HiddenWidget","ColorWidget","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","then","filesInfoEvent","accept","String","CheckboxWidget","schemaRequiresTrueValue","CheckboxesWidget","checkbox","at","sort","a","b","Number","selectValue","deselectValue","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","_this$props$templates","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"core.cjs.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/index.ts","../src/components/fields/BooleanField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/index.ts","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>, RJSFForm: any\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      if(RJSFForm) {\n        return (\n          <RJSFForm\n            {...themeProps}\n            {...directProps}\n            fields={fields}\n            widgets={widgets}\n            templates={templates}\n            ref={ref}\n        />\n        )\n      }\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","AnyOfField","Component","constructor","props","super","this","onOptionChange","option","selectedOption","parseInt","onChange","options","registry","schemaUtils","newOption","retrieveSchema","newFormData","guessType","type","properties","Object","assign","optionsToDiscard","slice","splice","unset","getDefaultFormState","undefined","getFieldId","setState","state","getMatchingOption","componentDidUpdate","prevProps","prevState","idSchema","deepEquals","$id","matchingOption","schema","oneOf","render","name","baseType","disabled","readonly","hideError","errorSchema","formContext","idPrefix","idSeparator","onBlur","onFocus","uiSchema","widgets","fields","SchemaField","_SchemaField","widget","uiOptions","getUiOptions","Widget","getWidget","optionSchema","enumOptions","index","label","title","value","React","createElement","className","id","default","trailingCharMatcherWithPrefix","trailingCharMatcher","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","onKeyChange","onDropPropertyClick","required","wasPropertyKeyModified","FieldTemplate","getTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","toIdSchema","handleFieldComponentChange","useCallback","newErrorSchema","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnsupportedFieldTemplate","reason","getFieldComponent","Boolean","readOnly","uiSchemaHideError","autofocus","keys","length","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","fieldUiSchema","omit","rawErrors","ADDITIONAL_PROPERTY_FLAG","description","help","hidden","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","isObject","MultiSchemaField","ArrayField","_getNewFormDataRow","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","onAddClick","event","preventDefault","newKeyedFormData","updatedKeyedFormData","onAddIndexClick","newKeyedFormDataRow","onDropIndexClick","idx","i","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","reOrderArray","onChangeForIndex","onSelectChange","static","nextProps","nextFormData","previousKeyedFormData","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","includes","canAddItem","formItems","addable","maxItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_schemaItems","itemsSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","Template","placeholder","multiple","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","ArraySchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","const","o","_schema$enum","schemaWithEnumNames","enums","enum","enumNames","every","v","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_this","arguments","additionalProperties","onPropertyChange","addedByAdditionalProperties","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldIdSchema","content","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","IconButton","iconType","icon","otherProps","Label","htmlFor","templates","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","_ref","itemProps","TitleFieldTemplate","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","BaseInputTemplate","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","ErrorListTemplate","error","stack","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","getValue","from","selected","TextareaWidget","handleBlur","handleFocus","_ref4","rows","defaultProps","PasswordWidget","RadioWidget","Math","random","toString","enumDisabled","inline","checked","itemDisabled","disabledCls","radio","UpDownWidget","RangeWidget","newValue","processSelectValue","TextWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","AltDateWidget","time","useReducer","action","parseDateString","toDateString","values","readyForChange","property","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","year","month","day","hour","minute","second","data","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","EmailWidget","URLWidget","HiddenWidget","ColorWidget","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","then","filesInfoEvent","accept","String","CheckboxWidget","schemaRequiresTrueValue","CheckboxesWidget","checkbox","at","sort","a","b","Number","selectValue","deselectValue","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","_this$props$templates","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","encType","acceptCharset","as","ref","themeProps","RJSFForm","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@rjsf/core/dist/core.esm.js b/node_modules/@rjsf/core/dist/core.esm.js
index 2b8438d..cc83e89 100644
--- a/node_modules/@rjsf/core/dist/core.esm.js
+++ b/node_modules/@rjsf/core/dist/core.esm.js
@@ -4115,7 +4115,7 @@ class Form extends Component {
 
 /** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */
 
-function withTheme(themeProps) {
+function withTheme(themeProps, RJSFForm) {
   return /*#__PURE__*/forwardRef((_ref, ref) => {
     var _themeProps$templates, _templates;
 
@@ -4137,6 +4137,17 @@ function withTheme(themeProps) {
         ...((_templates = templates) === null || _templates === void 0 ? void 0 : _templates.ButtonTemplates)
       }
     };
+
+    if (RJSFForm) {
+      return /*#__PURE__*/React.createElement(RJSFForm, { ...themeProps,
+        ...directProps,
+        fields: fields,
+        widgets: widgets,
+        templates: templates,
+        ref: ref
+      });
+    }
+
     return /*#__PURE__*/React.createElement(Form, { ...themeProps,
       ...directProps,
       fields: fields,
diff --git a/node_modules/@rjsf/core/dist/core.esm.js.map b/node_modules/@rjsf/core/dist/core.esm.js.map
index bf621a1..d3a4c6c 100644
--- a/node_modules/@rjsf/core/dist/core.esm.js.map
+++ b/node_modules/@rjsf/core/dist/core.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"core.esm.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","process","env","NODE_ENV","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","forwardRef","directProps"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"core.esm.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>, RJSFForm: any\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      if(RJSFForm) {\n        return (\n          <RJSFForm\n            {...themeProps}\n            {...directProps}\n            fields={fields}\n            widgets={widgets}\n            templates={templates}\n            ref={ref}\n        />\n        )\n      }\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","process","env","NODE_ENV","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","RJSFForm","forwardRef","directProps"],"mappings":";;;;;;;;;;;;AAkCA;;AACA,SAASA,aAAT,GAAsB;AACpB,EAAA,OAAOC,MAAM,EAAb,CAAA;AACD,CAAA;AAED;;;;AAIG;;;AACH,SAASC,qBAAT,CAAkCC,QAAlC,EAA+C;AAC7C,EAAA,OAAO,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,GACH,EADG,GAEHA,QAAQ,CAACG,GAAT,CAAcC,IAAD,IAAS;IACpB,OAAO;MACLC,GAAG,EAAER,aAAa,EADb;AAELO,MAAAA,IAAAA;KAFF,CAAA;AAID,GALD,CAFJ,CAAA;AAQD,CAAA;AAED;;;;AAIG;;;AACH,SAASE,oBAAT,CACEC,aADF,EAC8D;AAE5D,EAAA,IAAIN,KAAK,CAACC,OAAN,CAAcK,aAAd,CAAJ,EAAkC;IAChC,OAAOA,aAAa,CAACJ,GAAd,CAAmBK,SAAD,IAAeA,SAAS,CAACJ,IAA3C,CAAP,CAAA;AACD,GAAA;;AACD,EAAA,OAAO,EAAP,CAAA;AACD,CAAA;AAED;;AAEG;;;AACH,MAAMK,UAAN,SAA2CC,SAA3C,CAGC;AACC;;;AAGG;EACHC,WAAA,CAAYC,KAAZ,EAAqC;AACnC,IAAA,KAAA,CAAMA,KAAN,CAAA,CAAA;;IADmC,IAiGrCC,CAAAA,kBAjGqC,GAiGhB,MAAQ;MAC3B,MAAM;QAAEC,MAAF;AAAUC,QAAAA,QAAAA;AAAV,OAAA,GAAuB,KAAKH,KAAlC,CAAA;MACA,MAAM;AAAEI,QAAAA,WAAAA;AAAF,OAAA,GAAkBD,QAAxB,CAAA;AACA,MAAA,IAAIE,UAAU,GAAGH,MAAM,CAACI,KAAxB,CAAA;;MACA,IAAIC,YAAY,CAACL,MAAD,CAAZ,IAAwBM,oBAAoB,CAACN,MAAD,CAAhD,EAA0D;QACxDG,UAAU,GAAGH,MAAM,CAACO,eAApB,CAAA;AACD,OAN0B;;;AAQ3B,MAAA,OAAOL,WAAW,CAACM,mBAAZ,CAAgCL,UAAhC,CAAP,CAAA;KAzGmC,CAAA;;IAAA,IAkHrCM,CAAAA,UAlHqC,GAkHvBC,KAAD,IAAsB;AACjC,MAAA,IAAIA,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;AACD,OAAA;;MAED,MAAM;AAAEC,QAAAA,QAAAA;AAAF,OAAA,GAAe,KAAKd,KAA1B,CAAA;MACA,MAAM;AAAEL,QAAAA,aAAAA;AAAF,OAAA,GAAoB,KAAKoB,KAA/B,CAAA;AACA,MAAA,MAAMC,mBAAmB,GAAyB;QAChDvB,GAAG,EAAER,aAAa,EAD8B;QAEhDO,IAAI,EAAE,KAAKS,kBAAL,EAAA;OAFR,CAAA;AAIA,MAAA,MAAMgB,gBAAgB,GAAG,CAAC,GAAGtB,aAAJ,EAAmBqB,mBAAnB,CAAzB,CAAA;AACA,MAAA,IAAA,CAAKE,QAAL,CACE;AACEvB,QAAAA,aAAa,EAAEsB,gBADjB;AAEEE,QAAAA,oBAAoB,EAAE,IAAA;OAH1B,EAKE,MAAML,QAAQ,CAACpB,oBAAoB,CAACuB,gBAAD,CAArB,CALhB,CAAA,CAAA;KA9HmC,CAAA;;IAAA,IA6IrCG,CAAAA,eA7IqC,GA6IlBC,KAAD,IAAkB;AAClC,MAAA,OAAQT,KAAD,IAAsB;AAC3B,QAAA,IAAIA,KAAJ,EAAW;AACTA,UAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;AACD,SAAA;;QACD,MAAM;AAAEC,UAAAA,QAAAA;AAAF,SAAA,GAAe,KAAKd,KAA1B,CAAA;QACA,MAAM;AAAEL,UAAAA,aAAAA;AAAF,SAAA,GAAoB,KAAKoB,KAA/B,CAAA;AACA,QAAA,MAAMC,mBAAmB,GAAyB;UAChDvB,GAAG,EAAER,aAAa,EAD8B;UAEhDO,IAAI,EAAE,KAAKS,kBAAL,EAAA;SAFR,CAAA;AAIA,QAAA,MAAMgB,gBAAgB,GAAG,CAAC,GAAGtB,aAAJ,CAAzB,CAAA;AACAsB,QAAAA,gBAAgB,CAACK,MAAjB,CAAwBD,KAAxB,EAA+B,CAA/B,EAAkCL,mBAAlC,CAAA,CAAA;AAEA,QAAA,IAAA,CAAKE,QAAL,CACE;AACEvB,UAAAA,aAAa,EAAEsB,gBADjB;AAEEE,UAAAA,oBAAoB,EAAE,IAAA;SAH1B,EAKE,MAAML,QAAQ,CAACpB,oBAAoB,CAACuB,gBAAD,CAArB,CALhB,CAAA,CAAA;OAbF,CAAA;KA9ImC,CAAA;;IAAA,IA2KrCM,CAAAA,gBA3KqC,GA2KjBF,KAAD,IAAkB;AACnC,MAAA,OAAQT,KAAD,IAAsB;AAC3B,QAAA,IAAIA,KAAJ,EAAW;AACTA,UAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;AACD,SAAA;;QACD,MAAM;UAAEC,QAAF;AAAYU,UAAAA,WAAAA;AAAZ,SAAA,GAA4B,KAAKxB,KAAvC,CAAA;QACA,MAAM;AAAEL,UAAAA,aAAAA;SAAkB,GAAA,IAAA,CAAKoB,KAA/B,CAL2B;;AAO3B,QAAA,IAAIU,cAAJ,CAAA;;AACA,QAAA,IAAID,WAAJ,EAAiB;AACfC,UAAAA,cAAc,GAAG,EAAjB,CAAA;;AACA,UAAA,KAAK,MAAMC,GAAX,IAAkBF,WAAlB,EAA+B;AAC7B,YAAA,MAAMG,CAAC,GAAGC,QAAQ,CAACF,GAAD,CAAlB,CAAA;;YACA,IAAIC,CAAC,GAAGN,KAAR,EAAe;cACbQ,GAAG,CAACJ,cAAD,EAAiB,CAACE,CAAD,CAAjB,EAAsBH,WAAW,CAACE,GAAD,CAAjC,CAAH,CAAA;AACD,aAFD,MAEO,IAAIC,CAAC,GAAGN,KAAR,EAAe;AACpBQ,cAAAA,GAAG,CAACJ,cAAD,EAAiB,CAACE,CAAC,GAAG,CAAL,CAAjB,EAA0BH,WAAW,CAACE,GAAD,CAArC,CAAH,CAAA;AACD,aAAA;AACF,WAAA;AACF,SAAA;;AACD,QAAA,MAAMT,gBAAgB,GAAGtB,aAAa,CAACmC,MAAd,CAAqB,CAACC,CAAD,EAAIJ,CAAJ,KAAUA,CAAC,KAAKN,KAArC,CAAzB,CAAA;AACA,QAAA,IAAA,CAAKH,QAAL,CACE;AACEvB,UAAAA,aAAa,EAAEsB,gBADjB;AAEEE,UAAAA,oBAAoB,EAAE,IAAA;SAH1B,EAKE,MACEL,QAAQ,CACNpB,oBAAoB,CAACuB,gBAAD,CADd,EAENQ,cAFM,CANZ,CAAA,CAAA;OApBF,CAAA;KA5KmC,CAAA;;AAAA,IAAA,IAAA,CAqNrCO,cArNqC,GAqNpB,CAACX,KAAD,EAAgBY,QAAhB,KAAoC;AACnD,MAAA,OAAQrB,KAAD,IAA+C;AACpD,QAAA,IAAIA,KAAJ,EAAW;AACTA,UAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;UACAD,KAAK,CAACsB,aAAN,CAAoBC,IAApB,EAAA,CAAA;AACD,SAAA;;QACD,MAAM;UAAErB,QAAF;AAAYU,UAAAA,WAAAA;AAAZ,SAAA,GAA4B,KAAKxB,KAAvC,CAAA;AACA,QAAA,IAAIyB,cAAJ,CAAA;;AACA,QAAA,IAAI,IAAKzB,CAAAA,KAAL,CAAWwB,WAAf,EAA4B;AAC1BC,UAAAA,cAAc,GAAG,EAAjB,CAAA;;AACA,UAAA,KAAK,MAAMC,GAAX,IAAkBF,WAAlB,EAA+B;AAC7B,YAAA,MAAMG,CAAC,GAAGC,QAAQ,CAACF,GAAD,CAAlB,CAAA;;YACA,IAAIC,CAAC,IAAIN,KAAT,EAAgB;cACdQ,GAAG,CAACJ,cAAD,EAAiB,CAACQ,QAAD,CAAjB,EAA6BT,WAAW,CAACH,KAAD,CAAxC,CAAH,CAAA;AACD,aAFD,MAEO,IAAIM,CAAC,IAAIM,QAAT,EAAmB;cACxBJ,GAAG,CAACJ,cAAD,EAAiB,CAACJ,KAAD,CAAjB,EAA0BG,WAAW,CAACS,QAAD,CAArC,CAAH,CAAA;AACD,aAFM,MAEA;cACLJ,GAAG,CAACJ,cAAD,EAAiB,CAACC,GAAD,CAAjB,EAAwBF,WAAW,CAACG,CAAD,CAAnC,CAAH,CAAA;AACD,aAAA;AACF,WAAA;AACF,SAAA;;QAED,MAAM;AAAEhC,UAAAA,aAAAA;AAAF,SAAA,GAAoB,KAAKoB,KAA/B,CAAA;;AACA,QAAA,SAASqB,YAAT,GAAqB;AACnB;AACA,UAAA,MAAMC,iBAAiB,GAAG1C,aAAa,CAAC2C,KAAd,EAA1B,CAFmB;;;AAKnBD,UAAAA,iBAAiB,CAACf,MAAlB,CAAyBD,KAAzB,EAAgC,CAAhC,CAAA,CAAA;;UACAgB,iBAAiB,CAACf,MAAlB,CAAyBW,QAAzB,EAAmC,CAAnC,EAAsCtC,aAAa,CAAC0B,KAAD,CAAnD,CAAA,CAAA;;AAEA,UAAA,OAAOgB,iBAAP,CAAA;AACD,SAAA;;QACD,MAAMpB,gBAAgB,GAAGmB,YAAY,EAArC,CAAA;AACA,QAAA,IAAA,CAAKlB,QAAL,CACE;AACEvB,UAAAA,aAAa,EAAEsB,gBAAAA;SAFnB,EAIE,MACEH,QAAQ,CACNpB,oBAAoB,CAACuB,gBAAD,CADd,EAENQ,cAFM,CALZ,CAAA,CAAA;OAjCF,CAAA;KAtNmC,CAAA;;IAAA,IAyQrCc,CAAAA,gBAzQqC,GAyQjBlB,KAAD,IAAkB;AACnC,MAAA,OAAO,CAACmB,KAAD,EAAaf,cAAb,EAA8CgB,EAA9C,KAA6D;QAClE,MAAM;UAAErD,QAAF;UAAY0B,QAAZ;AAAsBU,UAAAA,WAAAA;AAAtB,SAAA,GAAsC,KAAKxB,KAAjD,CAAA;QACA,MAAM0C,SAAS,GAAGrD,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAA,GAA0BA,QAA1B,GAAqC,EAAvD,CAAA;QACA,MAAMuD,WAAW,GAAGD,SAAS,CAACnD,GAAV,CAAc,CAACC,IAAD,EAAUmC,CAAV,KAAuB;AACvD;AACA;UACA,MAAMiB,SAAS,GAAG,OAAOJ,KAAP,KAAiB,WAAjB,GAA+B,IAA/B,GAAsCA,KAAxD,CAAA;AACA,UAAA,OAAOnB,KAAK,KAAKM,CAAV,GAAciB,SAAd,GAA0BpD,IAAjC,CAAA;AACD,SALmB,CAApB,CAAA;QAMAsB,QAAQ,CACN6B,WADM,EAENnB,WAAW,IACTA,WADF,IACiB,EACb,GAAGA,WADU;AAEb,UAAA,CAACH,KAAD,GAASI,cAAAA;SALP,EAONgB,EAPM,CAAR,CAAA;OATF,CAAA;KA1QmC,CAAA;;IAAA,IAgSrCI,CAAAA,cAhSqC,GAgSnBL,KAAD,IAAe;MAC9B,MAAM;QAAE1B,QAAF;AAAYgC,QAAAA,QAAAA;AAAZ,OAAA,GAAyB,KAAK9C,KAApC,CAAA;MACAc,QAAQ,CAAC0B,KAAD,EAAQO,SAAR,EAAmBD,QAAQ,IAAIA,QAAQ,CAACE,GAAxC,CAAR,CAAA;KAlSmC,CAAA;;IAEnC,MAAM;MAAE5D,QAAQ,EAARA,SAAQ,GAAG,EAAA;AAAb,KAAA,GAAoBY,KAA1B,CAAA;;AACA,IAAA,MAAML,cAAa,GAAGR,qBAAqB,CAAIC,SAAJ,CAA3C,CAAA;;AACA,IAAA,IAAA,CAAK2B,KAAL,GAAa;AACXpB,MAAAA,aAAa,EAAbA,cADW;AAEXwB,MAAAA,oBAAoB,EAAE,KAAA;KAFxB,CAAA;AAID,GAAA;AAED;;;;;AAKG;;;AAC4B,EAAA,OAAxB8B,wBAAwB,CAC7BC,SAD6B,EAE7BC,SAF6B,EAEU;AAEvC;IACA,IAAIA,SAAS,CAAChC,oBAAd,EAAoC;MAClC,OAAO;AACLA,QAAAA,oBAAoB,EAAE,KAAA;OADxB,CAAA;AAGD,KAAA;;AACD,IAAA,MAAMiC,YAAY,GAAG/D,KAAK,CAACC,OAAN,CAAc4D,SAAS,CAAC9D,QAAxB,CACjB8D,GAAAA,SAAS,CAAC9D,QADO,GAEjB,EAFJ,CAAA;AAGA,IAAA,MAAMiE,qBAAqB,GAAGF,SAAS,CAACxD,aAAV,IAA2B,EAAzD,CAAA;AACA,IAAA,MAAMsB,gBAAgB,GACpBmC,YAAY,CAACE,MAAb,KAAwBD,qBAAqB,CAACC,MAA9C,GACID,qBAAqB,CAAC9D,GAAtB,CAA0B,CAACgE,sBAAD,EAAyBlC,KAAzB,KAAkC;MAC1D,OAAO;QACL5B,GAAG,EAAE8D,sBAAsB,CAAC9D,GADvB;QAELD,IAAI,EAAE4D,YAAY,CAAC/B,KAAD,CAAA;OAFpB,CAAA;AAID,KALD,CADJ,GAOIlC,qBAAqB,CAAIiE,YAAJ,CAR3B,CAAA;IASA,OAAO;AACLzD,MAAAA,aAAa,EAAEsB,gBAAAA;KADjB,CAAA;AAGD,GAAA;AAED;;AAEG;;;AACU,EAAA,IAATuC,SAAS,GAAA;IACX,MAAM;AAAEtD,MAAAA,MAAAA;AAAF,KAAA,GAAa,KAAKF,KAAxB,CAAA;IACA,OAAOyD,GAAG,CACRvD,MADQ,EAER,CAACwD,SAAD,EAAY,OAAZ,CAFQ,EAGRD,GAAG,CAACvD,MAAD,EAAS,CAACwD,SAAD,EAAY,aAAZ,CAAT,EAAqC,MAArC,CAHK,CAAV,CAAA;AAKD,GAAA;AAED;;;;;AAKG;;;EACHC,cAAc,CAACtD,UAAD,EAAuB;IACnC,IAAIhB,KAAK,CAACC,OAAN,CAAce,UAAU,CAACuD,IAAzB,CAAJ,EAAoC;AAClC;AACA;MACA,OAAO,CAACvD,UAAU,CAACuD,IAAX,CAAgBC,QAAhB,CAAyB,MAAzB,CAAR,CAAA;AACD,KALkC;;;AAOnC,IAAA,OAAOxD,UAAU,CAACuD,IAAX,KAAoB,MAA3B,CAAA;AACD,GAAA;AAED;;;;;;AAMG;;;EACHE,UAAU,CAACC,SAAD,EAAiB;IACzB,MAAM;MAAE7D,MAAF;AAAU8D,MAAAA,QAAAA;AAAV,KAAA,GAAuB,KAAKhE,KAAlC,CAAA;IACA,IAAI;AAAEiE,MAAAA,OAAAA;KAAYC,GAAAA,YAAY,CAASF,QAAT,CAA9B,CAAA;;IACA,IAAIC,OAAO,KAAK,KAAhB,EAAuB;AACrB;AACA;AACA,MAAA,IAAI/D,MAAM,CAACiE,QAAP,KAAoBpB,SAAxB,EAAmC;AACjCkB,QAAAA,OAAO,GAAGF,SAAS,CAACT,MAAV,GAAmBpD,MAAM,CAACiE,QAApC,CAAA;AACD,OAFD,MAEO;AACLF,QAAAA,OAAO,GAAG,IAAV,CAAA;AACD,OAAA;AACF,KAAA;;AACD,IAAA,OAAOA,OAAP,CAAA;AACD,GAAA;AAED;;AAEG;;;AAqMH;AACG;AACHG,EAAAA,MAAM,GAAA;IACJ,MAAM;MAAElE,MAAF;MAAU8D,QAAV;MAAoBlB,QAApB;AAA8B3C,MAAAA,QAAAA;AAA9B,KAAA,GAA2C,KAAKH,KAAtD,CAAA;IACA,MAAM;AAAEI,MAAAA,WAAAA;AAAF,KAAA,GAAkBD,QAAxB,CAAA;;AACA,IAAA,IAAI,EAAEuD,SAAS,IAAIxD,MAAf,CAAJ,EAA4B;AAC1B,MAAA,MAAMmE,SAAS,GAAGH,YAAY,CAASF,QAAT,CAA9B,CAAA;MACA,MAAMM,wBAAwB,GAAGC,WAAW,CAI1C,0BAJ0C,EAIdpE,QAJc,EAIJkE,SAJI,CAA5C,CAAA;AAMA,MAAA,oBACEG,mBAAA,CAACF,wBAAD,EAAyB;AACvBpE,QAAAA,MAAM,EAAEA,MADe;AAEvB4C,QAAAA,QAAQ,EAAEA,QAFa;AAGvB2B,QAAAA,MAAM,EAAC,0BAHgB;AAIvBtE,QAAAA,QAAQ,EAAEA,QAAAA;AAJa,OAAzB,CADF,CAAA;AAQD,KAAA;;AACD,IAAA,IAAIC,WAAW,CAACsE,aAAZ,CAA0BxE,MAA1B,CAAJ,EAAuC;AACrC;MACA,OAAO,IAAA,CAAKyE,iBAAL,EAAP,CAAA;AACD,KAAA;;AACD,IAAA,IAAIC,cAAc,CAASZ,QAAT,CAAlB,EAAsC;MACpC,OAAO,IAAA,CAAKa,kBAAL,EAAP,CAAA;AACD,KAAA;;AACD,IAAA,IAAItE,YAAY,CAACL,MAAD,CAAhB,EAA0B;MACxB,OAAO,IAAA,CAAK4E,gBAAL,EAAP,CAAA;AACD,KAAA;;IACD,IAAI1E,WAAW,CAAC2E,YAAZ,CAAyB7E,MAAzB,EAAiC8D,QAAjC,CAAJ,EAAgD;MAC9C,OAAO,IAAA,CAAKgB,WAAL,EAAP,CAAA;AACD,KAAA;;IACD,OAAO,IAAA,CAAKC,iBAAL,EAAP,CAAA;AACD,GAAA;AAED;AACG;;;AACHA,EAAAA,iBAAiB,GAAA;IACf,MAAM;MACJ/E,MADI;AAEJ8D,MAAAA,QAAQ,GAAG,EAFP;MAGJxC,WAHI;MAIJsB,QAJI;MAKJoC,IALI;AAMJC,MAAAA,QAAQ,GAAG,KANP;AAOJC,MAAAA,QAAQ,GAAG,KAPP;AAQJC,MAAAA,SAAS,GAAG,KARR;AASJC,MAAAA,QAAQ,GAAG,KATP;MAUJnF,QAVI;MAWJoF,MAXI;MAYJC,OAZI;MAaJC,QAbI;AAcJC,MAAAA,WAAW,GAAG,GAdV;AAeJC,MAAAA,SAAAA;AAfI,KAAA,GAgBF,KAAK3F,KAhBT,CAAA;IAiBA,MAAM;AAAEL,MAAAA,aAAAA;AAAF,KAAA,GAAoB,KAAKoB,KAA/B,CAAA;AACA,IAAA,MAAM6E,KAAK,GAAG1F,MAAM,CAAC0F,KAAP,KAAiB7C,SAAjB,GAA6BmC,IAA7B,GAAoChF,MAAM,CAAC0F,KAAzD,CAAA;IACA,MAAM;MAAExF,WAAF;AAAeyF,MAAAA,WAAAA;AAAf,KAAA,GAA+B1F,QAArC,CAAA;AACA,IAAA,MAAMkE,SAAS,GAAGH,YAAY,CAASF,QAAT,CAA9B,CAAA;;AACA,IAAA,MAAM8B,YAAY,GAAGC,QAAQ,CAAC7F,MAAM,CAACI,KAAR,CAAR,GAChBJ,MAAM,CAACI,KADS,GAEjB,EAFJ,CAAA;;AAGA,IAAA,MAAM0F,WAAW,GAAG5F,WAAW,CAAC6F,cAAZ,CAA2BH,YAA3B,CAApB,CAAA;IACA,MAAM1G,QAAQ,GAAGM,oBAAoB,CAAC,KAAKqB,KAAL,CAAWpB,aAAZ,CAArC,CAAA;AACA,IAAA,MAAMuG,UAAU,GAAoC;AAClDC,MAAAA,MAAM,EAAE,IAAA,CAAKrC,UAAL,CAAgB1E,QAAhB,CAD0C;MAElDkB,KAAK,EAAEX,aAAa,CAACJ,GAAd,CAAkB,CAACK,SAAD,EAAYyB,KAAZ,KAAqB;QAC5C,MAAM;UAAE5B,GAAF;AAAOD,UAAAA,IAAAA;SAASI,GAAAA,SAAtB,CAD4C;;QAG5C,MAAMwG,QAAQ,GAAG5G,IAAjB,CAAA;QACA,MAAMa,UAAU,GAAGD,WAAW,CAAC6F,cAAZ,CAA2BH,YAA3B,EAAyCM,QAAzC,CAAnB,CAAA;QACA,MAAMC,eAAe,GAAG7E,WAAW,GAC9BA,WAAW,CAACH,KAAD,CADmB,GAE/B0B,SAFJ,CAAA;QAGA,MAAMuD,YAAY,GAAGxD,QAAQ,CAACE,GAAT,GAAe0C,WAAf,GAA6BrE,KAAlD,CAAA;AACA,QAAA,MAAMkF,YAAY,GAAGnG,WAAW,CAACoG,UAAZ,CACnBnG,UADmB,EAEnBiG,YAFmB,EAGnBF,QAHmB,EAInBX,QAJmB,EAKnBC,WALmB,CAArB,CAAA;QAOA,OAAO,IAAA,CAAKe,oBAAL,CAA0B;UAC/BhH,GAD+B;UAE/B4B,KAF+B;AAG/B6D,UAAAA,IAAI,EAAEA,IAAI,IAAOA,IAAP,SAAe7D,KAHM;UAI/BqF,SAAS,EAAErF,KAAK,GAAG,CAJY;AAK/BsF,UAAAA,WAAW,EAAEtF,KAAK,GAAGjC,QAAQ,CAACkE,MAAT,GAAkB,CALR;AAM/BjD,UAAAA,UAAU,EAAEA,UANmB;UAO/BkG,YAP+B;UAQ/BF,eAR+B;AAS/BO,UAAAA,QAAQ,EAAER,QATqB;UAU/BS,YAAY,EAAE7C,QAAQ,CAAC1D,KAVQ;AAW/B+E,UAAAA,SAAS,EAAEA,SAAS,IAAIhE,KAAK,KAAK,CAXH;UAY/BkE,MAZ+B;UAa/BC,OAb+B;AAc/BG,UAAAA,SAAAA;AAd+B,SAA1B,CAAP,CAAA;AAgBD,OAhCM,CAF2C;MAmClDmB,SAAS,EAAA,mCAAA,GAAsCd,WAAW,CAACpC,IAnCT;MAoClDuB,QApCkD;MAqClDrC,QArCkD;MAsClDkB,QAtCkD;MAuClDrD,UAAU,EAAE,KAAKA,UAvCiC;MAwClDyE,QAxCkD;MAyClDE,QAzCkD;MA0ClDpF,MA1CkD;MA2ClD0F,KA3CkD;MA4ClDC,WA5CkD;MA6ClDzG,QA7CkD;MA8ClDuG,SA9CkD;AA+ClDxF,MAAAA,QAAAA;KA/CF,CAAA;IAkDA,MAAM4G,QAAQ,GAAGxC,WAAW,CAC1B,oBAD0B,EAE1BpE,QAF0B,EAG1BkE,SAH0B,CAA5B,CAAA;AAKA,IAAA,oBAAOG,KAAC,CAAAwC,aAAD,CAACD,QAAD,EAAc,EAAA,GAAAb,UAAAA;AAAA,KAAd,CAAP,CAAA;AACD,GAAA;AAED;AACG;;;AACHrB,EAAAA,kBAAkB,GAAA;IAChB,MAAM;MACJ3E,MADI;MAEJ4C,QAFI;MAGJkB,QAHI;AAIJmB,MAAAA,QAAQ,GAAG,KAJP;AAKJC,MAAAA,QAAQ,GAAG,KALP;AAMJC,MAAAA,SAAS,GAAG,KANR;AAOJC,MAAAA,QAAQ,GAAG,KAPP;MAQJ2B,SARI;MASJC,WATI;MAUJ3B,MAVI;MAWJC,OAXI;MAYJpG,QAAQ,EAAEkB,KAAK,GAAG,EAZd;MAaJH,QAbI;MAcJwF,SAdI;AAeJT,MAAAA,IAAAA;AAfI,KAAA,GAgBF,KAAKlF,KAhBT,CAAA;IAiBA,MAAM;MAAEmH,OAAF;AAAWtB,MAAAA,WAAAA;AAAX,KAAA,GAA2B1F,QAAjC,CAAA;AACA,IAAA,MAAMyF,KAAK,GAAG1F,MAAM,CAAC0F,KAAP,IAAgBV,IAA9B,CAAA;IAEA,MAAM;MAAEkC,MAAF;MAAU,GAAGC,OAAAA;KAAYnD,GAAAA,YAAY,CAASF,QAAT,CAA3C,CAAA;IACA,MAAMsD,MAAM,GAAGC,SAAS,CAASrH,MAAT,EAAiBkH,MAAjB,EAAyBD,OAAzB,CAAxB,CAAA;AACA,IAAA,oBACE3C,KAAC,CAAAwC,aAAD,CAACM,MAAD;AACE7E,MAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE;AACzBwE,MAAAA,QAAQ,EAAA;MACR1G,QAAQ,EAAE,KAAK+B;AACf0C,MAAAA,MAAM,EAAEA;AACRC,MAAAA,OAAO,EAAEA;AACT6B,MAAAA,OAAO,EAAEA;AACTnH,MAAAA,MAAM,EAAEA;AACR8D,MAAAA,QAAQ,EAAEA;AACV7D,MAAAA,QAAQ,EAAEA;AACVqC,MAAAA,KAAK,EAAElC;AACP6E,MAAAA,QAAQ,EAAEA;AACVC,MAAAA,QAAQ,EAAEA;AACV6B,MAAAA,SAAS,EAAEA;AACX3B,MAAAA,QAAQ,EAAEA;AACVmC,MAAAA,KAAK,EAAE7B;AACPsB,MAAAA,WAAW,EAAEA;AACbrB,MAAAA,WAAW,EAAEA;AACbR,MAAAA,SAAS,EAAEA;AACXM,MAAAA,SAAS,EAAEA,SAAAA;KAnBb,CADF,CAAA;AAuBD,GAAA;AAED;AACG;;;AACHhB,EAAAA,iBAAiB,GAAA;IACf,MAAM;MACJzE,MADI;MAEJ4C,QAFI;MAGJkB,QAHI;MAIJ5E,QAAQ,EAAEkB,KAAK,GAAG,EAJd;AAKJ6E,MAAAA,QAAQ,GAAG,KALP;AAMJC,MAAAA,QAAQ,GAAG,KANP;AAOJC,MAAAA,SAAS,GAAG,KAPR;AAQJC,MAAAA,QAAQ,GAAG,KARP;MASJ4B,WATI;MAUJ3B,MAVI;MAWJC,OAXI;MAYJrF,QAZI;MAaJwF,SAbI;AAcJT,MAAAA,IAAAA;AAdI,KAAA,GAeF,KAAKlF,KAfT,CAAA;IAgBA,MAAM;MAAEmH,OAAF;MAAW/G,WAAX;AAAwByF,MAAAA,WAAAA;AAAxB,KAAA,GAAwC1F,QAA9C,CAAA;IACA,MAAM6F,WAAW,GAAG5F,WAAW,CAAC6F,cAAZ,CAClB/F,MAAM,CAACI,KADW,EAElBA,KAFkB,CAApB,CAAA;AAIA,IAAA,MAAMsF,KAAK,GAAG1F,MAAM,CAAC0F,KAAP,IAAgBV,IAA9B,CAAA;AACA,IAAA,MAAMwC,WAAW,GAAGC,WAAW,CAAC3B,WAAD,CAA/B,CAAA;IACA,MAAM;AAAEoB,MAAAA,MAAM,GAAG,QAAX;MAAqB,GAAGC,OAAAA;KAAYnD,GAAAA,YAAY,CAASF,QAAT,CAAtD,CAAA;IACA,MAAMsD,MAAM,GAAGC,SAAS,CAASrH,MAAT,EAAiBkH,MAAjB,EAAyBD,OAAzB,CAAxB,CAAA;AACA,IAAA,oBACE3C,KAAC,CAAAwC,aAAD,CAACM,MAAD;AACE7E,MAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE;AACzBwE,MAAAA,QAAQ,EAAA;MACR1G,QAAQ,EAAE,KAAK+B;AACf0C,MAAAA,MAAM,EAAEA;AACRC,MAAAA,OAAO,EAAEA;MACT6B,OAAO,EAAE,EAAE,GAAGA,OAAL;AAAcK,QAAAA,WAAAA;;AACvBxH,MAAAA,MAAM,EAAEA;AACR8D,MAAAA,QAAQ,EAAEA;AACV7D,MAAAA,QAAQ,EAAEA;AACVqC,MAAAA,KAAK,EAAElC;AACP6E,MAAAA,QAAQ,EAAEA;AACVC,MAAAA,QAAQ,EAAEA;AACVE,MAAAA,QAAQ,EAAEA;AACVmC,MAAAA,KAAK,EAAE7B;AACPsB,MAAAA,WAAW,EAAEA;AACbrB,MAAAA,WAAW,EAAEA;AACbR,MAAAA,SAAS,EAAEA;AACXM,MAAAA,SAAS,EAAEA,SAAAA;KAlBb,CADF,CAAA;AAsBD,GAAA;AAED;AACG;;;AACHX,EAAAA,WAAW,GAAA;IACT,MAAM;MACJ9E,MADI;MAEJ8D,QAFI;MAGJlB,QAHI;MAIJoC,IAJI;AAKJC,MAAAA,QAAQ,GAAG,KALP;AAMJC,MAAAA,QAAQ,GAAG,KANP;AAOJC,MAAAA,SAAS,GAAG,KAPR;AAQJC,MAAAA,QAAQ,GAAG,KARP;MASJC,MATI;MAUJC,OAVI;MAWJrF,QAXI;MAYJf,QAAQ,EAAEkB,KAAK,GAAG,EAZd;AAaJqF,MAAAA,SAAAA;AAbI,KAAA,GAcF,KAAK3F,KAdT,CAAA;AAeA,IAAA,MAAM4F,KAAK,GAAG1F,MAAM,CAAC0F,KAAP,IAAgBV,IAA9B,CAAA;IACA,MAAM;MAAEiC,OAAF;AAAWtB,MAAAA,WAAAA;AAAX,KAAA,GAA2B1F,QAAjC,CAAA;IACA,MAAM;AAAEiH,MAAAA,MAAM,GAAG,OAAX;MAAoB,GAAGC,OAAAA;KAAYnD,GAAAA,YAAY,CAASF,QAAT,CAArD,CAAA;IACA,MAAMsD,MAAM,GAAGC,SAAS,CAASrH,MAAT,EAAiBkH,MAAjB,EAAyBD,OAAzB,CAAxB,CAAA;AACA,IAAA,oBACE3C,KAAC,CAAAwC,aAAD,CAACM,MAAD,EACE;AAAAD,MAAAA,OAAO,EAAEA,OAAT;AACA5E,MAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GADzB;AAEAwE,MAAAA,QAAQ,EACR,IAHA;MAGA1G,QAAQ,EAAE,KAAK+B,cAHf;AAIA0C,MAAAA,MAAM,EAAEA,MAJR;AAKAC,MAAAA,OAAO,EAAEA,OALT;AAMAtF,MAAAA,MAAM,EAAEA,MANR;AAOA8D,MAAAA,QAAQ,EAAEA,QAPV;AAQA4B,MAAAA,KAAK,EAAEA,KARP;AASApD,MAAAA,KAAK,EAAElC,KATP;AAUA6E,MAAAA,QAAQ,EAAEA,QAVV;AAWAC,MAAAA,QAAQ,EAAEA,QAXV;AAYAE,MAAAA,QAAQ,EAAEA,QAZV;AAaAnF,MAAAA,QAAQ,EAAEA,QAbV;AAcA0F,MAAAA,WAAW,EAAEA,WAdb;AAeAR,MAAAA,SAAS,EAAEA,SAfX;AAgBAM,MAAAA,SAAS,EAAEA,SAhBX;AAiBA8B,MAAAA,KAAK,EAAC,EAAA;AAjBN,KADF,CADF,CAAA;AAsBD,GAAA;AAED;AACG;;;AACH3C,EAAAA,gBAAgB,GAAA;IACd,MAAM;MACJ5E,MADI;AAEJ8D,MAAAA,QAAQ,GAAG,EAFP;AAGJ5E,MAAAA,QAAQ,GAAG,EAHP;MAIJoC,WAJI;MAKJiE,QALI;AAMJC,MAAAA,WAAW,GAAG,GANV;MAOJ5C,QAPI;MAQJoC,IARI;AASJC,MAAAA,QAAQ,GAAG,KATP;AAUJC,MAAAA,QAAQ,GAAG,KAVP;AAWJC,MAAAA,SAAS,GAAG,KAXR;AAYJC,MAAAA,QAAQ,GAAG,KAZP;MAaJnF,QAbI;MAcJoF,MAdI;MAeJC,OAfI;AAgBJG,MAAAA,SAAAA;AAhBI,KAAA,GAiBF,KAAK3F,KAjBT,CAAA;IAkBA,MAAM;AAAEL,MAAAA,aAAAA;AAAF,KAAA,GAAoB,KAAKoB,KAA/B,CAAA;IACA,IAAI;MAAE3B,QAAQ,EAAEkB,KAAK,GAAG,EAAA;AAApB,KAAA,GAA2B,KAAKN,KAApC,CAAA;AACA,IAAA,MAAM4F,KAAK,GAAG1F,MAAM,CAAC0F,KAAP,IAAgBV,IAA9B,CAAA;AACA,IAAA,MAAMb,SAAS,GAAGH,YAAY,CAASF,QAAT,CAA9B,CAAA;IACA,MAAM;MAAE5D,WAAF;AAAeyF,MAAAA,WAAAA;AAAf,KAAA,GAA+B1F,QAArC,CAAA;;AACA,IAAA,MAAM2F,YAAY,GAAGC,QAAQ,CAAC7F,MAAM,CAACI,KAAR,CAAR,GAChBJ,MAAM,CAACI,KADS,GAEjB,EAFJ,CAAA;;IAGA,MAAMsH,WAAW,GAAG9B,YAAY,CAACvG,GAAb,CAAiB,CAACC,IAAD,EAAmB6B,KAAnB,KACnCjB,WAAW,CAAC6F,cAAZ,CAA2BzG,IAA3B,EAAiCJ,QAAQ,CAACiC,KAAD,CAAzC,CADkB,CAApB,CAAA;;IAGA,MAAMwG,gBAAgB,GAAG9B,QAAQ,CAAC7F,MAAM,CAACO,eAAR,CAAR,GACrBL,WAAW,CAAC6F,cAAZ,CAA2B/F,MAAM,CAACO,eAAlC,EAAmDrB,QAAnD,CADqB,GAErB,IAFJ,CAAA;;IAIA,IAAI,CAACkB,KAAD,IAAUA,KAAK,CAACgD,MAAN,GAAesE,WAAW,CAACtE,MAAzC,EAAiD;AAC/C;MACAhD,KAAK,GAAGA,KAAK,IAAI,EAAjB,CAAA;AACAA,MAAAA,KAAK,GAAGA,KAAK,CAACwH,MAAN,CAAa,IAAIzI,KAAJ,CAAUuI,WAAW,CAACtE,MAAZ,GAAqBhD,KAAK,CAACgD,MAArC,CAAb,CAAR,CAAA;AACD,KAtCa;;;AAyCd,IAAA,MAAM4C,UAAU,GAAoC;MAClDC,MAAM,EAAE,KAAKrC,UAAL,CAAgBxD,KAAhB,CAA0B,IAAA,CAAC,CAACuH,gBADc;AAElDf,MAAAA,SAAS,EAAE,2CAFuC;MAGlD3B,QAHkD;MAIlDrC,QAJkD;MAKlD1D,QALkD;MAMlDkB,KAAK,EAAEX,aAAa,CAACJ,GAAd,CAAkB,CAACK,SAAD,EAAYyB,KAAZ,KAAqB;QAC5C,MAAM;UAAE5B,GAAF;AAAOD,UAAAA,IAAAA;SAASI,GAAAA,SAAtB,CAD4C;;QAG5C,MAAMwG,QAAQ,GAAG5G,IAAjB,CAAA;AACA,QAAA,MAAMuI,UAAU,GAAG1G,KAAK,IAAIuG,WAAW,CAACtE,MAAxC,CAAA;QACA,MAAMjD,UAAU,GACd0H,UAAU,IAAIhC,QAAQ,CAAC7F,MAAM,CAACO,eAAR,CAAtB,GACIL,WAAW,CAAC6F,cAAZ,CAA2B/F,MAAM,CAACO,eAAlC,EAAmD2F,QAAnD,CADJ,GAEIwB,WAAW,CAACvG,KAAD,CAHjB,CAAA;QAIA,MAAMiF,YAAY,GAAGxD,QAAQ,CAACE,GAAT,GAAe0C,WAAf,GAA6BrE,KAAlD,CAAA;AACA,QAAA,MAAMkF,YAAY,GAAGnG,WAAW,CAACoG,UAAZ,CACnBnG,UADmB,EAEnBiG,YAFmB,EAGnBF,QAHmB,EAInBX,QAJmB,EAKnBC,WALmB,CAArB,CAAA;AAOA,QAAA,MAAMmB,YAAY,GAAGkB,UAAU,GAC3B/D,QAAQ,CAACvD,eAAT,IAA4B,EADD,GAE3BpB,KAAK,CAACC,OAAN,CAAc0E,QAAQ,CAAC1D,KAAvB,CAAA,GACA0D,QAAQ,CAAC1D,KAAT,CAAee,KAAf,CADA,GAEA2C,QAAQ,CAAC1D,KAAT,IAAkB,EAJtB,CAAA;QAKA,MAAM+F,eAAe,GAAG7E,WAAW,GAC9BA,WAAW,CAACH,KAAD,CADmB,GAE/B0B,SAFJ,CAAA;QAIA,OAAO,IAAA,CAAK0D,oBAAL,CAA0B;UAC/BhH,GAD+B;UAE/B4B,KAF+B;AAG/B6D,UAAAA,IAAI,EAAEA,IAAI,IAAOA,IAAP,SAAe7D,KAHM;AAI/B2G,UAAAA,SAAS,EAAED,UAJoB;AAK/BrB,UAAAA,SAAS,EAAErF,KAAK,IAAIuG,WAAW,CAACtE,MAAZ,GAAqB,CALV;UAM/BqD,WAAW,EAAEoB,UAAU,IAAI1G,KAAK,GAAGf,KAAK,CAACgD,MAAN,GAAe,CANnB;UAO/BjD,UAP+B;AAQ/BuG,UAAAA,QAAQ,EAAER,QARqB;UAS/BS,YAT+B;UAU/BN,YAV+B;UAW/BF,eAX+B;AAY/BhB,UAAAA,SAAS,EAAEA,SAAS,IAAIhE,KAAK,KAAK,CAZH;UAa/BkE,MAb+B;UAc/BC,OAd+B;AAe/BG,UAAAA,SAAAA;AAf+B,SAA1B,CAAP,CAAA;AAiBD,OA3CM,CAN2C;MAkDlDhF,UAAU,EAAE,KAAKA,UAlDiC;MAmDlDyE,QAnDkD;MAoDlDE,QApDkD;MAqDlDnF,QArDkD;MAsDlDD,MAtDkD;MAuDlD8D,QAvDkD;MAwDlD4B,KAxDkD;MAyDlDC,WAzDkD;AA0DlDF,MAAAA,SAAAA;KA1DF,CAAA;IA6DA,MAAMoB,QAAQ,GAAGxC,WAAW,CAC1B,oBAD0B,EAE1BpE,QAF0B,EAG1BkE,SAH0B,CAA5B,CAAA;AAKA,IAAA,oBAAOG,KAAC,CAAAwC,aAAD,CAACD,QAAD,EAAc,EAAA,GAAAb,UAAAA;AAAA,KAAd,CAAP,CAAA;AACD,GAAA;AAED;;;;AAIG;;;EACHO,oBAAoB,CAACzG,KAAD,EAgBnB;IACC,MAAM;MACJP,GADI;MAEJ4B,KAFI;MAGJ6D,IAHI;AAIJ8C,MAAAA,SAAS,GAAG,IAJR;AAKJtB,MAAAA,SAAS,GAAG,IALR;AAMJC,MAAAA,WAAW,GAAG,IANV;MAOJtG,UAPI;MAQJuG,QARI;MASJC,YATI;MAUJN,YAVI;MAWJF,eAXI;MAYJhB,SAZI;MAaJE,MAbI;MAcJC,OAdI;AAeJG,MAAAA,SAAAA;AAfI,KAAA,GAgBF3F,KAhBJ,CAAA;IAiBA,MAAM;MACJmF,QADI;MAEJ8B,SAFI;MAGJxB,QAHI;MAIJC,WAJI;MAKJN,QALI;MAMJpB,QANI;MAOJ7D,QAPI;AAQJ0F,MAAAA,WAAAA;AARI,KAAA,GASF,KAAK7F,KATT,CAAA;IAUA,MAAM;AACJiI,MAAAA,MAAM,EAAE;QAAEC,gBAAF;AAAoBC,QAAAA,WAAAA;AAApB,OAAA;AADJ,KAAA,GAEFhI,QAFJ,CAAA;AAGA,IAAA,MAAMiI,eAAe,GAAGF,gBAAgB,IAAIC,WAA5C,CAAA;IACA,MAAM;AAAEE,MAAAA,SAAS,GAAG,IAAd;AAAoBC,MAAAA,SAAS,GAAG,IAAA;KAASpE,GAAAA,YAAY,CACzDF,QADyD,CAA3D,CAAA;AAGA,IAAA,MAAMuE,GAAG,GAA+B;MACtCC,MAAM,EAAEH,SAAS,IAAI3B,SADiB;MAEtC+B,QAAQ,EAAEJ,SAAS,IAAI1B,WAFe;MAGtC+B,MAAM,EAAEJ,SAAS,IAAIN,SAHiB;AAItCW,MAAAA,OAAO,EAAE,KAAA;KAJX,CAAA;AAMAJ,IAAAA,GAAG,CAACI,OAAJ,GAAcC,MAAM,CAACC,IAAP,CAAYN,GAAZ,CAAiBO,CAAAA,IAAjB,CAAuBrJ,GAAD,IAA2B8I,GAAG,CAAC9I,GAAD,CAApD,CAAd,CAAA;IAEA,OAAO;AACLsJ,MAAAA,QAAQ,eACNvE,KAAC,CAAAwC,aAAD,CAACoB,eAAD;AACElD,QAAAA,IAAI,EAAEA;AACN7D,QAAAA,KAAK,EAAEA;AACPnB,QAAAA,MAAM,EAAEG;AACR2D,QAAAA,QAAQ,EAAE6C;AACVzH,QAAAA,QAAQ,EAAEwH;AACVf,QAAAA,WAAW,EAAEA;AACbrE,QAAAA,WAAW,EAAE6E;AACbZ,QAAAA,QAAQ,EAAEA;AACVC,QAAAA,WAAW,EAAEA;AACb5C,QAAAA,QAAQ,EAAEyD;AACVjB,QAAAA,QAAQ,EAAE,IAAA,CAAK3B,cAAL,CAAoBtD,UAApB;AACVS,QAAAA,QAAQ,EAAE,IAAA,CAAKyB,gBAAL,CAAsBlB,KAAtB;AACVkE,QAAAA,MAAM,EAAEA;AACRC,QAAAA,OAAO,EAAEA;AACTrF,QAAAA,QAAQ,EAAEA;AACVgF,QAAAA,QAAQ,EAAEA;AACVC,QAAAA,QAAQ,EAAEA;AACV6B,QAAAA,SAAS,EAAEA;AACX5B,QAAAA,SAAS,EAAEA;AACXM,QAAAA,SAAS,EAAEA,SAAAA;OApBb,CAFG;AAyBLmB,MAAAA,SAAS,EAAE,YAzBN;MA0BL3B,QA1BK;MA2BL6D,UAAU,EAAET,GAAG,CAACI,OA3BX;MA4BLM,SAAS,EAAEV,GAAG,CAACC,MA5BV;MA6BLU,WAAW,EAAEX,GAAG,CAACE,QA7BZ;MA8BLU,SAAS,EAAEZ,GAAG,CAACG,MA9BV;MA+BLrH,KA/BK;MAgCL5B,GAhCK;MAiCL2B,eAAe,EAAE,KAAKA,eAjCjB;MAkCLG,gBAAgB,EAAE,KAAKA,gBAlClB;MAmCLS,cAAc,EAAE,KAAKA,cAnChB;MAoCLoD,QApCK;MAqCLjF,QArCK;AAsCL6D,MAAAA,QAAQ,EAAE6C,YAAAA;KAtCZ,CAAA;AAwCD,GAAA;;AAnxBF;;AC/DD;;;;AAIG;;AACH,SAASuC,YAAT,CAAwCpJ,KAAxC,EAA+D;EAC7D,MAAM;IACJE,MADI;IAEJgF,IAFI;IAGJlB,QAHI;IAIJlB,QAJI;IAKJ1D,QALI;IAMJe,QANI;IAOJmF,QAPI;IAQJH,QARI;IASJC,QATI;IAUJC,SAVI;IAWJvE,QAXI;IAYJ0E,OAZI;IAaJD,MAbI;AAcJI,IAAAA,SAAAA;AAdI,GAAA,GAeF3F,KAfJ,CAAA;EAgBA,MAAM;AAAE4F,IAAAA,KAAAA;AAAF,GAAA,GAAY1F,MAAlB,CAAA;EACA,MAAM;IAAEiH,OAAF;AAAWtB,IAAAA,WAAAA;AAAX,GAAA,GAA2B1F,QAAjC,CAAA;EACA,MAAM;AAAEiH,IAAAA,MAAM,GAAG,UAAX;IAAuB,GAAGC,OAAAA;GAAYnD,GAAAA,YAAY,CAAOF,QAAP,CAAxD,CAAA;EACA,MAAMsD,MAAM,GAAGC,SAAS,CAACrH,MAAD,EAASkH,MAAT,EAAiBD,OAAjB,CAAxB,CAAA;AAEA,EAAA,IAAIO,WAAJ,CAAA;;EAEA,IAAIrI,KAAK,CAACC,OAAN,CAAcY,MAAM,CAACmJ,KAArB,CAAJ,EAAiC;IAC/B3B,WAAW,GAAGC,WAAW,CAAC;MACxB0B,KAAK,EAAEnJ,MAAM,CAACmJ,KAAP,CACJ9J,GADI,CACC+J,MAAD,IAAiC;AACpC,QAAA,IAAIvD,QAAQ,CAACuD,MAAD,CAAZ,EAAsB;UACpB,OAAO,EACL,GAAGA,MADE;AAEL1D,YAAAA,KAAK,EAAE0D,MAAM,CAAC1D,KAAP,KAAiB0D,MAAM,CAACC,KAAP,KAAiB,IAAjB,GAAwB,KAAxB,GAAgC,IAAjD,CAAA;WAFT,CAAA;AAID,SAAA;;AACD,QAAA,OAAOxG,SAAP,CAAA;AACD,OATI,EAUJjB,MAVI,CAUI0H,CAAD,IAAOA,CAVV,CADiB;;AAAA,KAAD,CAAzB,CAAA;AAaD,GAdD,MAcO;AAAA,IAAA,IAAA,YAAA,CAAA;;AACL;IACA,MAAMC,mBAAmB,GAAGvJ,MAA5B,CAAA;IACA,MAAMwJ,KAAK,GAAGxJ,CAAAA,YAAAA,GAAAA,MAAM,CAACyJ,IAAV,2BAAkB,CAAC,IAAD,EAAO,KAAP,CAA7B,CAAA;;IACA,IACE,CAACF,mBAAmB,CAACG,SAArB,IACAF,KAAK,CAACpG,MAAN,KAAiB,CADjB,IAEAoG,KAAK,CAACG,KAAN,CAAaC,CAAD,IAAO,OAAOA,CAAP,KAAa,SAAhC,CAHF,EAIE;AACApC,MAAAA,WAAW,GAAG,CACZ;AACElF,QAAAA,KAAK,EAAEkH,KAAK,CAAC,CAAD,CADd;AAEEjC,QAAAA,KAAK,EAAEiC,KAAK,CAAC,CAAD,CAAL,GAAW,KAAX,GAAmB,IAAA;AAF5B,OADY,EAKZ;AACElH,QAAAA,KAAK,EAAEkH,KAAK,CAAC,CAAD,CADd;AAEEjC,QAAAA,KAAK,EAAEiC,KAAK,CAAC,CAAD,CAAL,GAAW,KAAX,GAAmB,IAAA;AAF5B,OALY,CAAd,CAAA;AAUD,KAfD,MAeO;MACLhC,WAAW,GAAGC,WAAW,CAAC;AACxBgC,QAAAA,IAAI,EAAED,KADkB;AAExB;QACAE,SAAS,EAAEH,mBAAmB,CAACG,SAAAA;AAHP,OAAD,CAAzB,CAAA;AAKD,KAAA;AACF,GAAA;;AAED,EAAA,oBACEpF,KAAC,CAAAwC,aAAD,CAACM,MAAD;IACED,OAAO,EAAE,EAAE,GAAGA,OAAL;AAAcK,MAAAA,WAAAA;;AACvBxH,IAAAA,MAAM,EAAEA;AACR8D,IAAAA,QAAQ,EAAEA;AACVvB,IAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE;AACzBlC,IAAAA,QAAQ,EAAEA;AACV0E,IAAAA,OAAO,EAAEA;AACTD,IAAAA,MAAM,EAAEA;AACRkC,IAAAA,KAAK,EAAE7B,KAAK,KAAK7C,SAAV,GAAsBmC,IAAtB,GAA6BU;AACpCpD,IAAAA,KAAK,EAAEpD;AACPkG,IAAAA,QAAQ,EAAEA;AACVH,IAAAA,QAAQ,EAAEA;AACVC,IAAAA,QAAQ,EAAEA;AACVjF,IAAAA,QAAQ,EAAEA;AACV0F,IAAAA,WAAW,EAAEA;AACbR,IAAAA,SAAS,EAAEA;AACXM,IAAAA,SAAS,EAAEA,SAAAA;GAhBb,CADF,CAAA;AAoBD;;ACtFD;;;;AAIG;;AACH,MAAMoE,UAAN,SAA2CjK,SAA3C,CAGC;AACC;;;AAGG;EACHC,WAAA,CAAYC,KAAZ,EAAmC;AACjC,IAAA,KAAA,CAAMA,KAAN,CAAA,CAAA;;IADiC,IAsEnCgK,CAAAA,cAtEmC,GAsEjBV,MAAD,IAAgB;AAC/B,MAAA,MAAMW,cAAc,GAAGrI,QAAQ,CAAC0H,MAAD,EAAS,EAAT,CAA/B,CAAA;MACA,MAAM;QAAElK,QAAF;QAAY0B,QAAZ;QAAsBuG,OAAtB;AAA+BlH,QAAAA,QAAAA;AAA/B,OAAA,GAA4C,KAAKH,KAAvD,CAAA;MACA,MAAM;AAAEI,QAAAA,WAAAA;AAAF,OAAA,GAAkBD,QAAxB,CAAA;AACA,MAAA,MAAM+J,SAAS,GAAG9J,WAAW,CAAC6F,cAAZ,CAChBoB,OAAO,CAAC4C,cAAD,CADS,EAEhB7K,QAFgB,CAAlB,CAJ+B;AAU/B;;MACA,IAAIuD,WAAW,GAAkBI,SAAjC,CAAA;;AACA,MAAA,IACEoH,SAAS,CAAC/K,QAAD,CAAT,KAAwB,QAAxB,KACC8K,SAAS,CAACtG,IAAV,KAAmB,QAAnB,IAA+BsG,SAAS,CAACE,UAD1C,CADF,EAGE;QACAzH,WAAW,GAAGiG,MAAM,CAACyB,MAAP,CAAc,EAAd,EAAkBjL,QAAlB,CAAd,CAAA;AAEA,QAAA,MAAMkL,gBAAgB,GAAGjD,OAAO,CAAC/E,KAAR,EAAzB,CAAA;AACAgI,QAAAA,gBAAgB,CAAChJ,MAAjB,CAAwB2I,cAAxB,EAAwC,CAAxC,EAJA;;AAOA,QAAA,KAAK,MAAMX,MAAX,IAAqBgB,gBAArB,EAAuC;UACrC,IAAIhB,MAAM,CAACc,UAAX,EAAuB;AACrB,YAAA,KAAK,MAAM3K,GAAX,IAAkB6J,MAAM,CAACc,UAAzB,EAAqC;cACnC,IAAI3K,GAAG,IAAIkD,WAAX,EAAwB;AACtB4H,gBAAAA,KAAK,CAAC5H,WAAD,EAAclD,GAAd,CAAL,CAAA;AACD,eAAA;AACF,aAAA;AACF,WAAA;AACF,SAAA;AACF,OA/B8B;;;AAiC/BqB,MAAAA,QAAQ,CACNV,WAAW,CAACM,mBAAZ,CACE2G,OAAO,CAAC4C,cAAD,CADT,EAEEtH,WAFF,CADM,EAKNI,SALM,EAMN,IAAKyH,CAAAA,UAAL,EANM,CAAR,CAAA;AASA,MAAA,IAAA,CAAKtJ,QAAL,CAAc;AACZ+I,QAAAA,cAAc,EAAErI,QAAQ,CAAC0H,MAAD,EAAS,EAAT,CAAA;OAD1B,CAAA,CAAA;KAhHiC,CAAA;;IAGjC,MAAM;AAAElK,MAAAA,QAAQ,EAARA,SAAF;AAAYiI,MAAAA,OAAO,EAAPA,QAAAA;AAAZ,KAAA,GAAwB,KAAKrH,KAAnC,CAAA;AAEA,IAAA,IAAA,CAAKe,KAAL,GAAa;MACXkJ,cAAc,EAAE,KAAKQ,iBAAL,CAAuB,CAAvB,EAA0BrL,SAA1B,EAAoCiI,QAApC,CAAA;KADlB,CAAA;AAGD,GAAA;AAED;;;;;AAKG;;;AACHqD,EAAAA,kBAAkB,CAChBC,SADgB,EAEhBxH,SAFgB,EAEoB;IAEpC,MAAM;MAAE/D,QAAF;MAAYiI,OAAZ;AAAqBvE,MAAAA,QAAAA;AAArB,KAAA,GAAkC,KAAK9C,KAA7C,CAAA;IACA,MAAM;AAAEiK,MAAAA,cAAAA;AAAF,KAAA,GAAqB,KAAKlJ,KAAhC,CAAA;;AACA,IAAA,IACE,CAAC6J,UAAU,CAACxL,QAAD,EAAWuL,SAAS,CAACvL,QAArB,CAAX,IACA0D,QAAQ,CAACE,GAAT,KAAiB2H,SAAS,CAAC7H,QAAV,CAAmBE,GAFtC,EAGE;MACA,MAAM6H,cAAc,GAAG,IAAA,CAAKJ,iBAAL,CACrBR,cADqB,EAErB7K,QAFqB,EAGrBiI,OAHqB,CAAvB,CAAA;;AAMA,MAAA,IAAI,CAAClE,SAAD,IAAc0H,cAAc,KAAKZ,cAArC,EAAqD;AACnD,QAAA,OAAA;AACD,OAAA;;AAED,MAAA,IAAA,CAAK/I,QAAL,CAAc;AACZ+I,QAAAA,cAAc,EAAEY,cAAAA;OADlB,CAAA,CAAA;AAGD,KAAA;AACF,GAAA;AAED;;;;;AAKG;;;AACHJ,EAAAA,iBAAiB,CACfR,cADe,EAEf7K,QAFe,EAGfiI,OAHe,EAGM;IAErB,MAAM;AAAEjH,MAAAA,WAAAA;KAAgB,GAAA,IAAA,CAAKJ,KAAL,CAAWG,QAAnC,CAAA;IAEA,MAAMmJ,MAAM,GAAGlJ,WAAW,CAACqK,iBAAZ,CAA8BrL,QAA9B,EAAwCiI,OAAxC,CAAf,CAAA;;IACA,IAAIiC,MAAM,KAAK,CAAf,EAAkB;AAChB,MAAA,OAAOA,MAAP,CAAA;AACD,KAPoB;AASrB;;;IACA,OAAOW,cAAc,IAAI,CAAzB,CAAA;AACD,GAAA;AAED;;;;;AAKG;;;AAgDHO,EAAAA,UAAU,GAAA;IACR,MAAM;MAAE1H,QAAF;AAAY5C,MAAAA,MAAAA;AAAZ,KAAA,GAAuB,KAAKF,KAAlC,CAAA;IACA,OAAU8C,EAAAA,GAAAA,QAAQ,CAACE,GAAnB,IACE9C,MAAM,CAACmJ,KAAP,GAAe,gBAAf,GAAkC,gBADpC,CAAA,CAAA;AAGD,GAAA;AAED;AACG;;;AACHjF,EAAAA,MAAM,GAAA;IACJ,MAAM;MACJc,IADI;MAEJ4F,QAFI;AAGJ3F,MAAAA,QAAQ,GAAG,KAHP;AAIJC,MAAAA,QAAQ,GAAG,KAJP;AAKJ6B,MAAAA,SAAS,GAAG,KALR;AAMJzF,MAAAA,WAAW,GAAG,EANV;MAOJpC,QAPI;MAQJyG,WARI;MASJJ,QATI;MAUJC,WAVI;MAWJ5C,QAXI;MAYJyC,MAZI;MAaJzE,QAbI;MAcJ0E,OAdI;MAeJ6B,OAfI;MAgBJlH,QAhBI;AAiBJ6D,MAAAA,QAAAA;AAjBI,KAAA,GAkBF,KAAKhE,KAlBT,CAAA;IAoBA,MAAM;MAAEmH,OAAF;AAAWc,MAAAA,MAAAA;AAAX,KAAA,GAAsB9H,QAA5B,CAAA;IACA,MAAM;AAAEgI,MAAAA,WAAW,EAAE4C,YAAAA;AAAf,KAAA,GAAgC9C,MAAtC,CAAA;IACA,MAAM;AAAEgC,MAAAA,cAAAA;AAAF,KAAA,GAAqB,KAAKlJ,KAAhC,CAAA;IACA,MAAM;AAAEqG,MAAAA,MAAM,GAAG,QAAX;MAAqB,GAAG/C,SAAAA;KAAcH,GAAAA,YAAY,CAAOF,QAAP,CAAxD,CAAA;IACA,MAAMsD,MAAM,GAAGC,SAAS,CAAO;AAAE3D,MAAAA,IAAI,EAAE,QAAA;AAAR,KAAP,EAA2BwD,MAA3B,EAAmCD,OAAnC,CAAxB,CAAA;AAEA,IAAA,MAAMmC,MAAM,GAAGjC,OAAO,CAAC4C,cAAD,CAAP,IAA2B,IAA1C,CAAA;AACA,IAAA,IAAIe,YAAJ,CAAA;;AAEA,IAAA,IAAI1B,MAAJ,EAAY;AACV;AACA;AACA0B,MAAAA,YAAY,GAAG1B,MAAM,CAAC1F,IAAP,GACX0F,MADW,GAEXV,MAAM,CAACyB,MAAP,CAAc,EAAd,EAAkBf,MAAlB,EAA0B;AAAE1F,QAAAA,IAAI,EAAEkH,QAAAA;AAAR,OAA1B,CAFJ,CAAA;AAGD,KAAA;;IAED,MAAMpD,WAAW,GAAGL,OAAO,CAAC9H,GAAR,CAAY,CAAC+J,MAAD,EAAqBjI,KAArB,MAAwC;MACtEoG,KAAK,EAAE6B,MAAM,CAAC1D,KAAP,iBAA0BvE,KAAK,GAAG,CAAlC,CAD+D;AAEtEmB,MAAAA,KAAK,EAAEnB,KAAAA;AAF+D,KAAxC,CAAZ,CAApB,CAAA;AAKA,IAAA,oBACEmD,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,MAAAA,SAAS,EAAC,gCAAA;AAAf,KAAA,eACEtC,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,MAAAA,SAAS,EAAC,YAAA;AAAV,KAAL,eACEtC,KAAC,CAAAwC,aAAD,CAACM,MAAD,EACE;MAAA7E,EAAE,EAAE,IAAK+H,CAAAA,UAAL,EAAJ;AACAtK,MAAAA,MAAM,EAAE;AAAE0D,QAAAA,IAAI,EAAE,QAAR;AAAkBqH,QAAAA,OAAO,EAAE,CAAA;OADnC;MAEAnK,QAAQ,EAAE,KAAKkJ,cAFf;AAGAzE,MAAAA,MAAM,EAAEA,MAHR;AAIAC,MAAAA,OAAO,EAAEA,OAJT;AAKAhD,MAAAA,KAAK,EAAEyH,cALP;AAMA5C,MAAAA,OAAO,EAAE;AAAEK,QAAAA,WAAAA;OANX;AAOAvH,MAAAA,QAAQ,EAAEA,QAPV;AAQA0F,MAAAA,WAAW,EAAEA,WARb;AAQwB,MAAA,GACpBxB,SATJ;AAUAoD,MAAAA,KAAK,EAAC,EAAA;AAVN,KADF,CADF,CADF,EAgBG6B,MAAM,KAAK,IAAX,iBACC9E,mBAAA,CAACuG,YAAD,EAAa;AACX7F,MAAAA,IAAI,EAAEA,IADK;AAEXhF,MAAAA,MAAM,EAAE8K,YAFG;AAGXhH,MAAAA,QAAQ,EAAEA,QAHC;AAIXxC,MAAAA,WAAW,EAAEA,WAJF;AAKXsB,MAAAA,QAAQ,EAAEA,QALC;AAMX2C,MAAAA,QAAQ,EAAEA,QANC;AAOXC,MAAAA,WAAW,EAAEA,WAPF;AAQXtG,MAAAA,QAAQ,EAAEA,QARC;AASXyG,MAAAA,WAAW,EAAEA,WATF;AAUX/E,MAAAA,QAAQ,EAAEA,QAVC;AAWXyE,MAAAA,MAAM,EAAEA,MAXG;AAYXC,MAAAA,OAAO,EAAEA,OAZE;AAaXrF,MAAAA,QAAQ,EAAEA,QAbC;AAcXgF,MAAAA,QAAQ,EAAEA,QAdC;AAeXC,MAAAA,QAAQ,EAAEA,QAfC;AAgBX6B,MAAAA,SAAS,EAAEA,SAAAA;AAhBA,KAAb,CAjBJ,CADF,CAAA;AAuCD,GAAA;;AArNF;;ACrBD;AACA;AACA;;AACA,MAAMiE,6BAA6B,GAAG,eAAtC;AAGA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,SAA5B,CAAA;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,SAASC,WAAT,CAAuCpL,KAAvC,EAA8D;EAC5D,MAAM;IAAEG,QAAF;IAAYW,QAAZ;IAAsB1B,QAAtB;AAAgCoD,IAAAA,KAAK,EAAE6I,YAAAA;AAAvC,GAAA,GAAwDrL,KAA9D,CAAA;EACA,MAAM,CAACsL,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAACH,YAAD,CAA1C,CAAA;EACA,MAAM;AAAEI,IAAAA,WAAAA;GAAgBtL,GAAAA,QAAQ,CAAC8H,MAAjC,CAAA;EAEA,IAAIzF,KAAK,GAAGpD,QAAZ,CAAA;AAEA;;;AAGG;;AACH,EAAA,MAAMsM,YAAY,GAAGC,WAAW,CAC7BnJ,KAAD,IAAqC;AACnC;AACA+I,IAAAA,YAAY,CAAC/I,KAAD,CAAZ,CAFmC;AAKnC;;IACA,IAAI,CAAA,EAAA,GAAGA,KAAH,EAAWoJ,MAAX,CAAkB,CAAlB,CAAA,KAAyB,GAA7B,EAAkC;AAChCpJ,MAAAA,KAAK,SAAOA,KAAZ,CAAA;AACD,KARkC;AAWnC;AACA;;;AACA,IAAA,MAAMqJ,SAAS,GACb,OAAOrJ,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACsJ,KAAN,CAAYZ,6BAAZ,CAA7B,GACIa,QAAQ,CAACvJ,KAAK,CAACwJ,OAAN,CAAcb,mBAAd,EAAmC,EAAnC,CAAD,CADZ,GAEIY,QAAQ,CAACvJ,KAAD,CAHd,CAAA;IAKA1B,QAAQ,CAAC+K,SAAD,CAAR,CAAA;AACD,GApB6B,EAqB9B,CAAC/K,QAAD,CArB8B,CAAhC,CAAA;;EAwBA,IAAI,OAAOwK,SAAP,KAAqB,QAArB,IAAiC,OAAO9I,KAAP,KAAiB,QAAtD,EAAgE;AAC9D;AACA;AACA;AACA,IAAA,MAAMyJ,EAAE,GAAG,IAAIC,MAAJ,CAAW,MAAG1J,KAAH,EAAWwJ,OAAX,CAAmB,GAAnB,EAAwB,KAAxB,IAAiC,SAA5C,CAAX,CAJ8D;AAO9D;;AACA,IAAA,IAAIV,SAAS,CAACQ,KAAV,CAAgBG,EAAhB,CAAJ,EAAyB;AACvBzJ,MAAAA,KAAK,GAAG8I,SAAR,CAAA;AACD,KAAA;AACF,GAAA;;EAED,oBAAO9G,KAAC,CAAAwC,aAAD,CAACyE,WAAD,EAAiB,EAAA,GAAAzL,KAAA;AAAOZ,IAAAA,QAAQ,EAAEoD,KAAjB;AAAwB1B,IAAAA,QAAQ,EAAE4K,YAAAA;AAAlC,GAAjB,CAAP,CAAA;AACD;;ACrDD;;;;AAIG;;AACH,MAAMS,WAAN,SAA4CrM,SAA5C,CAGC;AAAA,EAAA,WAAA,GAAA;AAAA,IAAA,IAAA,KAAA,CAAA;;AAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;AAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AAAA,IAAA,IAAA,CAECiB,KAFD,GAES;AACNqL,MAAAA,sBAAsB,EAAE,KADlB;AAENC,MAAAA,oBAAoB,EAAE,EAAA;KAJzB,CAAA;;AAAA,IAAA,IAAA,CA2BCC,gBA3BD,GA2BoB,UAACpH,IAAD,EAAeqH,2BAAf,EAAsD;AAAA,MAAA,IAAvCA,2BAAuC,KAAA,KAAA,CAAA,EAAA;AAAvCA,QAAAA,2BAAuC,GAAT,KAAS,CAAA;AAAA,OAAA;;AACvE,MAAA,OAAO,CAAC/J,KAAD,EAAWf,cAAX,EAA4CgB,EAA5C,KAA2D;QAChE,MAAM;UAAErD,QAAF;UAAY0B,QAAZ;AAAsBU,UAAAA,WAAAA;SAAgB,GAAA,KAAI,CAACxB,KAAjD,CAAA;;AACA,QAAA,IAAIwC,KAAK,KAAKO,SAAV,IAAuBwJ,2BAA3B,EAAwD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA/J,UAAAA,KAAK,GAAG,EAAR,CAAA;AACD,SAAA;;AACD,QAAA,MAAMG,WAAW,GAAG,EAAE,GAAGvD,QAAL;AAAe,UAAA,CAAC8F,IAAD,GAAQ1C,KAAAA;SAA3C,CAAA;QACA1B,QAAQ,CACN6B,WADM,EAENnB,WAAW,IACTA,WADF,IACiB,EACb,GAAGA,WADU;AAEb,UAAA,CAAC0D,IAAD,GAAQzD,cAAAA;SALN,EAONgB,EAPM,CAAR,CAAA;OAbF,CAAA;KA5BH,CAAA;;IAAA,IA2DC+J,CAAAA,mBA3DD,GA2DwB/M,GAAD,IAAgB;AACpC,MAAA,OAAQmB,KAAD,IAAqB;AAC1BA,QAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;QACA,MAAM;UAAEC,QAAF;AAAY1B,UAAAA,QAAAA;AAAZ,SAAA,GAAyB,KAAKY,KAApC,CAAA;QACA,MAAMyM,cAAc,GAAG,EAAE,GAAGrN,QAAAA;SAA5B,CAAA;AACAmL,QAAAA,KAAK,CAACkC,cAAD,EAAiBhN,GAAjB,CAAL,CAAA;QACAqB,QAAQ,CAAC2L,cAAD,CAAR,CAAA;OALF,CAAA;KA5DH,CAAA;;AAAA,IAAA,IAAA,CA4ECC,eA5ED,GA4EmB,CAACC,YAAD,EAAuBvN,QAAvB,KAAsC;MACtD,MAAM;AAAE4E,QAAAA,QAAAA;AAAF,OAAA,GAAe,KAAKhE,KAA1B,CAAA;MACA,MAAM;AAAE4M,QAAAA,2BAA2B,GAAG,GAAA;OAAQ1I,GAAAA,YAAY,CAAOF,QAAP,CAA1D,CAAA;MAEA,IAAI3C,KAAK,GAAG,CAAZ,CAAA;MACA,IAAIwL,MAAM,GAAGF,YAAb,CAAA;;MACA,OAAOE,MAAM,IAAIzN,QAAjB,EAA2B;AACzByN,QAAAA,MAAM,QAAMF,YAAN,GAAqBC,2BAArB,GAAmD,EAAEvL,KAA3D,CAAA;AACD,OAAA;;AACD,MAAA,OAAOwL,MAAP,CAAA;KArFH,CAAA;;IAAA,IA8FCC,CAAAA,WA9FD,GA8FgBC,QAAD,IAAkB;AAC9B,MAAA,OAAO,CAACvK,KAAD,EAAaf,cAAb,KAA+C;QACpD,IAAIsL,QAAQ,KAAKvK,KAAjB,EAAwB;AACtB,UAAA,OAAA;AACD,SAAA;;QACD,MAAM;UAAEpD,QAAF;UAAY0B,QAAZ;AAAsBU,UAAAA,WAAAA;AAAtB,SAAA,GAAsC,KAAKxB,KAAjD,CAAA;AAEAwC,QAAAA,KAAK,GAAG,IAAKkK,CAAAA,eAAL,CAAqBlK,KAArB,EAA4BpD,QAA5B,CAAR,CAAA;QACA,MAAMuD,WAAW,GAAsB,EACrC,GAAIvD,QAAAA;SADN,CAAA;AAGA,QAAA,MAAM4N,OAAO,GAAsB;AAAE,UAAA,CAACD,QAAD,GAAYvK,KAAAA;SAAjD,CAAA;QACA,MAAMyK,SAAS,GAAGrE,MAAM,CAACC,IAAP,CAAYlG,WAAZ,CAAyBpD,CAAAA,GAAzB,CAA8BE,GAAD,IAAQ;AACrD,UAAA,MAAMoN,MAAM,GAAGG,OAAO,CAACvN,GAAD,CAAP,IAAgBA,GAA/B,CAAA;UACA,OAAO;AAAE,YAAA,CAACoN,MAAD,GAAUlK,WAAW,CAAClD,GAAD,CAAA;WAA9B,CAAA;AACD,SAHiB,CAAlB,CAAA;QAIA,MAAMyN,UAAU,GAAGtE,MAAM,CAACyB,MAAP,CAAc,EAAd,EAAkB,GAAG4C,SAArB,CAAnB,CAAA;AAEA,QAAA,IAAA,CAAK/L,QAAL,CAAc;AAAEkL,UAAAA,sBAAsB,EAAE,IAAA;SAAxC,CAAA,CAAA;QAEAtL,QAAQ,CACNoM,UADM,EAEN1L,WAAW,IACTA,WADF,IACiB,EACb,GAAGA,WADU;AAEb,UAAA,CAACgB,KAAD,GAASf,cAAAA;AAFI,SAHX,CAAR,CAAA;OAnBF,CAAA;KA/FH,CAAA;;AAAA,IAAA,IAAA,CA0JC0L,cA1JD,GA0JmBjN,MAAD,IAAwB,MAAK;AAC5C,MAAA,IAAI,CAACA,MAAM,CAACmM,oBAAZ,EAAkC;AAChC,QAAA,OAAA;AACD,OAAA;;MACD,MAAM;QAAEjN,QAAF;QAAY0B,QAAZ;AAAsBX,QAAAA,QAAAA;AAAtB,OAAA,GAAmC,KAAKH,KAA9C,CAAA;MACA,MAAM2C,WAAW,GAAG,EAAE,GAAGvD,QAAAA;OAAzB,CAAA;MAEA,IAAIwE,IAAI,GAAuBb,SAA/B,CAAA;;AACA,MAAA,IAAIgD,QAAQ,CAAC7F,MAAM,CAACmM,oBAAR,CAAZ,EAA2C;AACzCzI,QAAAA,IAAI,GAAG1D,MAAM,CAACmM,oBAAP,CAA4BzI,IAAnC,CAAA;;AACA,QAAA,IAAIwJ,OAAO,IAAIlN,MAAM,CAACmM,oBAAtB,EAA4C;UAC1C,MAAM;AAAEjM,YAAAA,WAAAA;AAAF,WAAA,GAAkBD,QAAxB,CAAA;AACA,UAAA,MAAMkN,SAAS,GAAGjN,WAAW,CAAC6F,cAAZ,CAChB;AAAEqH,YAAAA,IAAI,EAAEpN,MAAM,CAACmM,oBAAP,CAA4Be,OAA5B,CAAA;WADQ,EAEhBhO,QAFgB,CAAlB,CAAA;UAIAwE,IAAI,GAAGyJ,SAAS,CAACzJ,IAAjB,CAAA;AACD,SAAA;AACF,OAAA;;MAED,MAAMiJ,MAAM,GAAG,IAAA,CAAKH,eAAL,CAAqB,QAArB,EAA+B/J,WAA/B,CAAf,CApB4C;;MAsB5Cd,GAAG,CAACc,WAAD,EAAmCkK,MAAnC,EAA2C,KAAKU,eAAL,CAAqB3J,IAArB,CAA3C,CAAH,CAAA;MAEA9C,QAAQ,CAAC6B,WAAD,CAAR,CAAA;KAlLH,CAAA;AAAA,GAAA;;AAOC;;;;AAIG;EACH6K,UAAU,CAACtI,IAAD,EAAa;IACrB,MAAM;AAAEhF,MAAAA,MAAAA;AAAF,KAAA,GAAa,KAAKF,KAAxB,CAAA;AACA,IAAA,OACEX,KAAK,CAACC,OAAN,CAAcY,MAAM,CAACoF,QAArB,CAAA,IAAkCpF,MAAM,CAACoF,QAAP,CAAgBmI,OAAhB,CAAwBvI,IAAxB,CAAA,KAAkC,CAAC,CADvE,CAAA;AAGD,GAAA;AAED;;;;;;;AAOG;;;AAmGH;;;AAGG;EACHqI,eAAe,CAAC3J,IAAD,EAA0B;AACvC,IAAA,QAAQA,IAAR;AACE,MAAA,KAAK,QAAL;AACE,QAAA,OAAO,WAAP,CAAA;;AACF,MAAA,KAAK,OAAL;AACE,QAAA,OAAO,EAAP,CAAA;;AACF,MAAA,KAAK,SAAL;AACE,QAAA,OAAO,KAAP,CAAA;;AACF,MAAA,KAAK,MAAL;AACE,QAAA,OAAO,IAAP,CAAA;;AACF,MAAA,KAAK,QAAL;AACE,QAAA,OAAO,CAAP,CAAA;;AACF,MAAA,KAAK,QAAL;AACE,QAAA,OAAO,EAAP,CAAA;;AACF,MAAA;AACE;AACA,QAAA,OAAO,WAAP,CAAA;AAfJ,KAAA;AAiBD,GAAA;AAED;;;;AAIG;;;AA4BH;AACG;AACHQ,EAAAA,MAAM,GAAA;IACJ,MAAM;AACJlE,MAAAA,MAAM,EAAEwN,SADJ;AAEJ1J,MAAAA,QAAQ,GAAG,EAFP;MAGJ5E,QAHI;MAIJoC,WAJI;MAKJsB,QALI;MAMJoC,IANI;AAOJI,MAAAA,QAAQ,GAAG,KAPP;AAQJH,MAAAA,QAAQ,GAAG,KARP;AASJC,MAAAA,QAAQ,GAAG,KATP;MAUJ6B,SAVI;MAWJxB,QAXI;MAYJC,WAZI;MAaJH,MAbI;MAcJC,OAdI;AAeJrF,MAAAA,QAAAA;AAfI,KAAA,GAgBF,KAAKH,KAhBT,CAAA;IAkBA,MAAM;MAAEiI,MAAF;MAAUpC,WAAV;AAAuBzF,MAAAA,WAAAA;AAAvB,KAAA,GAAuCD,QAA7C,CAAA;IACA,MAAM;AAAEgI,MAAAA,WAAAA;AAAF,KAAA,GAAkBF,MAAxB,CAAA;IACA,MAAM/H,MAAM,GAAGE,WAAW,CAAC6F,cAAZ,CAA2ByH,SAA3B,EAAsCtO,QAAtC,CAAf,CAAA;AACA,IAAA,MAAMiF,SAAS,GAAGH,YAAY,CAAOF,QAAP,CAA9B,CAAA;IACA,MAAM;MAAEoG,UAAU,EAAEuD,gBAAgB,GAAG,EAAA;AAAjC,KAAA,GAAwCzN,MAA9C,CAAA;AAEA,IAAA,MAAM0F,KAAK,GAAG1F,MAAM,CAAC0F,KAAP,KAAiB7C,SAAjB,GAA6BmC,IAA7B,GAAoChF,MAAM,CAAC0F,KAAzD,CAAA;IACA,MAAMgI,WAAW,GAAGvJ,SAAS,CAACuJ,WAAV,IAAyB1N,MAAM,CAAC0N,WAApD,CAAA;AACA,IAAA,IAAIC,iBAAJ,CAAA;;IACA,IAAI;AACF,MAAA,MAAMzD,UAAU,GAAGxB,MAAM,CAACC,IAAP,CAAY8E,gBAAZ,CAAnB,CAAA;MACAE,iBAAiB,GAAGC,eAAe,CAAC1D,UAAD,EAAa/F,SAAS,CAAC0J,KAAvB,CAAnC,CAAA;KAFF,CAGE,OAAOC,GAAP,EAAY;AACZ,MAAA,oBACExJ,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,KAAG,CAAAwC,aAAH,CAAG,GAAH,EAAG;AAAAF,QAAAA,SAAS,EAAC,cAAV;AAAyBmH,QAAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAA;AAAT,SAAA;AAAhC,OAAH,YAAA,EACWhJ,IAAI,IAAI,MADnB,gCAAA,eAEEV,KAAM,CAAAwC,aAAN,CAAM,IAAN,EAAM,IAAN,EAAMgH,GAAa,CAACG,OAApB,CAFF,EAGI,GAHJ,CADF,eAKE3J,KAAM,CAAAwC,aAAN,CAAM,KAAN,EAAM,IAAN,EAAMoH,IAAI,CAACC,SAAL,CAAenO,MAAf,CAAN,CALF,CADF,CAAA;AASD,KAAA;;IAED,MAAM6G,QAAQ,GAAGxC,WAAW,CAC1B,qBAD0B,EAE1BpE,QAF0B,EAG1BkE,SAH0B,CAA5B,CAAA;AAMA,IAAA,MAAMiK,aAAa,GAAG;AACpB1I,MAAAA,KAAK,EAAEvB,SAAS,CAACuB,KAAV,IAAmBA,KADN;MAEpBgI,WAFoB;AAGpBxD,MAAAA,UAAU,EAAEyD,iBAAiB,CAACtO,GAAlB,CAAuB2F,IAAD,IAAS;AACzC,QAAA,MAAMqH,2BAA2B,GAAGhE,GAAG,CAACrI,MAAD,EAAS,CAC9CqO,cAD8C,EAE9CrJ,IAF8C,EAG9CsJ,wBAH8C,CAAT,CAAvC,CAAA;QAKA,MAAMC,aAAa,GAAGlC,2BAA2B,GAC7CvI,QAAQ,CAACqI,oBADoC,GAE7CrI,QAAQ,CAACkB,IAAD,CAFZ,CAAA;QAGA,MAAMwJ,MAAM,GAAGxK,YAAY,CAAOuK,aAAP,CAAZ,CAAkCrH,MAAlC,KAA6C,QAA5D,CAAA;QACA,MAAMuH,aAAa,GAAgBlL,GAAG,CAACX,QAAD,EAAW,CAACoC,IAAD,CAAX,EAAmB,EAAnB,CAAtC,CAAA;QAEA,OAAO;AACL0J,UAAAA,OAAO,eACLpK,KAAC,CAAAwC,aAAD,CAACmB,WAAD,EACE;AAAA1I,YAAAA,GAAG,EAAEyF,IAAL;AACAA,YAAAA,IAAI,EAAEA,IADN;AAEAI,YAAAA,QAAQ,EAAE,IAAA,CAAKkI,UAAL,CAAgBtI,IAAhB,CAFV;AAGAhF,YAAAA,MAAM,EAAEuD,GAAG,CAACvD,MAAD,EAAS,CAACqO,cAAD,EAAiBrJ,IAAjB,CAAT,EAAiC,EAAjC,CAHX;AAIAlB,YAAAA,QAAQ,EAAEyK,aAJV;AAKAjN,YAAAA,WAAW,EAAEiC,GAAG,CAACjC,WAAD,EAAc0D,IAAd,CALhB;AAMApC,YAAAA,QAAQ,EAAE6L,aANV;AAOAlJ,YAAAA,QAAQ,EAAEA,QAPV;AAQAC,YAAAA,WAAW,EAAEA,WARb;AASAtG,YAAAA,QAAQ,EAAEqE,GAAG,CAACrE,QAAD,EAAW8F,IAAX,CATb;AAUAW,YAAAA,WAAW,EAAEA,WAVb;AAWAuG,YAAAA,sBAAsB,EAAE,IAAA,CAAKrL,KAAL,CAAWqL,sBAXnC;AAYAU,YAAAA,WAAW,EAAE,IAAA,CAAKA,WAAL,CAAiB5H,IAAjB,CAZb;AAaApE,YAAAA,QAAQ,EAAE,IAAKwL,CAAAA,gBAAL,CACRpH,IADQ,EAERqH,2BAFQ,CAbV;AAiBAhH,YAAAA,MAAM,EAAEA,MAjBR;AAkBAC,YAAAA,OAAO,EAAEA,OAlBT;AAmBArF,YAAAA,QAAQ,EAAEA,QAnBV;AAoBAgF,YAAAA,QAAQ,EAAEA,QApBV;AAqBAC,YAAAA,QAAQ,EAAEA,QArBV;AAsBA6B,YAAAA,SAAS,EAAEA,SAtBX;AAuBAuF,YAAAA,mBAAmB,EAAE,IAAKA,CAAAA,mBAAAA;AAvB1B,WADF,CAFG;UA6BLtH,IA7BK;UA8BLE,QA9BK;UA+BLD,QA/BK;UAgCLG,QAhCK;AAiCLoJ,UAAAA,MAAAA;SAjCF,CAAA;AAmCD,OA/CW,CAHQ;MAmDpBtJ,QAnDoB;MAoDpBD,QApDoB;MAqDpBG,QArDoB;MAsDpBxC,QAtDoB;MAuDpBkB,QAvDoB;MAwDpB9D,MAxDoB;MAyDpBd,QAzDoB;MA0DpByG,WA1DoB;AA2DpB1F,MAAAA,QAAAA;KA3DF,CAAA;IA6DA,oBAAOqE,KAAA,CAAAwC,aAAA,CAACD,QAAD,EAAS,EAAA,GAAKuH,aAAL;AAAoB3N,MAAAA,UAAU,EAAE,IAAKwM,CAAAA,cAAAA;AAArC,KAAT,CAAP,CAAA;AACD,GAAA;;AAtSF;;ACfD;;AACA,MAAM0B,eAAe,GAA8B;AACjDC,EAAAA,KAAK,EAAE,YAD0C;AAEjDC,EAAAA,OAAO,EAAE,cAFwC;AAGjDC,EAAAA,OAAO,EAAE,aAHwC;AAIjDC,EAAAA,MAAM,EAAE,aAJyC;AAKjDC,EAAAA,MAAM,EAAE,aALyC;AAMjDC,EAAAA,MAAM,EAAE,aANyC;AAOjDC,EAAAA,IAAI,EAAE,WAAA;AAP2C,CAAnD,CAAA;AAUA;;;;;;;;;AASG;;AACH,SAASC,iBAAT,CACEnP,MADF,EAEEmE,SAFF,EAGEvB,QAHF,EAIE3C,QAJF,EAI0B;AAExB,EAAA,MAAMmP,KAAK,GAAGjL,SAAS,CAACiL,KAAxB,CAAA;EACA,MAAM;AAAErH,IAAAA,MAAAA;AAAF,GAAA,GAAa9H,QAAnB,CAAA;;AACA,EAAA,IAAI,OAAOmP,KAAP,KAAiB,UAArB,EAAiC;AAC/B,IAAA,OAAOA,KAAP,CAAA;AACD,GAAA;;EACD,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,IAAIrH,MAA1C,EAAkD;IAChD,OAAOA,MAAM,CAACqH,KAAD,CAAb,CAAA;AACD,GAAA;;AAED,EAAA,MAAMC,UAAU,GAAGC,aAAa,CAACtP,MAAD,CAAhC,CAAA;AACA,EAAA,MAAM0D,IAAI,GAAWvE,KAAK,CAACC,OAAN,CAAciQ,UAAd,CACjBA,GAAAA,UAAU,CAAC,CAAD,CADO,GAEjBA,UAAU,IAAI,EAFlB,CAAA;AAGA,EAAA,MAAME,aAAa,GAAGZ,eAAe,CAACjL,IAAD,CAArC,CAfwB;AAkBxB;;EACA,IAAI,CAAC6L,aAAD,KAAmBvP,MAAM,CAACwP,KAAP,IAAgBxP,MAAM,CAACmJ,KAA1C,CAAJ,EAAsD;AACpD,IAAA,OAAO,MAAM,IAAb,CAAA;AACD,GAAA;;EAED,OAAOoG,aAAa,IAAIxH,MAAjB,GACHA,MAAM,CAACwH,aAAD,CADH,GAEH,MAAK;IACH,MAAMnL,wBAAwB,GAAGC,WAAW,CAI1C,0BAJ0C,EAIdpE,QAJc,EAIJkE,SAJI,CAA5C,CAAA;AAMA,IAAA,oBACEG,KAAC,CAAAwC,aAAD,CAAC1C,wBAAD,EACE;AAAApE,MAAAA,MAAM,EAAEA,MAAR;AACA4C,MAAAA,QAAQ,EAAEA,QADV;MAEA2B,MAAM,EAAA,qBAAA,GAAwBvE,MAAM,CAAC0D,IAFrC;AAGAzD,MAAAA,QAAQ,EAAEA,QAAAA;AAHV,KADF,CADF,CAAA;GATN,CAAA;AAkBD,CAAA;AAED;;;;;AAKG;;;AACH,SAASwP,iBAAT,CAAiC3P,KAAjC,EAAwD;EACtD,MAAM;AACJE,IAAAA,MAAM,EAAE0P,OADJ;AAEJ9M,IAAAA,QAAQ,EAAE+M,SAFN;IAGJ7L,QAHI;IAIJ5E,QAJI;IAKJoC,WALI;IAMJiE,QANI;IAOJC,WAPI;IAQJR,IARI;IASJpE,QATI;IAUJgM,WAVI;IAWJN,mBAXI;IAYJlH,QAZI;IAaJnF,QAbI;AAcJiM,IAAAA,sBAAsB,GAAG,KAAA;AAdrB,GAAA,GAeFpM,KAfJ,CAAA;EAgBA,MAAM;IAAE6F,WAAF;AAAezF,IAAAA,WAAAA;AAAf,GAAA,GAA+BD,QAArC,CAAA;AACA,EAAA,MAAMkE,SAAS,GAAGH,YAAY,CAAOF,QAAP,CAA9B,CAAA;EACA,MAAM8L,aAAa,GAAGvL,WAAW,CAC/B,eAD+B,EAE/BpE,QAF+B,EAG/BkE,SAH+B,CAAjC,CAAA;EAKA,MAAM0L,wBAAwB,GAAGxL,WAAW,CAI1C,0BAJ0C,EAIdpE,QAJc,EAIJkE,SAJI,CAA5C,CAAA;EAKA,MAAM2L,iBAAiB,GAAGzL,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkE,SAHmC,CAArC,CAAA;EAKA,MAAM4L,kBAAkB,GAAG1L,WAAW,CACpC,oBADoC,EAEpCpE,QAFoC,EAGpCkE,SAHoC,CAAtC,CAAA;EAKA,MAAMnE,MAAM,GAAGE,WAAW,CAAC6F,cAAZ,CAA2B2J,OAA3B,EAAoCxQ,QAApC,CAAf,CAAA;AACA,EAAA,MAAM8Q,OAAO,GAAGL,SAAS,CAACM,MAAD,CAAzB,CAAA;EACA,MAAMrN,QAAQ,GAAGsN,YAAY,CAC3BhQ,WAAW,CAACoG,UAAZ,CAAuBtG,MAAvB,EAA+BgQ,OAA/B,EAAwC9Q,QAAxC,EAAkDqG,QAAlD,EAA4DC,WAA5D,CAD2B,EAE3BmK,SAF2B,CAA7B,CAAA;AAKA;;AAEG;;AACH,EAAA,MAAMQ,0BAA0B,GAAG7L,KAAK,CAACmH,WAAN,CACjC,CAACvM,QAAD,EAAcqC,cAAd,EAA+CgB,EAA/C,KAA8D;AAC5D,IAAA,MAAM6N,KAAK,GAAG7N,EAAE,IAAIyN,OAApB,CAAA;AACA,IAAA,OAAOpP,QAAQ,CAAC1B,QAAD,EAAWqC,cAAX,EAA2B6O,KAA3B,CAAf,CAAA;AACD,GAJgC,EAKjC,CAACJ,OAAD,EAAUpP,QAAV,CALiC,CAAnC,CAAA;EAQA,MAAMyP,cAAc,GAAGlB,iBAAiB,CACtCnP,MADsC,EAEtCmE,SAFsC,EAGtCvB,QAHsC,EAItC3C,QAJsC,CAAxC,CAAA;EAMA,MAAMgF,QAAQ,GAAGqL,OAAO,CAACxQ,KAAK,CAACmF,QAAN,IAAkBd,SAAS,CAACc,QAA7B,CAAxB,CAAA;EACA,MAAMC,QAAQ,GAAGoL,OAAO,CACtBxQ,KAAK,CAACoF,QAAN,IACEf,SAAS,CAACe,QADZ,IAEEpF,KAAK,CAACE,MAAN,CAAauQ,QAFf,IAGEvQ,MAAM,CAACuQ,QAJa,CAAxB,CAAA;AAMA,EAAA,MAAMC,iBAAiB,GAAGrM,SAAS,CAAC4C,SAApC,CAtEsD;;AAwEtD,EAAA,MAAMA,SAAS,GACbyJ,iBAAiB,KAAK3N,SAAtB,GACI/C,KAAK,CAACiH,SADV,GAEIuJ,OAAO,CAACE,iBAAD,CAHb,CAAA;EAIA,MAAMrL,SAAS,GAAGmL,OAAO,CAACxQ,KAAK,CAACqF,SAAN,IAAmBhB,SAAS,CAACgB,SAA9B,CAAzB,CAAA;;EACA,IAAIuD,MAAM,CAACC,IAAP,CAAY3I,MAAZ,CAAoBoD,CAAAA,MAApB,KAA+B,CAAnC,EAAsC;AACpC,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;EAED,MAAMqN,YAAY,GAAGvQ,WAAW,CAACwQ,eAAZ,CAA4B1Q,MAA5B,EAAoC8D,QAApC,CAArB,CAAA;EAEA,MAAM;IAAE6M,QAAF;IAAY,GAAGC,gBAAAA;AAAf,GAAA,GAAoCtP,WAAW,IAAI,EAAzD,CAnFsD;;EAqFtD,MAAMiN,aAAa,GAAGsC,IAAI,CAAC/M,QAAD,EAAW,CAAC,eAAD,EAAkB,YAAlB,CAAX,CAA1B,CAAA;;EACA,IAAI,YAAA,IAAgByK,aAApB,EAAmC;AACjCA,IAAAA,aAAa,CAAC,YAAD,CAAb,GAA8BsC,IAAI,CAACtC,aAAa,CAAC,YAAD,CAAd,EAA8B,CAC9D,YAD8D,CAA9B,CAAlC,CAAA;AAGD,GAAA;;EAED,MAAMa,KAAK,gBACT9K,KAAC,CAAAwC,aAAD,CAACuJ,cAAD,OACMvQ;AACJc,IAAAA,QAAQ,EAAEuP;AACVvN,IAAAA,QAAQ,EAAEA;AACV5C,IAAAA,MAAM,EAAEA;AACR8D,IAAAA,QAAQ,EAAEyK;AACVtJ,IAAAA,QAAQ,EAAEA;AACVC,IAAAA,QAAQ,EAAEA;AACV6B,IAAAA,SAAS,EAAEA;AACX5B,IAAAA,SAAS,EAAEA;AACX7D,IAAAA,WAAW,EAAEsP;AACbjL,IAAAA,WAAW,EAAEA;AACbF,IAAAA,SAAS,EAAEkL,QAAAA;GAZb,CADF,CAAA;AAiBA,EAAA,MAAMpO,EAAE,GAAGK,QAAQ,CAACqN,MAAD,CAAnB,CA7GsD;;AAgHtD,EAAA,IAAI1I,KAAJ,CAAA;;AACA,EAAA,IAAI2E,sBAAJ,EAA4B;AAC1B3E,IAAAA,KAAK,GAAGvC,IAAR,CAAA;AACD,GAFD,MAEO;IACLuC,KAAK,GACH+G,wBAAwB,IAAItO,MAA5B,GACIgF,IADJ,GAEIb,SAAS,CAACuB,KAAV,IAAmB5F,KAAK,CAACE,MAAN,CAAa0F,KAAhC,IAAyC1F,MAAM,CAAC0F,KAAhD,IAAyDV,IAH/D,CAAA;AAID,GAAA;;AAED,EAAA,MAAM0I,WAAW,GACfvJ,SAAS,CAACuJ,WAAV,IACA5N,KAAK,CAACE,MAAN,CAAa0N,WADb,IAEA1N,MAAM,CAAC0N,WAFP,IAGA,EAJF,CAAA;AAKA,EAAA,MAAMoD,IAAI,GAAG3M,SAAS,CAAC2M,IAAvB,CAAA;AACA,EAAA,MAAMtC,MAAM,GAAGrK,SAAS,CAAC+C,MAAV,KAAqB,QAApC,CAAA;EAEA,MAAM6J,UAAU,GAAG,CAAC,YAAD,EAAe,OAAf,EAAiC/Q,QAAAA,GAAAA,MAAM,CAAC0D,IAAxC,CAAnB,CAAA;;EACA,IAAI,CAACqD,SAAD,IAAc4J,QAAd,IAA0BA,QAAQ,CAACvN,MAAT,GAAkB,CAAhD,EAAmD;IACjD2N,UAAU,CAACC,IAAX,CAAgB,kCAAhB,CAAA,CAAA;AACD,GAAA;;AACD,EAAA,IAAIlN,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,QAAQ,CAAEiN,UAAd,EAA0B;AACxB,IAAA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzCC,OAAO,CAACC,IAAR,CACE,yGADF,CAAA,CAAA;AAGD,KAAA;;AACDN,IAAAA,UAAU,CAACC,IAAX,CAAgBlN,QAAQ,CAACiN,UAAzB,CAAA,CAAA;AACD,GAAA;;EACD,IAAI5M,SAAS,CAAC4M,UAAd,EAA0B;AACxBA,IAAAA,UAAU,CAACC,IAAX,CAAgB7M,SAAS,CAAC4M,UAA1B,CAAA,CAAA;AACD,GAAA;;AAED,EAAA,MAAMO,aAAa,gBACjBhN,mBAAA,CAACwL,iBAAD,EAAkB;AAChBgB,IAAAA,IAAI,EAAEA,IADU;AAEhBlO,IAAAA,QAAQ,EAAEA,QAFM;AAGhB5C,IAAAA,MAAM,EAAEA,MAHQ;AAIhB8D,IAAAA,QAAQ,EAAEA,QAJM;IAKhByN,SAAS,EAAE,CAACxK,SAAD,IAAc4J,QAAd,IAA0BA,QAAQ,CAACvN,MAAT,GAAkB,CALvC;AAMhBnD,IAAAA,QAAQ,EAAEA,QAAAA;AANM,GAAlB,CADF,CAAA;EAUA,MAAMuR,eAAe,GAAGzK,SAAS,GAAGlE,SAAH,gBAC/ByB,KAAC,CAAAwC,aAAD,CAACiJ,kBAAD;AACE0B,IAAAA,MAAM,EAAEd;AACRrP,IAAAA,WAAW,EAAEA;AACbsB,IAAAA,QAAQ,EAAEA;AACV5C,IAAAA,MAAM,EAAEA;AACR8D,IAAAA,QAAQ,EAAEA;AACV7D,IAAAA,QAAQ,EAAEA,QAAAA;GANZ,CADF,CAAA;AAUA,EAAA,MAAMyR,UAAU,GAA+C;AAC7DhE,IAAAA,WAAW,eACTpJ,KAAA,CAAAwC,aAAA,CAAC+I,wBAAD,EAAyB;MACvBtN,EAAE,EAAKA,EAAL,GADqB,eAAA;AAEvBmL,MAAAA,WAAW,EAAEA,WAFU;AAGvB1N,MAAAA,MAAM,EAAEA,MAHe;AAIvB8D,MAAAA,QAAQ,EAAEA,QAJa;AAKvB7D,MAAAA,QAAQ,EAAEA,QAAAA;AALa,KAAzB,CAF2D;AAU7D0R,IAAAA,cAAc,EAAEjE,WAV6C;AAW7DoD,IAAAA,IAAI,EAAEQ,aAXuD;IAY7DM,OAAO,EAAE,OAAOd,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCjO,SAZkB;AAa7D4O,IAAAA,MAAM,EAAED,eAbqD;AAc7D/L,IAAAA,SAAS,EAAEsB,SAAS,GAAGlE,SAAH,GAAe8N,QAd0B;IAe7DpO,EAf6D;IAgB7DgF,KAhB6D;IAiB7DiH,MAjB6D;IAkB7D5N,QAlB6D;IAmB7DgM,WAnB6D;IAoB7DN,mBApB6D;IAqB7DlH,QArB6D;IAsB7DH,QAtB6D;IAuB7DC,QAvB6D;IAwB7D6B,SAxB6D;IAyB7D0J,YAzB6D;IA0B7DM,UAAU,EAAEA,UAAU,CAACc,IAAX,CAAgB,GAAhB,CAAA,CAAqBC,IAArB,EA1BiD;IA2B7DnM,WA3B6D;IA4B7DzG,QA5B6D;IA6B7Dc,MA7B6D;IA8B7D8D,QA9B6D;AA+B7D7D,IAAAA,QAAAA;GA/BF,CAAA;AAkCA,EAAA,MAAM8R,WAAW,GAAG9R,QAAQ,CAAC8H,MAAT,CAAgB8B,UAApC,CAAA;AACA,EAAA,MAAMmI,WAAW,GAAG/R,QAAQ,CAAC8H,MAAT,CAAgBkK,UAApC,CAAA;AAEA,EAAA,oBACE3N,KAAA,CAAAwC,aAAA,CAAC8I,aAAD,EAAc,EAAA,GAAK8B,UAAAA;AAAL,GAAd,eACEpN,KAAA,CAAAwC,aAAA,CAAAxC,KAAA,CAAA4N,QAAA,EAAA,IAAA,EACG9C,KADH,EAOGpP,MAAM,CAACwP,KAAP,IACC,EAAC1L,QAAD,KAAA,IAAA,IAACA,QAAD,KAAA,KAAA,CAAA,IAACA,QAAQ,CAAG,UAAH,CAAT,CADD,IAEC,CAAC5D,WAAW,CAACiS,QAAZ,CAAqBnS,MAArB,CAFF,iBAGGsE,KAAA,CAAAwC,aAAA,CAACiL,WAAD,EAAY;AACV/M,IAAAA,IAAI,EAAEA,IADI;AAEVC,IAAAA,QAAQ,EAAEA,QAFA;AAGVC,IAAAA,QAAQ,EAAEA,QAHA;AAIV6B,IAAAA,SAAS,EAAEA,SAJD;AAKVzF,IAAAA,WAAW,EAAEA,WALH;AAMVpC,IAAAA,QAAQ,EAAEA,QANA;AAOVyG,IAAAA,WAAW,EAAEA,WAPH;AAQVJ,IAAAA,QAAQ,EAAEA,QARA;AASV3C,IAAAA,QAAQ,EAAEA,QATA;AAUV4C,IAAAA,WAAW,EAAEA,WAVH;IAWVH,MAAM,EAAEvF,KAAK,CAACuF,MAXJ;IAYVzE,QAAQ,EAAEd,KAAK,CAACc,QAZN;IAaV0E,OAAO,EAAExF,KAAK,CAACwF,OAbL;IAcV6B,OAAO,EAAEnH,MAAM,CAACwP,KAAP,CAAanQ,GAAb,CAAkBqQ,OAAD,IACxBxP,WAAW,CAAC6F,cAAZ,CACEF,QAAQ,CAAC6J,OAAD,CAAR,GAAoBA,OAApB,GAA8B,EADhC,EAEExQ,QAFF,CADO,CAdC;IAoBV0L,QAAQ,EAAE5K,MAAM,CAAC0D,IApBP;AAqBVzD,IAAAA,QAAQ,EAAEA,QArBA;AAsBVD,IAAAA,MAAM,EAAEA,MAtBE;AAuBV8D,IAAAA,QAAQ,EAAEA,QAAAA;AAvBA,GAAZ,CAVN,EAoCG9D,MAAM,CAACmJ,KAAP,IACC,EAACrF,QAAD,KAACA,IAAAA,IAAAA,QAAD,KAACA,KAAAA,CAAAA,IAAAA,QAAQ,CAAG,UAAH,CAAT,CADD,IAEC,CAAC5D,WAAW,CAACiS,QAAZ,CAAqBnS,MAArB,CAFF,iBAGGsE,KAAC,CAAAwC,aAAD,CAACkL,WAAD,EACE;AAAAhN,IAAAA,IAAI,EAAEA,IAAN;AACAC,IAAAA,QAAQ,EAAEA,QADV;AAEAC,IAAAA,QAAQ,EAAEA,QAFV;AAGA6B,IAAAA,SAAS,EAAEA,SAHX;AAIAzF,IAAAA,WAAW,EAAEA,WAJb;AAKApC,IAAAA,QAAQ,EAAEA,QALV;AAMAyG,IAAAA,WAAW,EAAEA,WANb;AAOAJ,IAAAA,QAAQ,EAAEA,QAPV;AAQA3C,IAAAA,QAAQ,EAAEA,QARV;AASA4C,IAAAA,WAAW,EAAEA,WATb;IAUAH,MAAM,EAAEvF,KAAK,CAACuF,MAVd;IAWAzE,QAAQ,EAAEd,KAAK,CAACc,QAXhB;IAYA0E,OAAO,EAAExF,KAAK,CAACwF,OAZf;IAaA6B,OAAO,EAAEnH,MAAM,CAACmJ,KAAP,CAAa9J,GAAb,CAAkBqQ,OAAD,IACxBxP,WAAW,CAAC6F,cAAZ,CACEF,QAAQ,CAAC6J,OAAD,CAAR,GAAoBA,OAApB,GAA8B,EADhC,EAEExQ,QAFF,CADO,CAbT;IAmBA0L,QAAQ,EAAE5K,MAAM,CAAC0D,IAnBjB;AAoBAzD,IAAAA,QAAQ,EAAEA,QApBV;AAqBAD,IAAAA,MAAM,EAAEA,MArBR;AAsBA8D,IAAAA,QAAQ,EAAEA,QAAAA;GAvBZ,CAvCN,CADF,CADF,CAAA;AAsED,CAAA;AAED;;AAEG;;;AACH,MAAMmE,WAAN,SAA4C3D,KAAK,CAAC1E,SAAlD,CAA6E;EAC3EwS,qBAAqB,CAACpP,SAAD,EAAsC;AACzD,IAAA,OAAO,CAAC0H,UAAU,CAAC,KAAK5K,KAAN,EAAakD,SAAb,CAAlB,CAAA;AACD,GAAA;;AAEDkB,EAAAA,MAAM,GAAA;IACJ,oBAAOI,mBAAA,CAACmL,iBAAD,EAAkB,EAAA,GAAW,IAAK3P,CAAAA,KAAAA;AAAhB,KAAlB,CAAP,CAAA;AACD,GAAA;;AAP0E;;AC5W7E;;;AAGG;;AACH,SAASyL,WAAT,CAAuCzL,KAAvC,EAA8D;EAC5D,MAAM;IACJE,MADI;IAEJgF,IAFI;IAGJlB,QAHI;IAIJlB,QAJI;IAKJ1D,QALI;IAMJkG,QANI;AAOJH,IAAAA,QAAQ,GAAG,KAPP;AAQJC,IAAAA,QAAQ,GAAG,KARP;AASJC,IAAAA,SAAS,GAAG,KATR;IAUJvE,QAVI;IAWJyE,MAXI;IAYJC,OAZI;IAaJrF,QAbI;AAcJwF,IAAAA,SAAAA;AAdI,GAAA,GAeF3F,KAfJ,CAAA;EAgBA,MAAM;IAAE4F,KAAF;AAAS2M,IAAAA,MAAAA;AAAT,GAAA,GAAoBrS,MAA1B,CAAA;EACA,MAAM;IAAEiH,OAAF;IAAWtB,WAAX;AAAwBzF,IAAAA,WAAAA;AAAxB,GAAA,GAAwCD,QAA9C,CAAA;AACA,EAAA,MAAMuH,WAAW,GAAGtH,WAAW,CAACiS,QAAZ,CAAqBnS,MAArB,CAAA,GAChByH,WAAW,CAACzH,MAAD,CADK,GAEhB6C,SAFJ,CAAA;AAGA,EAAA,IAAIyP,aAAa,GAAG9K,WAAW,GAAG,QAAH,GAAc,MAA7C,CAAA;;EACA,IAAI6K,MAAM,IAAIE,SAAS,CAAOvS,MAAP,EAAeqS,MAAf,EAAuBpL,OAAvB,CAAvB,EAAwD;AACtDqL,IAAAA,aAAa,GAAGD,MAAhB,CAAA;AACD,GAAA;;EACD,MAAM;AACJnL,IAAAA,MAAM,GAAGoL,aADL;AAEJtL,IAAAA,WAAW,GAAG,EAFV;IAGJ,GAAGG,OAAAA;GACDnD,GAAAA,YAAY,CAAOF,QAAP,CAJhB,CAAA;EAKA,MAAMsD,MAAM,GAAGC,SAAS,CAAOrH,MAAP,EAAekH,MAAf,EAAuBD,OAAvB,CAAxB,CAAA;AACA,EAAA,oBACE3C,mBAAA,CAAC8C,MAAD,EAAO;IACLD,OAAO,EAAE,EAAE,GAAGA,OAAL;AAAcK,MAAAA,WAAAA;KADlB;AAELxH,IAAAA,MAAM,EAAEA,MAFH;AAGL8D,IAAAA,QAAQ,EAAEA,QAHL;AAILvB,IAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GAJpB;AAKLyE,IAAAA,KAAK,EAAE7B,KAAK,KAAK7C,SAAV,GAAsBmC,IAAtB,GAA6BU,KAL/B;AAMLpD,IAAAA,KAAK,EAAEpD,QANF;AAOL0B,IAAAA,QAAQ,EAAEA,QAPL;AAQLyE,IAAAA,MAAM,EAAEA,MARH;AASLC,IAAAA,OAAO,EAAEA,OATJ;AAULF,IAAAA,QAAQ,EAAEA,QAVL;AAWLH,IAAAA,QAAQ,EAAEA,QAXL;AAYLC,IAAAA,QAAQ,EAAEA,QAZL;AAaLS,IAAAA,WAAW,EAAEA,WAbR;AAcLR,IAAAA,SAAS,EAAEA,SAdN;AAeLlF,IAAAA,QAAQ,EAAEA,QAfL;AAgBL+G,IAAAA,WAAW,EAAEA,WAhBR;AAiBLvB,IAAAA,SAAS,EAAEA,SAAAA;AAjBN,GAAP,CADF,CAAA;AAqBD;;AC/DD;;;;AAIG;;AACH,SAAS+M,SAAT,CAAqC1S,KAArC,EAA4D;EAC1D,MAAM;IAAEZ,QAAF;AAAY0B,IAAAA,QAAAA;AAAZ,GAAA,GAAyBd,KAA/B,CAAA;AACA2S,EAAAA,SAAS,CAAC,MAAK;IACb,IAAIvT,QAAQ,KAAK2D,SAAjB,EAA4B;MAC1BjC,QAAQ,CAAC,IAAD,CAAR,CAAA;AACD,KAAA;AACF,GAJQ,EAIN,CAAC1B,QAAD,EAAW0B,QAAX,CAJM,CAAT,CAAA;AAMA,EAAA,OAAO,IAAP,CAAA;AACD;;ACND,MAAMmH,MAAM,GAAuB;AACjC8B,EAAAA,UAAU,EAAE6I,UADqB;EAEjC/S,UAFiC;AAGjC;EACAuJ,YAJiC;EAKjCgC,WALiC;EAMjCe,WANiC;AAOjCgG,EAAAA,UAAU,EAAES,UAPqB;EAQjCzK,WARiC;EASjCsD,WATiC;AAUjCiH,EAAAA,SAAAA;AAViC,CAAnC;;ACJA;;;;AAIG;;AACqB,SAAAG,6BAAA,CACtB7S,KADsB,EACW;EAEjC,MAAM;IAAE8C,QAAF;IAAY8K,WAAZ;IAAyBzN,QAAzB;IAAmCD,MAAnC;AAA2C8D,IAAAA,QAAAA;AAA3C,GAAA,GAAwDhE,KAA9D,CAAA;AACA,EAAA,MAAMqH,OAAO,GAAGnD,YAAY,CAAOF,QAAP,CAA5B,CAAA;EACA,MAAM;IAAEyD,KAAK,EAAEkJ,YAAY,GAAG,IAAA;AAAxB,GAAA,GAAiCtJ,OAAvC,CAAA;;AACA,EAAA,IAAI,CAACuG,WAAD,IAAgB,CAAC+C,YAArB,EAAmC;AACjC,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;EACD,MAAMZ,wBAAwB,GAAGxL,WAAW,CAI1C,0BAJ0C,EAIdpE,QAJc,EAIJkH,OAJI,CAA5C,CAAA;AAKA,EAAA,MAAM5E,EAAE,GAAMK,QAAQ,CAACE,GAAf,GAAR,eAAA,CAAA;AACA,EAAA,oBACEwB,KAAC,CAAAwC,aAAD,CAAC+I,wBAAD,EACE;AAAAtN,IAAAA,EAAE,EAAEA,EAAJ;AACAmL,IAAAA,WAAW,EAAEA,WADb;AAEA1N,IAAAA,MAAM,EAAEA,MAFR;AAGA8D,IAAAA,QAAQ,EAAEA,QAHV;AAIA7D,IAAAA,QAAQ,EAAEA,QAAAA;AAJV,GADF,CADF,CAAA;AASD;;ACjCD;;;AAGG;;AACqB,SAAA2S,sBAAA,CACtB9S,KADsB,EACiB;EAEvC,MAAM;IACJ+I,QADI;IAEJjC,SAFI;IAGJ3B,QAHI;IAIJ6D,UAJI;IAKJE,WALI;IAMJD,SANI;IAOJE,SAPI;IAQJ9H,KARI;IASJE,gBATI;IAUJS,cAVI;IAWJoD,QAXI;IAYJjF,QAZI;AAaJ6D,IAAAA,QAAAA;AAbI,GAAA,GAcFhE,KAdJ,CAAA;EAeA,MAAM;IAAE+S,cAAF;IAAkBC,YAAlB;AAAgCC,IAAAA,YAAAA;AAAhC,GAAA,GACJ9S,QAAQ,CAAC+S,SAAT,CAAmBC,eADrB,CAAA;AAEA,EAAA,MAAMC,QAAQ,GAAkB;AAC9BC,IAAAA,IAAI,EAAE,CADwB;AAE9BC,IAAAA,WAAW,EAAE,CAFiB;AAG9BC,IAAAA,YAAY,EAAE,CAHgB;AAI9BC,IAAAA,UAAU,EAAE,MAAA;GAJd,CAAA;AAMA,EAAA,oBACEhP,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAEA,SAAAA;AAAhB,GAAA,eACEtC,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAEkC,UAAU,GAAG,UAAH,GAAgB,WAAA;GAA1C,EAAwDD,QAAxD,CADF,EAEGC,UAAU,iBACTxE,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,EAAC,6BAAA;AAAV,GAAL,eACEtC,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AACEF,IAAAA,SAAS,EAAC,WADZ;AAEEmH,IAAAA,KAAK,EAAE;AACLwF,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,cAAc,EAAE,cAAA;AAFX,KAAA;GAFT,EAOG,CAACzK,SAAS,IAAIC,WAAd,kBACC1E,KAAC,CAAAwC,aAAD,CAACgM,YAAD,EACE;AAAA/E,IAAAA,KAAK,EAAEmF,QAAP;AACAjO,IAAAA,QAAQ,EAAEA,QAAQ,IAAIC,QAAZ,IAAwB,CAAC6D,SADnC;IAEA0K,OAAO,EAAE3R,cAAc,CAACX,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAFvB;AAGA2C,IAAAA,QAAQ,EAAEA,QAAAA;AAHV,GADF,CARJ,EAeG,CAACiF,SAAS,IAAIC,WAAd,kBACC1E,KAAC,CAAAwC,aAAD,CAAC+L,cAAD,EACE;AAAA9E,IAAAA,KAAK,EAAEmF,QAAP;AACAjO,IAAAA,QAAQ,EAAEA,QAAQ,IAAIC,QAAZ,IAAwB,CAAC8D,WADnC;IAEAyK,OAAO,EAAE3R,cAAc,CAACX,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAFvB;AAGA2C,IAAAA,QAAQ,EAAEA,QAAAA;GAJZ,CAhBJ,EAuBGmF,SAAS,iBACR3E,KAAC,CAAAwC,aAAD,CAACiM,YAAD;AACEhF,IAAAA,KAAK,EAAEmF;IACPjO,QAAQ,EAAEA,QAAQ,IAAIC;AACtBuO,IAAAA,OAAO,EAAEpS,gBAAgB,CAACF,KAAD;AACzB2C,IAAAA,QAAQ,EAAEA,QAAAA;GAJZ,CAxBJ,CADF,CAHJ,CADF,CAAA;AAyCD;;AClED;;;AAGG;;AACqB,SAAA4P,kBAAA,CACtB5T,KADsB,EACc;EAEpC,MAAM;IACJmG,MADI;IAEJW,SAFI;IAGJ3B,QAHI;IAIJrC,QAJI;IAKJkB,QALI;IAMJ1D,KANI;IAOJK,UAPI;IAQJyE,QARI;IASJjF,QATI;IAUJmF,QAVI;IAWJpF,MAXI;AAYJ0F,IAAAA,KAAAA;AAZI,GAAA,GAaF5F,KAbJ,CAAA;AAcA,EAAA,MAAMqE,SAAS,GAAGH,YAAY,CAAOF,QAAP,CAA9B,CAAA;EACA,MAAM6O,6BAA6B,GAAGtO,WAAW,CAI/C,+BAJ+C,EAIdpE,QAJc,EAIJkE,SAJI,CAAjD,CAAA;EAKA,MAAMyO,sBAAsB,GAAGvO,WAAW,CACxC,wBADwC,EAExCpE,QAFwC,EAGxCkE,SAHwC,CAA1C,CAAA;EAKA,MAAMwP,uBAAuB,GAAGtP,WAAW,CACzC,yBADyC,EAEzCpE,QAFyC,EAGzCkE,SAHyC,CAA3C,CA3BoC;;EAiCpC,MAAM;AACJ8O,IAAAA,eAAe,EAAE;AAAEW,MAAAA,SAAAA;AAAF,KAAA;GACf3T,GAAAA,QAAQ,CAAC+S,SAFb,CAAA;AAGA,EAAA,oBACE1O,KAAU,CAAAwC,aAAV,CAAU,UAAV,EAAU;AAAAF,IAAAA,SAAS,EAAEA,SAAX;IAAsBrE,EAAE,EAAEK,QAAQ,CAACE,GAAAA;AAAnC,GAAV,eACEwB,KAAA,CAAAwC,aAAA,CAAC6M,uBAAD,EAAwB;AACtB/Q,IAAAA,QAAQ,EAAEA,QADY;AAEtB8C,IAAAA,KAAK,EAAEvB,SAAS,CAACuB,KAAV,IAAmBA,KAFJ;AAGtBN,IAAAA,QAAQ,EAAEA,QAHY;AAItBpF,IAAAA,MAAM,EAAEA,MAJc;AAKtB8D,IAAAA,QAAQ,EAAEA,QALY;AAMtB7D,IAAAA,QAAQ,EAAEA,QAAAA;AANY,GAAxB,CADF,eASEqE,KAAC,CAAAwC,aAAD,CAAC6L,6BAAD,EACE;AAAA/P,IAAAA,QAAQ,EAAEA,QAAV;AACA8K,IAAAA,WAAW,EAAEvJ,SAAS,CAACuJ,WAAV,IAAyB1N,MAAM,CAAC0N,WAD7C;AAEA1N,IAAAA,MAAM,EAAEA,MAFR;AAGA8D,IAAAA,QAAQ,EAAEA,QAHV;AAIA7D,IAAAA,QAAQ,EAAEA,QAAAA;AAJV,GADF,CATF,eAgBEqE,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,qBAAA;AAAf,GAAA,EACGxG,KAAK,IACJA,KAAK,CAACf,GAAN,CAAU,IAAA,IAAA;IAAA,IAAC;MAAEE,GAAF;MAAO,GAAGsU,SAAAA;KAAX,GAAA,IAAA,CAAA;AAAA,IAAA,oBACRvP,KAAA,CAAAwC,aAAA,CAAC8L,sBAAD,EAAuB;AAACrT,MAAAA,GAAG,EAAEA,GAAN;MAAS,GAAMsU,SAAAA;AAAf,KAAvB,CADQ,CAAA;GAAV,CAFJ,CAhBF,EAsBG5N,MAAM,iBACL3B,KAAA,CAAAwC,aAAA,CAAC8M,SAAD,EAAU;AACRhN,IAAAA,SAAS,EAAC,gBADF;AAER6M,IAAAA,OAAO,EAAEhT,UAFD;IAGRwE,QAAQ,EAAEA,QAAQ,IAAIC,QAHd;AAIRpB,IAAAA,QAAQ,EAAEA,QAAAA;AAJF,GAAV,CAvBJ,CADF,CAAA;AAiCD;;AC1ED;;;;AAIG;;AACqB,SAAA6P,uBAAA,CACtB7T,KADsB,EACK;EAE3B,MAAM;IAAE8C,QAAF;IAAY8C,KAAZ;IAAmB1F,MAAnB;IAA2B8D,QAA3B;IAAqCsB,QAArC;AAA+CnF,IAAAA,QAAAA;AAA/C,GAAA,GAA4DH,KAAlE,CAAA;AACA,EAAA,MAAMqH,OAAO,GAAGnD,YAAY,CAAOF,QAAP,CAA5B,CAAA;EACA,MAAM;IAAEyD,KAAK,EAAEkJ,YAAY,GAAG,IAAA;AAAxB,GAAA,GAAiCtJ,OAAvC,CAAA;;AACA,EAAA,IAAI,CAACzB,KAAD,IAAU,CAAC+K,YAAf,EAA6B;AAC3B,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;EACD,MAAMqD,kBAAkB,GACtBzP,WAAW,CACT,oBADS,EAETpE,QAFS,EAGTkH,OAHS,CADb,CAAA;AAMA,EAAA,MAAM5E,EAAE,GAAMK,QAAQ,CAACE,GAAf,GAAR,SAAA,CAAA;AACA,EAAA,oBACEwB,KAAA,CAAAwC,aAAA,CAACgN,kBAAD,EAAmB;AACjBvR,IAAAA,EAAE,EAAEA,EADa;AAEjBmD,IAAAA,KAAK,EAAEA,KAFU;AAGjBN,IAAAA,QAAQ,EAAEA,QAHO;AAIjBpF,IAAAA,MAAM,EAAEA,MAJS;AAKjB8D,IAAAA,QAAQ,EAAEA,QALO;AAMjB7D,IAAAA,QAAQ,EAAEA,QAAAA;AANO,GAAnB,CADF,CAAA;AAUD;;ACpCD;;;;;AAKG;;AACqB,SAAA8T,iBAAA,CACtBjU,KADsB,EACE;EAExB,MAAM;IACJyC,EADI;IAEJD,KAFI;IAGJ4C,QAHI;IAIJD,QAJI;IAKJE,SALI;IAMJE,MANI;IAOJC,OAPI;IAQJ1E,QARI;IASJuG,OATI;IAUJnH,MAVI;IAWJ8D,QAXI;IAYJ6B,WAZI;IAaJ1F,QAbI;IAcJwF,SAdI;IAeJ/B,IAfI;IAgBJ,GAAGsQ,IAAAA;GACDlU,GAAAA,KAjBJ,CAFwB;AAsBxB;;EACA,IAAI,CAACyC,EAAL,EAAS;AACP6O,IAAAA,OAAO,CAAC6C,GAAR,CAAY,WAAZ,EAAyBnU,KAAzB,CAAA,CAAA;IACA,MAAM,IAAIoU,KAAJ,CAA6BhG,kBAAAA,GAAAA,IAAI,CAACC,SAAL,CAAerO,KAAf,CAA7B,CAAN,CAAA;AACD,GAAA;;AACD,EAAA,MAAMqU,UAAU,GAAG,EAAE,GAAGH,IAAL;AAAW,IAAA,GAAGI,aAAa,CAAOpU,MAAP,EAAe0D,IAAf,EAAqByD,OAArB,CAAA;GAA9C,CAAA;AAEA,EAAA,IAAIkN,UAAJ,CAAA;;EACA,IAAIF,UAAU,CAACzQ,IAAX,KAAoB,QAApB,IAAgCyQ,UAAU,CAACzQ,IAAX,KAAoB,SAAxD,EAAmE;IACjE2Q,UAAU,GAAG/R,KAAK,IAAIA,KAAK,KAAK,CAAnB,GAAuBA,KAAvB,GAA+B,EAA5C,CAAA;AACD,GAFD,MAEO;AACL+R,IAAAA,UAAU,GAAG/R,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAlC,CAAA;AACD,GAAA;;EAED,MAAMgS,SAAS,GAAG7I,WAAW,CAC3B,IAAA,IAAA;IAAA,IAAC;AAAE8I,MAAAA,MAAM,EAAE;AAAEjS,QAAAA,KAAAA;AAAF,OAAA;KAAX,GAAA,IAAA,CAAA;IAAA,OACE1B,QAAQ,CAAC0B,KAAK,KAAK,EAAV,GAAe6E,OAAO,CAACqN,UAAvB,GAAoClS,KAArC,CADV,CAAA;AAAA,GAD2B,EAG3B,CAAC1B,QAAD,EAAWuG,OAAX,CAH2B,CAA7B,CAAA;;EAKA,MAAMsN,OAAO,GAAGhJ,WAAW,CACzB,KAAA,IAAA;IAAA,IAAC;AAAE8I,MAAAA,MAAM,EAAE;AAAEjS,QAAAA,KAAAA;AAAF,OAAA;KAAX,GAAA,KAAA,CAAA;AAAA,IAAA,OACE+C,MAAM,CAAC9C,EAAD,EAAKD,KAAL,CADR,CAAA;AAAA,GADyB,EAGzB,CAAC+C,MAAD,EAAS9C,EAAT,CAHyB,CAA3B,CAAA;;EAKA,MAAMmS,QAAQ,GAAGjJ,WAAW,CAC1B,KAAA,IAAA;IAAA,IAAC;AAAE8I,MAAAA,MAAM,EAAE;AAAEjS,QAAAA,KAAAA;AAAF,OAAA;KAAX,GAAA,KAAA,CAAA;AAAA,IAAA,OACEgD,OAAO,CAAC/C,EAAD,EAAKD,KAAL,CADT,CAAA;AAAA,GAD0B,EAG1B,CAACgD,OAAD,EAAU/C,EAAV,CAH0B,CAA5B,CAAA;;AAMA,EAAA,oBACE+B,KAAA,CAAAwC,aAAA,CAAAxC,KAAA,CAAA4N,QAAA,EAAA,IAAA,eACE5N,KACE,CAAAwC,aADF,CACE,OADF,EACE;AAAAvE,IAAAA,EAAE,EAAEA,EAAJ;AACAyC,IAAAA,IAAI,EAAEzC,EADN;AAEAqE,IAAAA,SAAS,EAAC,cAFV;AAGA2J,IAAAA,QAAQ,EAAErL,QAHV;AAIAD,IAAAA,QAAQ,EAAEA,QAJV;AAKA0P,IAAAA,SAAS,EAAExP,SALX;AAMA7C,IAAAA,KAAK,EAAE+R,UANP;AAMiB,IAAA,GACbF,UAPJ;AAQAS,IAAAA,IAAI,EAAE5U,MAAM,CAAC6U,QAAP,GAA8BtS,WAAAA,GAAAA,EAA9B,GAAqCM,SAR3C;AASAjC,IAAAA,QAAQ,EAAE0T,SATV;AAUAjP,IAAAA,MAAM,EAAEoP,OAVR;AAWAnP,IAAAA,OAAO,EAAEoP,QAAAA;AAXT,GADF,CADF,EAeGvV,KAAK,CAACC,OAAN,CAAcY,MAAM,CAAC6U,QAArB,kBACCvQ,KAAA,CAAAwC,aAAA,CAAA,UAAA,EAAA;AAAUvH,IAAAA,GAAG,gBAAcgD,EAA3B;AAAiCA,IAAAA,EAAE,EAAcA,WAAAA,GAAAA,EAAAA;AAAjD,GAAA,EACG,CACC,GAAG,IAAIuS,GAAJ,CACD9U,MAAM,CAAC6U,QAAP,CAAgBjN,MAAhB,CAAuB5H,MAAM,CAAC+K,OAAP,GAAiB,CAAC/K,MAAM,CAAC+K,OAAR,CAAjB,GAAoC,EAA3D,CADC,CADJ,CAIC1L,CAAAA,GAJD,CAIM0V,OAAD,iBACJzQ,KAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;AAAQvH,IAAAA,GAAG,EAAEwV,OAAb;AAAsBzS,IAAAA,KAAK,EAAEyS,OAAAA;GAA7B,CALD,CADH,CAhBJ,CADF,CAAA;AA6BD;;ACxFD;AACG;;AACW,SAAUC,YAAV,CAEY,IAAA,EAAA;EAAA,IAFiB;AACzClR,IAAAA,QAAAA;GACwB,GAAA,IAAA,CAAA;EACxB,MAAM;IACJmR,UADI;IAEJC,QAFI;IAGJpV,KAAK,EAAEqV,iBAAiB,GAAG,EAAA;GACzBC,GAAAA,sBAAsB,CAACtR,QAAD,CAJ1B,CAAA;;AAKA,EAAA,IAAIoR,QAAJ,EAAc;AACZ,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AACD,EAAA,oBACE5Q,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,KAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;AACEpD,IAAAA,IAAI,EAAC,QADP;OAEMyR,iBAFN;IAGEvO,SAAS,EAAA,eAAA,GAAkBuO,iBAAiB,CAACvO,SAAAA;GAH/C,EAKGqO,UALH,CADF,CADF,CAAA;AAWD;;ACxBuB,SAAAI,UAAA,CAAWvV,KAAX,EAAiC;EACvD,MAAM;AACJwV,IAAAA,QAAQ,GAAG,SADP;IAEJC,IAFI;IAGJ3O,SAHI;IAIJ9C,QAJI;IAKJ,GAAG0R,UAAAA;AALC,GAAA,GAMF1V,KANJ,CAAA;AAOA,EAAA,oBACEwE,KAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;AACEpD,IAAAA,IAAI,EAAC,QADP;IAEEkD,SAAS,EAAA,UAAA,GAAa0O,QAAb,GAAA,GAAA,GAAyB1O,SAFpC;OAGM4O,UAAAA;AAHN,GAAA,eAKElR,KAAG,CAAAwC,aAAH,CAAG,GAAH,EAAG;AAAAF,IAAAA,SAAS,EAAyB2O,sBAAAA,GAAAA,IAAAA;AAAlC,GAAH,CALF,CADF,CAAA;AASD,CAAA;AAEK,SAAU1C,cAAV,CAAyB/S,KAAzB,EAA+C;AACnD,EAAA,oBACEwE,KAAC,CAAAwC,aAAD,CAACuO,UAAD;AACE3P,IAAAA,KAAK,EAAC;AACNkB,IAAAA,SAAS,EAAC;AAAsB,IAAA,GAC5B9G;AACJyV,IAAAA,IAAI,EAAC,YAAA;GAJP,CADF,CAAA;AAQD,CAAA;AAEK,SAAUzC,YAAV,CAAuBhT,KAAvB,EAA6C;AACjD,EAAA,oBACEwE,KAAC,CAAAwC,aAAD,CAACuO,UAAD;AACE3P,IAAAA,KAAK,EAAC;AACNkB,IAAAA,SAAS,EAAC;AAAoB,IAAA,GAC1B9G;AACJyV,IAAAA,IAAI,EAAC,UAAA;GAJP,CADF,CAAA;AAQD,CAAA;AAEK,SAAUxC,YAAV,CAAuBjT,KAAvB,EAA6C;AACjD,EAAA,oBACEwE,mBAAA,CAAC+Q,UAAD,EAAW;AACT3P,IAAAA,KAAK,EAAC,QADG;AAETkB,IAAAA,SAAS,EAAC,mBAFD;OAGL9G,KAHK;AAITwV,IAAAA,QAAQ,EAAC,QAJA;AAKTC,IAAAA,IAAI,EAAC,QAAA;AALI,GAAX,CADF,CAAA;AASD;;ACjDD;AACG;;AACW,SAAU3B,SAAV,CAII,IAAA,EAAA;EAAA,IAJgB;IAChChN,SADgC;IAEhC6M,OAFgC;AAGhCxO,IAAAA,QAAAA;GACgB,GAAA,IAAA,CAAA;AAChB,EAAA,oBACEX,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,KAAA;AAAf,GAAA,eACEtC,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;AAAGF,IAAAA,SAAS,EAAyCA,sCAAAA,GAAAA,SAAAA;AAArD,GAAA,eACEtC,KAAA,CAAAwC,aAAA,CAACuO,UAAD,EAAW;AACTC,IAAAA,QAAQ,EAAC,MADA;AAETC,IAAAA,IAAI,EAAC,MAFI;AAGT3O,IAAAA,SAAS,EAAC,mBAHD;AAITlB,IAAAA,KAAK,EAAC,KAJG;AAKT+N,IAAAA,OAAO,EAAEA,OALA;AAMTxO,IAAAA,QAAQ,EAAEA,QAAAA;GANZ,CADF,CADF,CADF,CAAA;AAcD;;ACpBD,MAAMwQ,eAAe,GAAqC;EACxDT,YADwD;EAExDpB,SAFwD;EAGxDf,cAHwD;EAIxDC,YAJwD;AAKxDC,EAAAA,YAAAA;AALwD,CAA1D;;ACHA;;;AAGG;;AACqB,SAAA2C,gBAAA,CACtB5V,KADsB,EACY;EAElC,MAAM;IAAEyC,EAAF;AAAMmL,IAAAA,WAAAA;AAAN,GAAA,GAAsB5N,KAA5B,CAAA;;EACA,IAAI,CAAC4N,WAAL,EAAkB;AAChB,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AACD,EAAA,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnC,IAAA,oBACEpJ,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;AAAGvE,MAAAA,EAAE,EAAEA,EAAP;AAAWqE,MAAAA,SAAS,EAAC,mBAAA;KAArB,EACG8G,WADH,CADF,CAAA;AAKD,GAND,MAMO;AACL,IAAA,oBACEpJ,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKvE,MAAAA,EAAE,EAAEA,EAAT;AAAaqE,MAAAA,SAAS,EAAC,mBAAA;KAAvB,EACG8G,WADH,CADF,CAAA;AAKD,GAAA;AACF;;ACxBD;;;AAGG;;AACW,SAAUiI,SAAV,CAA0D,IAAA,EAAA;EAAA,IAA7B;AAAElE,IAAAA,MAAAA;GAA2B,GAAA,IAAA,CAAA;AACtE,EAAA,oBACEnN,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,2BAAA;AAAf,GAAA,eACEtC,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,EAAC,eAAA;AAAV,GAAL,eACEtC,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIF,IAAAA,SAAS,EAAC,aAAA;GAAd,EAA2B,QAA3B,CADF,CADF,eAIEtC,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIF,IAAAA,SAAS,EAAC,YAAA;GAAd,EACG6K,MAAM,CAACpS,GAAP,CAAW,CAACuW,KAAD,EAA6BnU,CAA7B,KAA0C;AACpD,IAAA,oBACE6C,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIvH,MAAAA,GAAG,EAAEkC,CAAT;AAAYmF,MAAAA,SAAS,EAAC,6BAAA;AAAtB,KAAA,EACGgP,KAAK,CAACC,KADT,CADF,CAAA;GADD,CADH,CAJF,CADF,CAAA;AAgBD;;ACtBD,MAAMC,uBAAqB,GAAG,GAA9B,CAAA;AAWA;;;AAGG;;AACqB,SAAAC,KAAA,CAAMjW,KAAN,EAAuB;EAC7C,MAAM;IAAEyH,KAAF;IAASnC,QAAT;AAAmB7C,IAAAA,EAAAA;AAAnB,GAAA,GAA0BzC,KAAhC,CAAA;;EACA,IAAI,CAACyH,KAAL,EAAY;AACV,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AACD,EAAA,oBACEjD,mBAAA,QAAA;AAAOsC,IAAAA,SAAS,EAAC;AAAgBoP,IAAAA,OAAO,EAAEzT,EAAAA;GAA1C,EACGgF,KADH,EAEGnC,QAAQ,iBAAId,KAAM,CAAAwC,aAAN,CAAM,MAAN,EAAM;AAAAF,IAAAA,SAAS,EAAC,UAAA;GAAhB,EAA4BkP,uBAA5B,CAFf,CADF,CAAA;AAMD;;ACvBD;;;;AAIG;;AACqB,SAAAlG,aAAA,CACtB9P,KADsB,EACS;EAE/B,MAAM;IACJyC,EADI;IAEJgF,KAFI;IAGJsB,QAHI;IAIJ4I,MAJI;IAKJX,IALI;IAMJpD,WANI;IAOJc,MAPI;IAQJpJ,QARI;IASJqL,YATI;IAUJxQ,QAVI;AAWJ6D,IAAAA,QAAAA;AAXI,GAAA,GAYFhE,KAZJ,CAAA;AAaA,EAAA,MAAMqE,SAAS,GAAGH,YAAY,CAACF,QAAD,CAA9B,CAAA;EACA,MAAMmS,wBAAwB,GAAG5R,WAAW,CAC1C,0BAD0C,EAE1CpE,QAF0C,EAG1CkE,SAH0C,CAA5C,CAAA;;AAKA,EAAA,IAAIqK,MAAJ,EAAY;AACV,IAAA,oBAAOlK,mBAAA,MAAA;AAAKsC,MAAAA,SAAS,EAAC,QAAA;KAAf,EAAyBiC,QAAzB,CAAP,CAAA;AACD,GAAA;;AACD,EAAA,oBACEvE,KAAA,CAAAwC,aAAA,CAACmP,wBAAD,EAAyB,EAAA,GAAKnW,KAAAA;GAA9B,EACG2Q,YAAY,iBAAInM,KAAA,CAAAwC,aAAA,CAACiP,KAAD,EAAM;AAACxO,IAAAA,KAAK,EAAEA,KAAR;AAAenC,IAAAA,QAAQ,EAAEA,QAAzB;AAAmC7C,IAAAA,EAAE,EAAEA,EAAAA;AAAvC,GAAN,CADnB,EAEGkO,YAAY,IAAI/C,WAAhB,GAA8BA,WAA9B,GAA4C,IAF/C,EAGG7E,QAHH,EAIG4I,MAJH,EAKGX,IALH,CADF,CAAA;AASD;;ACzCD;;;AAGG;;AACqB,SAAAf,kBAAA,CACtBjQ,KADsB,EACM;EAE5B,MAAM;AAAE2R,IAAAA,MAAM,GAAG,EAAX;AAAe7O,IAAAA,QAAAA;AAAf,GAAA,GAA4B9C,KAAlC,CAAA;;AACA,EAAA,IAAI2R,MAAM,CAACrO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AACD,EAAA,MAAMb,EAAE,GAAMK,QAAQ,CAACE,GAAf,GAAR,SAAA,CAAA;AAEA,EAAA,oBACEwB,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,KAAI,CAAAwC,aAAJ,CAAI,IAAJ,EAAI;AAAAvE,IAAAA,EAAE,EAAEA,EAAJ;AAAQqE,IAAAA,SAAS,EAAC,yCAAA;AAAlB,GAAJ,EACG6K,MAAM,CACJ7P,MADF,CACUsU,IAAD,IAAU,CAAC,CAACA,IADrB,EAEE7W,GAFF,CAEM,CAACuW,KAAD,EAAQzU,KAAR,KAAyB;AAC5B,IAAA,oBACEmD,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIF,MAAAA,SAAS,EAAC,aAAd;AAA4BrH,MAAAA,GAAG,EAAE4B,KAAAA;KAAjC,EACGyU,KADH,CADF,CAAA;GAHH,CADH,CADF,CADF,CAAA;AAeD;;AC5BD;;;AAGG;;AACqB,SAAA9F,iBAAA,CACtBhQ,KADsB,EACK;EAE3B,MAAM;IAAE8C,QAAF;AAAYkO,IAAAA,IAAAA;AAAZ,GAAA,GAAqBhR,KAA3B,CAAA;;EACA,IAAI,CAACgR,IAAL,EAAW;AACT,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AACD,EAAA,MAAMvO,EAAE,GAAMK,QAAQ,CAACE,GAAf,GAAR,QAAA,CAAA;;AACA,EAAA,IAAI,OAAOgO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,IAAA,oBACExM,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;AAAGvE,MAAAA,EAAE,EAAEA,EAAP;AAAWqE,MAAAA,SAAS,EAAC,YAAA;KAArB,EACGkK,IADH,CADF,CAAA;AAKD,GAAA;;AACD,EAAA,oBACExM,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKvE,IAAAA,EAAE,EAAEA,EAAT;AAAaqE,IAAAA,SAAS,EAAC,YAAA;GAAvB,EACGkK,IADH,CADF,CAAA;AAKD;;AClBD;;;;;AAKG;;AACqB,SAAAqF,mBAAA,CACtBrW,KADsB,EACe;EAErC,MAAM;IACJ4N,WADI;IAEJzI,QAFI;IAGJ/F,QAHI;IAIJ0D,QAJI;IAKJnC,UALI;IAMJyJ,UANI;IAOJhF,QAPI;IAQJjF,QARI;IASJmF,QATI;IAUJpF,MAVI;IAWJ0F,KAXI;AAYJ5B,IAAAA,QAAAA;AAZI,GAAA,GAaFhE,KAbJ,CAAA;AAcA,EAAA,MAAMqH,OAAO,GAAGnD,YAAY,CAAOF,QAAP,CAA5B,CAAA;EACA,MAAMgQ,kBAAkB,GAAGzP,WAAW,CACpC,oBADoC,EAEpCpE,QAFoC,EAGpCkH,OAHoC,CAAtC,CAAA;EAKA,MAAM0I,wBAAwB,GAAGxL,WAAW,CAI1C,0BAJ0C,EAIdpE,QAJc,EAIJkH,OAJI,CAA5C,CAtBqC;;EA4BrC,MAAM;AACJ8L,IAAAA,eAAe,EAAE;AAAEW,MAAAA,SAAAA;AAAF,KAAA;GACf3T,GAAAA,QAAQ,CAAC+S,SAFb,CAAA;AAGA,EAAA,oBACE1O,KAAU,CAAAwC,aAAV,CAAU,UAAV,EAAU;IAAAvE,EAAE,EAAEK,QAAQ,CAACE,GAAAA;AAAb,GAAV,EACG,CAACqE,OAAO,CAACzB,KAAR,IAAiBA,KAAlB,kBACCpB,KAAA,CAAAwC,aAAA,CAACgN,kBAAD,EACE;AAAAvR,IAAAA,EAAE,EAAKK,QAAQ,CAACE,GAAd,GAAF,SAAA;AACA4C,IAAAA,KAAK,EAAEyB,OAAO,CAACzB,KAAR,IAAiBA,KADxB;AAEAN,IAAAA,QAAQ,EAAEA,QAFV;AAGApF,IAAAA,MAAM,EAAEA,MAHR;AAIA8D,IAAAA,QAAQ,EAAEA,QAJV;AAKA7D,IAAAA,QAAQ,EAAEA,QAAAA;AALV,GADF,CAFJ,EAWG,CAACkH,OAAO,CAACuG,WAAR,IAAuBA,WAAxB,kBACCpJ,KAAC,CAAAwC,aAAD,CAAC+I,wBAAD;AACEtN,IAAAA,EAAE,EAAKK,QAAQ,CAACE,GAAd;AACF4K,IAAAA,WAAW,EAAEvG,OAAO,CAACuG,WAAR,IAAuBA;AACpC1N,IAAAA,MAAM,EAAEA;AACR8D,IAAAA,QAAQ,EAAEA;AACV7D,IAAAA,QAAQ,EAAEA,QAAAA;GALZ,CAZJ,EAoBGiK,UAAU,CAAC7K,GAAX,CAAgB+W,IAAD,IAA2CA,IAAI,CAAC1H,OAA/D,CApBH,EAqBG2H,SAAS,CAACrW,MAAD,EAAS8D,QAAT,EAAmB5E,QAAnB,CAAT,iBACCoF,KAAA,CAAAwC,aAAA,CAAC8M,SAAD,EACE;AAAAhN,IAAAA,SAAS,EAAC,wBAAV;AACA6M,IAAAA,OAAO,EAAEhT,UAAU,CAACT,MAAD,CADnB;IAEAiF,QAAQ,EAAEA,QAAQ,IAAIC,QAFtB;AAGApB,IAAAA,QAAQ,EAAEA,QAAAA;AAHV,GADF,CAtBJ,CADF,CAAA;AAgCD;;AC5ED,MAAMgS,qBAAqB,GAAG,GAA9B,CAAA;AAEA;;;AAGG;;AACqB,SAAAQ,UAAA,CACtBxW,KADsB,EACM;EAE5B,MAAM;IAAEyC,EAAF;IAAMmD,KAAN;AAAaN,IAAAA,QAAAA;AAAb,GAAA,GAA0BtF,KAAhC,CAAA;AACA,EAAA,oBACEwE,KAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;AAAQvE,IAAAA,EAAE,EAAEA,EAAAA;GAAZ,EACGmD,KADH,EAEGN,QAAQ,iBAAId,KAAM,CAAAwC,aAAN,CAAM,MAAN,EAAM;AAAAF,IAAAA,SAAS,EAAC,UAAA;GAAhB,EAA4BkP,qBAA5B,CAFf,CADF,CAAA;AAMD;;AChBD;;;;AAIG;;AACH,SAASS,gBAAT,CACEzW,KADF,EACoC;EAElC,MAAM;IAAEE,MAAF;IAAU4C,QAAV;AAAoB2B,IAAAA,MAAAA;AAApB,GAAA,GAA+BzE,KAArC,CAAA;AACA,EAAA,oBACEwE,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,mBAAA;AAAf,GAAA,eACEtC,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA,IAAA,4BAAA,EAEGlE,QAAQ,IAAIA,QAAQ,CAACE,GAArB,iBACCwB,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EACG,MADH,WAAA,eACiBxC,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOlE,QAAQ,CAACE,GAAhB,CADjB,CAHJ,EAOGyB,MAAM,iBAAID,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,MAAA,EAAOvC,MAAP,CAPb,EAQI,GARJ,CADF,EAUGvE,MAAM,iBAAIsE,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,EAAMoH,IAAI,CAACC,SAAL,CAAenO,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAN,CAVb,CADF,CAAA;AAcD;;AClBD;;;;AAIG;;AACqB,SAAAiW,wBAAA,CACtBnW,KADsB,EACoB;EAE1C,MAAM;IACJyC,EADI;IAEJwO,UAFI;IAGJ9L,QAHI;IAIJsC,KAJI;IAKJqF,WALI;IAMJN,mBANI;IAOJpH,QAPI;IAQJE,QARI;IASJpF,MATI;IAUJ6I,QAVI;IAWJ/E,QAXI;AAYJ7D,IAAAA,QAAAA;GACEH,GAAAA,KAbJ,CAF0C;;EAiB1C,MAAM;AAAEiT,IAAAA,YAAAA;AAAF,GAAA,GAAmB9S,QAAQ,CAAC+S,SAAT,CAAmBC,eAA5C,CAAA;AACA,EAAA,MAAMuD,QAAQ,GAAMjP,KAAN,GAAA,MAAd,CAlB0C;;AAmB1C,EAAA,MAAMM,UAAU,IAAGyG,wBAAwB,IAAItO,MAA/B,CAAhB,CAAA;;EAEA,IAAI,CAAC6H,UAAL,EAAiB;AACf,IAAA,oBAAOvD,mBAAA,MAAA;AAAKsC,MAAAA,SAAS,EAAEmK,UAAAA;KAAhB,EAA6BlI,QAA7B,CAAP,CAAA;AACD,GAAA;;AAED,EAAA,oBACEvE,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAEmK,UAAAA;AAAhB,GAAA,eACEzM,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,EAAC,KAAA;AAAV,GAAL,eACEtC,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,EAAC,0BAAA;AAAV,GAAL,eACEtC,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,EAAC,YAAA;AAAV,GAAL,eACEtC,KAAA,CAAAwC,aAAA,CAACiP,KAAD,EAAM;AAACxO,IAAAA,KAAK,EAAEiP,QAAR;AAAkBpR,IAAAA,QAAQ,EAAEA,QAA5B;AAAsC7C,IAAAA,EAAE,EAAKA,EAAL,GAAA,MAAA;AAAxC,GAAN,CADF,eAEE+B,KAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA;AACEF,IAAAA,SAAS,EAAC,cADZ;AAEElD,IAAAA,IAAI,EAAC,MAFP;IAGEnB,EAAE,EAAKA,EAAL,GAHJ,MAAA;IAIE8C,MAAM,EAAG3E,KAAD,IAAWkM,WAAW,CAAClM,KAAK,CAAC6T,MAAN,CAAajS,KAAd,CAJhC;AAKEmU,IAAAA,YAAY,EAAElP,KAAAA;GALhB,CAFF,CADF,CADF,eAaEjD,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,qCAAA;GAAf,EAAsDiC,QAAtD,CAbF,eAcEvE,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,EAAC,UAAA;AAAV,GAAL,eACEtC,KAAA,CAAAwC,aAAA,CAACiM,YAAD,EAAa;AACXnM,IAAAA,SAAS,EAAC,6BADC;AAEXmH,IAAAA,KAAK,EAAE;AAAE2I,MAAAA,MAAM,EAAE,GAAA;KAFN;IAGXzR,QAAQ,EAAEA,QAAQ,IAAIC,QAHX;AAIXuO,IAAAA,OAAO,EAAEnH,mBAAmB,CAAC/E,KAAD,CAJjB;AAKXzD,IAAAA,QAAQ,EAAEA,QAAAA;GALZ,CADF,CAdF,CADF,CADF,CAAA;AA4BD;;ACjDD,MAAMkP,SAAS,GAAkB;EAC/BL,6BAD+B;EAE/BC,sBAF+B;EAG/Bc,kBAH+B;EAI/BC,uBAJ+B;mBAK/BV,eAL+B;EAM/Bc,iBAN+B;AAO/BlE,EAAAA,wBAAwB,EAAE6F,gBAPK;AAQ/BiB,EAAAA,iBAAiB,EAAEhB,SARY;EAS/B/F,aAT+B;EAU/BG,kBAV+B;EAW/BD,iBAX+B;EAY/BqG,mBAZ+B;AAa/BrC,EAAAA,kBAAkB,EAAEwC,UAbW;AAc/BlS,EAAAA,wBAAwB,EAAEmS,gBAdK;AAe/BN,EAAAA,wBAAAA;AAf+B,CAAjC;;ACRA,SAASW,YAAT,CAAsBC,KAAtB,EAAqCC,IAArC,EAAiD;EAC/C,MAAM3P,OAAO,GAAG,EAAhB,CAAA;;EACA,KAAK,IAAI1F,CAAC,GAAGoV,KAAb,EAAoBpV,CAAC,IAAIqV,IAAzB,EAA+BrV,CAAC,EAAhC,EAAoC;IAClC0F,OAAO,CAAC6J,IAAR,CAAa;AAAE1O,MAAAA,KAAK,EAAEb,CAAT;AAAY8F,MAAAA,KAAK,EAAEwP,GAAG,CAACtV,CAAD,EAAI,CAAJ,CAAA;KAAnC,CAAA,CAAA;AACD,GAAA;;AACD,EAAA,OAAO0F,OAAP,CAAA;AACD,CAAA;;AAED,SAAS6P,cAAT,CAAwBnW,KAAxB,EAAyC;AACvC,EAAA,OAAO6H,MAAM,CAACuO,MAAP,CAAcpW,KAAd,CAAqB8I,CAAAA,KAArB,CAA4BrH,KAAD,IAAWA,KAAK,KAAK,CAAC,CAAjD,CAAP,CAAA;AACD,CAAA;;AAED,SAAS4U,gBAAT,CACErW,KADF,EAEEsW,IAFF,EAGEC,UAHF,EAGqE;AAAA,EAAA,IAAnEA,UAAmE,KAAA,KAAA,CAAA,EAAA;IAAnEA,UAAmE,GAApC,CAAC,IAAD,EAAO,IAAIC,IAAJ,EAAWC,CAAAA,WAAX,EAA2B,GAAA,CAAlC,CAAoC,CAAA;AAAA,GAAA;;EAEnE,MAAM;IAAEC,IAAF;IAAQC,KAAR;IAAeC,GAAf;IAAoBC,IAApB;IAA0BC,MAA1B;AAAkCC,IAAAA,MAAAA;AAAlC,GAAA,GAA6C/W,KAAnD,CAAA;EACA,MAAMgX,IAAI,GAAG,CACX;AACEnU,IAAAA,IAAI,EAAE,MADR;AAEEoU,IAAAA,KAAK,EAAEV,UAFT;AAGE9U,IAAAA,KAAK,EAAEiV,IAAAA;AAHT,GADW,EAMX;AAAE7T,IAAAA,IAAI,EAAE,OAAR;AAAiBoU,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAxB;AAAiCxV,IAAAA,KAAK,EAAEkV,KAAAA;AAAxC,GANW,EAOX;AAAE9T,IAAAA,IAAI,EAAE,KAAR;AAAeoU,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAtB;AAA+BxV,IAAAA,KAAK,EAAEmV,GAAAA;AAAtC,GAPW,CAAb,CAAA;;AASA,EAAA,IAAIN,IAAJ,EAAU;IACRU,IAAI,CAAC7G,IAAL,CACE;AAAEtN,MAAAA,IAAI,EAAE,MAAR;AAAgBoU,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAvB;AAAgCxV,MAAAA,KAAK,EAAEoV,IAAAA;AAAvC,KADF,EAEE;AAAEhU,MAAAA,IAAI,EAAE,QAAR;AAAkBoU,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAzB;AAAkCxV,MAAAA,KAAK,EAAEqV,MAAAA;AAAzC,KAFF,EAGE;AAAEjU,MAAAA,IAAI,EAAE,QAAR;AAAkBoU,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAzB;AAAkCxV,MAAAA,KAAK,EAAEsV,MAAAA;KAH3C,CAAA,CAAA;AAKD,GAAA;;AACD,EAAA,OAAOC,IAAP,CAAA;AACD,CAAA;;AAkBD,SAASE,WAAT,CAYyB,IAAA,EAAA;EAAA,IAZE;IACzBrU,IADyB;IAEzBoU,KAFyB;IAGzBxV,KAHyB;IAIzB0V,MAJyB;IAKzBC,MALyB;IAMzBhT,QANyB;IAOzBC,QAPyB;IAQzBC,SARyB;IASzBlF,QATyB;IAUzBoF,MAVyB;AAWzBC,IAAAA,OAAAA;GACuB,GAAA,IAAA,CAAA;AACvB,EAAA,MAAM/C,EAAE,GAAG0V,MAAM,GAAG,GAAT,GAAevU,IAA1B,CAAA;EACA,MAAM;AAAEwU,IAAAA,YAAAA;GAAiBjY,GAAAA,QAAQ,CAACgH,OAAlC,CAAA;AACA,EAAA,oBACE3C,KAAC,CAAAwC,aAAD,CAACoR,YAAD;AACElY,IAAAA,MAAM,EAAE;AAAE0D,MAAAA,IAAI,EAAE,SAAA;;AAChBnB,IAAAA,EAAE,EAAEA;AACJqE,IAAAA,SAAS,EAAC;AACVO,IAAAA,OAAO,EAAE;MAAEK,WAAW,EAAEoP,YAAY,CAACkB,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAA;;AACpC9Q,IAAAA,WAAW,EAAEtD;AACbpB,IAAAA,KAAK,EAAEA;AACP2C,IAAAA,QAAQ,EAAEA;AACVC,IAAAA,QAAQ,EAAEA;AACVC,IAAAA,SAAS,EAAEA;IACXvE,QAAQ,EAAG0B,KAAD,IAAgB0V,MAAM,CAACtU,IAAD,EAA2BpB,KAA3B;AAChC+C,IAAAA,MAAM,EAAEA;AACRC,IAAAA,OAAO,EAAEA;AACTrF,IAAAA,QAAQ,EAAEA;AACVsH,IAAAA,KAAK,EAAC,EAAA;GAdR,CADF,CAAA;AAkBD,CAAA;AAED;;AAEG;;;AACH,SAAS4Q,aAAT,CAYoB,KAAA,EAAA;EAAA,IAZqB;AACvChB,IAAAA,IAAI,GAAG,KADgC;AAEvClS,IAAAA,QAAQ,GAAG,KAF4B;AAGvCC,IAAAA,QAAQ,GAAG,KAH4B;AAIvCC,IAAAA,SAAS,GAAG,KAJ2B;IAKvCgC,OALuC;IAMvC5E,EANuC;IAOvCtC,QAPuC;IAQvCoF,MARuC;IASvCC,OATuC;IAUvC1E,QAVuC;AAWvC0B,IAAAA,KAAAA;GACkB,GAAA,KAAA,CAAA;EAClB,MAAM,CAACzB,KAAD,EAAQG,QAAR,CAAA,GAAoBoX,UAAU,CAClC,CAACvX,KAAD,EAAoBwX,MAApB,KAAmD;IACjD,OAAO,EAAE,GAAGxX,KAAL;MAAY,GAAGwX,MAAAA;KAAtB,CAAA;AACD,GAHiC,EAIlCC,eAAe,CAAChW,KAAD,EAAQ6U,IAAR,CAJmB,CAApC,CAAA;AAOA1E,EAAAA,SAAS,CAAC,MAAK;IACb,IAAInQ,KAAK,IAAIA,KAAK,KAAKiW,YAAY,CAAC1X,KAAD,EAAQsW,IAAR,CAAnC,EAAkD;AAChDnW,MAAAA,QAAQ,CAACsX,eAAe,CAAChW,KAAD,EAAQ6U,IAAR,CAAhB,CAAR,CAAA;AACD,KAAA;GAHM,EAIN,CAAC7U,KAAD,EAAQzB,KAAR,EAAesW,IAAf,CAJM,CAAT,CAAA;AAMA1E,EAAAA,SAAS,CAAC,MAAK;AACb,IAAA,IAAIuE,cAAc,CAACnW,KAAD,CAAlB,EAA2B;AACzB;AACAD,MAAAA,QAAQ,CAAC2X,YAAY,CAAC1X,KAAD,EAAQsW,IAAR,CAAb,CAAR,CAAA;AACD,KAAA;GAJM,EAKN,CAACtW,KAAD,EAAQsW,IAAR,EAAcvW,QAAd,CALM,CAAT,CAAA;EAOA,MAAM4K,YAAY,GAAGC,WAAW,CAC9B,CAAC+M,QAAD,EAA6BlW,KAA7B,KAA8C;AAC5CtB,IAAAA,QAAQ,CAAC;AAAE,MAAA,CAACwX,QAAD,GAAYlW,KAAAA;AAAd,KAAD,CAAR,CAAA;GAF4B,EAI9B,EAJ8B,CAAhC,CAAA;AAOA,EAAA,MAAMmW,YAAY,GAAGhN,WAAW,CAC7B/K,KAAD,IAAyC;AACvCA,IAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;;IACA,IAAIsE,QAAQ,IAAIC,QAAhB,EAA0B;AACxB,MAAA,OAAA;AACD,KAAA;;IACD,MAAMwT,UAAU,GAAGJ,eAAe,CAAC,IAAIjB,IAAJ,EAAA,CAAWsB,MAAX,EAAD,EAAsBxB,IAAtB,CAAlC,CAAA;IACAnW,QAAQ,CAAC0X,UAAD,CAAR,CAAA;GAP4B,EAS9B,CAACzT,QAAD,EAAWC,QAAX,EAAqBiS,IAArB,CAT8B,CAAhC,CAAA;AAYA,EAAA,MAAMyB,WAAW,GAAGnN,WAAW,CAC5B/K,KAAD,IAAyC;AACvCA,IAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;;IACA,IAAIsE,QAAQ,IAAIC,QAAhB,EAA0B;AACxB,MAAA,OAAA;AACD,KAAA;;AACDlE,IAAAA,QAAQ,CAACsX,eAAe,CAAC,EAAD,EAAKnB,IAAL,CAAhB,CAAR,CAAA;IACAvW,QAAQ,CAACiC,SAAD,CAAR,CAAA;GAP2B,EAS7B,CAACoC,QAAD,EAAWC,QAAX,EAAqBiS,IAArB,EAA2BvW,QAA3B,CAT6B,CAA/B,CAAA;AAYA,EAAA,oBACE0D,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIF,IAAAA,SAAS,EAAC,aAAA;GAAd,EACGsQ,gBAAgB,CACfrW,KADe,EAEfsW,IAFe,EAGfhQ,OAAO,CAACiQ,UAHO,CAAhB,CAIC/X,GAJD,CAIK,CAACwZ,SAAD,EAAYpX,CAAZ,kBACJ6C,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIvH,IAAAA,GAAG,EAAEkC,CAAAA;AAAT,GAAA,eACE6C,KAAA,CAAAwC,aAAA,CAACiR,WAAD,EACE;AAAAE,IAAAA,MAAM,EAAE1V,EAAR;AACAyV,IAAAA,MAAM,EAAExM,YADR;OAEIqN,SAFJ;AAGA5T,IAAAA,QAAQ,EAAEA,QAHV;AAIAC,IAAAA,QAAQ,EAAEA,QAJV;AAKAjF,IAAAA,QAAQ,EAAEA,QALV;AAMAoF,IAAAA,MAAM,EAAEA,MANR;AAOAC,IAAAA,OAAO,EAAEA,OAPT;AAQAH,IAAAA,SAAS,EAAEA,SAAS,IAAI1D,CAAC,KAAK,CAAA;AAR9B,GADF,CADF,CALD,CADH,EAoBG,CAAC0F,OAAO,CAAC2R,aAAR,KAA0B,WAA1B,GACE,CAAC3R,OAAO,CAAC2R,aADX,GAEE,IAFH,kBAGCxU,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,eACExC,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;AAAGiS,IAAAA,IAAI,EAAC,GAAR;AAAYnS,IAAAA,SAAS,EAAC,sBAAtB;AAA6C6M,IAAAA,OAAO,EAAEgF,YAAAA;AAAtD,GAAA,EAAkE,KAAlE,CADF,CAvBJ,EA6BG,CAACtR,OAAO,CAAC6R,eAAR,KAA4B,WAA5B,GACE,CAAC7R,OAAO,CAAC6R,eADX,GAEE,IAFH,kBAGC1U,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,eACExC,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;AACEiS,IAAAA,IAAI,EAAC,GADP;AAEEnS,IAAAA,SAAS,EAAC,2BAFZ;AAGE6M,IAAAA,OAAO,EAAEmF,WAAAA;AAHX,GAAA,EAMI,OANJ,CADF,CAhCJ,CADF,CAAA;AA6CD;;AC/MD;;;;AAIG;;AACH,SAASK,iBAAT,CAGoB,IAAA,EAAA;EAAA,IAHyB;AAC3C9B,IAAAA,IAAI,GAAG,IADoC;IAE3C,GAAGrX,KAAAA;GACe,GAAA,IAAA,CAAA;EAClB,MAAM;AAAEqY,IAAAA,aAAAA;AAAF,GAAA,GAAoBrY,KAAK,CAACG,QAAN,CAAegH,OAAzC,CAAA;AACA,EAAA,oBAAO3C,KAAA,CAAAwC,aAAA,CAACqR,aAAD,EAAe;AAAAhB,IAAAA,IAAI,EAAEA,IAAN;IAAU,GAAMrX,KAAAA;AAAhB,GAAf,CAAP,CAAA;AACD;;ACXD;;;;AAIG;;AACH,SAASoZ,cAAT,CAcoB,IAAA,EAAA;EAAA,IAdsB;IACxClZ,MADwC;IAExC8D,QAFwC;IAGxCqD,OAHwC;IAIxC5E,EAJwC;IAKxCD,KALwC;IAMxC2C,QANwC;IAOxCC,QAPwC;IAQxCqC,KARwC;AASxCpC,IAAAA,SAAS,GAAG,KAT4B;IAUxCE,MAVwC;IAWxCC,OAXwC;IAYxC1E,QAZwC;AAaxCX,IAAAA,QAAAA;GACkB,GAAA,IAAA,CAAA;EAClB,MAAM4P,wBAAwB,GAAGxL,WAAW,CAI1C,0BAJ0C,EAIdpE,QAJc,EAIJkH,OAJI,CAA5C,CADkB;AAOlB;AACA;;AACA,EAAA,MAAM/B,QAAQ,GAAG+T,uBAAuB,CAACnZ,MAAD,CAAxC,CAAA;AAEA,EAAA,MAAMwL,YAAY,GAAGC,WAAW,CAC7B/K,KAAD,IACEE,QAAQ,CAACF,KAAK,CAAC6T,MAAN,CAAa6E,OAAd,CAFoB,EAG9B,CAACxY,QAAD,CAH8B,CAAhC,CAAA;EAMA,MAAMyY,UAAU,GAAG5N,WAAW,CAC3B/K,KAAD,IACE2E,MAAM,CAAC9C,EAAD,EAAK7B,KAAK,CAAC6T,MAAN,CAAa6E,OAAlB,CAFoB,EAG5B,CAAC/T,MAAD,EAAS9C,EAAT,CAH4B,CAA9B,CAAA;EAMA,MAAM+W,WAAW,GAAG7N,WAAW,CAC5B/K,KAAD,IACE4E,OAAO,CAAC/C,EAAD,EAAK7B,KAAK,CAAC6T,MAAN,CAAa6E,OAAlB,CAFoB,EAG7B,CAAC9T,OAAD,EAAU/C,EAAV,CAH6B,CAA/B,CAAA;AAMA,EAAA,oBACE+B,KAAK,CAAAwC,aAAL,CAAK,KAAL,EAAK;AAAAF,IAAAA,SAAS,iBAAc3B,QAAQ,IAAIC,QAAZ,GAAuB,UAAvB,GAAoC,EAAlD,CAAA;GAAd,EACGlF,MAAM,CAAC0N,WAAP,iBACCpJ,KAAC,CAAAwC,aAAD,CAAC+I,wBAAD,EACE;IAAAtN,EAAE,EAAEA,EAAE,GAAG,eAAT;IACAmL,WAAW,EAAE1N,MAAM,CAAC0N,WADpB;AAEA1N,IAAAA,MAAM,EAAEA,MAFR;AAGA8D,IAAAA,QAAQ,EAAEA,QAHV;AAIA7D,IAAAA,QAAQ,EAAEA,QAAAA;AAJV,GADF,CAFJ,eAUEqE,KAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA,IAAA,eACExC,KACE,CAAAwC,aADF,CACE,OADF,EACE;AAAApD,IAAAA,IAAI,EAAC,UAAL;AACAnB,IAAAA,EAAE,EAAEA,EADJ;AAEAyC,IAAAA,IAAI,EAAEzC,EAFN;IAGA6W,OAAO,EAAE,OAAO9W,KAAP,KAAiB,WAAjB,GAA+B,KAA/B,GAAuCA,KAHhD;AAIA8C,IAAAA,QAAQ,EAAEA,QAJV;IAKAH,QAAQ,EAAEA,QAAQ,IAAIC,QALtB;AAMAyP,IAAAA,SAAS,EAAExP,SANX;AAOAvE,IAAAA,QAAQ,EAAE4K,YAPV;AAQAnG,IAAAA,MAAM,EAAEgU,UARR;AASA/T,IAAAA,OAAO,EAAEgU,WAAAA;AATT,GADF,CADF,eAaEhV,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOS,KAAP,CAbF,CAVF,CADF,CAAA;AA4BD;;AC5ED,SAASgS,WAAT,CAAqBjX,KAArB,EAAiCkX,QAAjC,EAAkDC,GAAlD,EAA4D;AAC1D,EAAA,MAAMC,EAAE,GAAGD,GAAG,CAAClM,OAAJ,CAAYjL,KAAZ,CAAX,CAAA;EACA,MAAMqX,OAAO,GAAGH,QAAQ,CAACpX,KAAT,CAAe,CAAf,EAAkBsX,EAAlB,CAAsB9R,CAAAA,MAAtB,CAA6BtF,KAA7B,EAAoCkX,QAAQ,CAACpX,KAAT,CAAesX,EAAf,CAApC,CAAhB,CAF0D;AAI1D;;EACA,OAAOC,OAAO,CAACC,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUC,MAAM,CAACN,GAAG,CAAClM,OAAJ,CAAYsM,CAAZ,CAAA,GAAiBJ,GAAG,CAAClM,OAAJ,CAAYuM,CAAZ,CAAlB,CAA7B,CAAP,CAAA;AACD,CAAA;;AAED,SAASE,aAAT,CAAuB1X,KAAvB,EAAmCkX,QAAnC,EAAkD;EAChD,OAAOA,QAAQ,CAAC5X,MAAT,CAAiBgI,CAAD,IAAOA,CAAC,KAAKtH,KAA7B,CAAP,CAAA;AACD,CAAA;AAED;;;;AAIG;;;AACH,SAAS2X,gBAAT,CAQoB,IAAA,EAAA;EAAA,IARwB;IAC1C1X,EAD0C;IAE1C0C,QAF0C;AAG1CkC,IAAAA,OAAO,EAAE;AAAE+S,MAAAA,MAAM,GAAG,KAAX;MAAkB1S,WAAlB;AAA+B2S,MAAAA,YAAAA;KAHE;IAI1C7X,KAJ0C;AAK1C6C,IAAAA,SAAS,GAAG,KAL8B;IAM1CD,QAN0C;AAO1CtE,IAAAA,QAAAA;GACkB,GAAA,IAAA,CAAA;AAClB,EAAA,oBACE0D,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,YAAf;AAA4BrE,IAAAA,EAAE,EAAEA,EAAAA;AAAhC,GAAA,EACGpD,KAAK,CAACC,OAAN,CAAcoI,WAAd,CAAA,IACCA,WAAW,CAACnI,GAAZ,CAAgB,CAAC+J,MAAD,EAASjI,KAAT,KAAkB;IAChC,MAAMiY,OAAO,GAAG9W,KAAK,CAACiL,OAAN,CAAcnE,MAAM,CAAC9G,KAArB,CAAgC,KAAA,CAAC,CAAjD,CAAA;AACA,IAAA,MAAM8X,YAAY,GAChBjb,KAAK,CAACC,OAAN,CAAc+a,YAAd,CAAA,IACAA,YAAY,CAAC5M,OAAb,CAAqBnE,MAAM,CAAC9G,KAA5B,CAAA,IAAsC,CAAC,CAFzC,CAAA;IAGA,MAAM+X,WAAW,GACfpV,QAAQ,IAAImV,YAAZ,IAA4BlV,QAA5B,GAAuC,UAAvC,GAAoD,EADtD,CAAA;;IAGA,MAAMsG,YAAY,GAAI9K,KAAD,IAAyC;AAC5D,MAAA,MAAM+Y,GAAG,GAAGjS,WAAW,CAACnI,GAAZ,CAAgB,KAAA,IAAA;QAAA,IAAC;AAAEiD,UAAAA,KAAAA;SAAH,GAAA,KAAA,CAAA;AAAA,QAAA,OAAeA,KAAf,CAAA;AAAA,OAAhB,CAAZ,CAAA;;AACA,MAAA,IAAI5B,KAAK,CAAC6T,MAAN,CAAa6E,OAAjB,EAA0B;QACxBxY,QAAQ,CAAC2Y,WAAW,CAACnQ,MAAM,CAAC9G,KAAR,EAAeA,KAAf,EAAsBmX,GAAtB,CAAZ,CAAR,CAAA;AACD,OAFD,MAEO;QACL7Y,QAAQ,CAACoZ,aAAa,CAAC5Q,MAAM,CAAC9G,KAAR,EAAeA,KAAf,CAAd,CAAR,CAAA;AACD,OAAA;KANH,CAAA;;AASA,IAAA,MAAMgY,QAAQ,gBACZhW,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,eACExC,KAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA;AACEpD,MAAAA,IAAI,EAAC,UADP;AAEEnB,MAAAA,EAAE,EAAKA,EAAL,GAAW6G,GAAAA,GAAAA,MAAM,CAAC9G,KAFtB;AAGE0C,MAAAA,IAAI,EAAEzC,EAHR;AAIE6W,MAAAA,OAAO,EAAEA,OAJX;AAKEnU,MAAAA,QAAQ,EAAEA,QAAQ,IAAImV,YAAZ,IAA4BlV,QALxC;AAMEyP,MAAAA,SAAS,EAAExP,SAAS,IAAIhE,KAAK,KAAK,CANpC;AAOEP,MAAAA,QAAQ,EAAE4K,YAAAA;AAPZ,KAAA,CADF,eAUElH,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOsC,MAAM,CAAC7B,KAAd,CAVF,CADF,CAAA;AAcA,IAAA,OAAO2S,MAAM,gBACX5V,mBAAA,QAAA;MACE/E,GAAG,EAAE6J,MAAM,CAAC9G;AACZsE,MAAAA,SAAS,EAAqByT,kBAAAA,GAAAA,WAAAA;KAFhC,EAIGC,QAJH,CADW,gBAQXhW,mBAAA,MAAA;MAAK/E,GAAG,EAAE6J,MAAM,CAAC9G;AAAOsE,MAAAA,SAAS,EAAcyT,WAAAA,GAAAA,WAAAA;KAA/C,eACE/V,KAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA,IAAA,EAAQwT,QAAR,CADF,CARF,CAAA;AAYD,GA3CD,CAFJ,CADF,CAAA;AAiDD;;AC3ED;;;;AAIG;;AACqB,SAAAC,WAAA,CACtBza,KADsB,EACE;EAExB,MAAM;IAAEmF,QAAF;IAAYC,QAAZ;IAAsBiC,OAAtB;AAA+BlH,IAAAA,QAAAA;AAA/B,GAAA,GAA4CH,KAAlD,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBACE7C,KAAC,CAAAwC,aAAD,CAACiN,iBAAD,EACE;AAAArQ,IAAAA,IAAI,EAAC,OAAL;AAAY,IAAA,GACR5D,KADJ;IAEAmF,QAAQ,EAAEA,QAAQ,IAAIC,QAAAA;AAFtB,GADF,CADF,CAAA;AAOD;;ACrBD;;;;AAIG;;AACqB,SAAAsV,UAAA,CAA6B1a,KAA7B,EAAqD;EAC3E,MAAM;IAAEc,QAAF;IAAYuG,OAAZ;AAAqBlH,IAAAA,QAAAA;AAArB,GAAA,GAAkCH,KAAxC,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,MAAMqE,YAAY,GAAGC,WAAW,CAC7BnJ,KAAD,IAA8B1B,QAAQ,CAAC0B,KAAK,IAAIO,SAAV,CADR,EAE9B,CAACjC,QAAD,CAF8B,CAAhC,CAAA;AAKA,EAAA,oBAAO0D,KAAC,CAAAwC,aAAD,CAACiN,iBAAD,EAAmB;AAAArQ,IAAAA,IAAI,EAAC,MAAL;AAAgB,IAAA,GAAA5D,KAAhB;AAAuBc,IAAAA,QAAQ,EAAE4K,YAAAA;AAAjC,GAAnB,CAAP,CAAA;AACD;;AClBD;;;;AAIG;;AACqB,SAAAiP,cAAA,CACtB3a,KADsB,EACE;EAExB,MAAM;IAAEc,QAAF;IAAY0B,KAAZ;IAAmB6E,OAAnB;AAA4BlH,IAAAA,QAAAA;AAA5B,GAAA,GAAyCH,KAA/C,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBACE7C,KAAA,CAAAwC,aAAA,CAACiN,iBAAD,EAAkB;AAChBrQ,IAAAA,IAAI,EAAC,gBADW;AAEZ,IAAA,GAAA5D,KAFY;AAGhBwC,IAAAA,KAAK,EAAEoY,UAAU,CAACpY,KAAD,CAHD;IAIhB1B,QAAQ,EAAG0B,KAAD,IAAW1B,QAAQ,CAAC+Z,UAAU,CAACrY,KAAD,CAAX,CAAA;AAJb,GAAlB,CADF,CAAA;AAQD;;ACtBD;;;AAGG;;AACqB,SAAAsY,WAAA,CACtB9a,KADsB,EACE;EAExB,MAAM;IAAEqH,OAAF;AAAWlH,IAAAA,QAAAA;AAAX,GAAA,GAAwBH,KAA9B,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBAAO7C,KAAA,CAAAwC,aAAA,CAACiN,iBAAD,EAAmB;AAAArQ,IAAAA,IAAI,EAAC,OAAL;IAAY,GAAK5D,KAAAA;AAAjB,GAAnB,CAAP,CAAA;AACD;;ACbD,SAAS+a,gBAAT,CAA0BC,OAA1B,EAA2C9V,IAA3C,EAAuD;EACrD,IAAI8V,OAAO,KAAK,IAAhB,EAAsB;AACpB,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;EACD,OAAOA,OAAO,CAAChP,OAAR,CAAgB,SAAhB,aAAoCiP,kBAAkB,CAAC/V,IAAD,CAAtD,GAAP,SAAA,CAAA,CAAA;AACD,CAAA;;AASD,SAASgW,WAAT,CAAqBC,IAArB,EAA+B;EAC7B,MAAM;IAAEjW,IAAF;IAAQkW,IAAR;AAAcxX,IAAAA,IAAAA;AAAd,GAAA,GAAuBuX,IAA7B,CAAA;AACA,EAAA,OAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,IAAA,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf,CAAA;IACAF,MAAM,CAACG,OAAP,GAAiBJ,MAAjB,CAAA;;AACAC,IAAAA,MAAM,CAACI,MAAP,GAAiBhb,KAAD,IAAU;AAAA,MAAA,IAAA,aAAA,CAAA;;MACxB,IAAI,QAAA,CAAA,aAAA,GAAOA,KAAK,CAAC6T,MAAb,kDAAO,aAAcoH,CAAAA,MAArB,CAAgC,KAAA,QAApC,EAA8C;AAC5CP,QAAAA,OAAO,CAAC;UACNN,OAAO,EAAED,gBAAgB,CAACna,KAAK,CAAC6T,MAAN,CAAaoH,MAAd,EAAsB3W,IAAtB,CADnB;UAENA,IAFM;UAGNkW,IAHM;AAINxX,UAAAA,IAAAA;AAJM,SAAD,CAAP,CAAA;AAMD,OAPD,MAOO;AACL0X,QAAAA,OAAO,CAAC;AACNN,UAAAA,OAAO,EAAE,IADH;UAEN9V,IAFM;UAGNkW,IAHM;AAINxX,UAAAA,IAAAA;AAJM,SAAD,CAAP,CAAA;AAMD,OAAA;KAfH,CAAA;;IAiBA4X,MAAM,CAACM,aAAP,CAAqBX,IAArB,CAAA,CAAA;AACD,GArBM,CAAP,CAAA;AAsBD,CAAA;;AAED,SAASY,YAAT,CAAsBC,KAAtB,EAAqC;AACnC,EAAA,OAAOX,OAAO,CAAC1B,GAAR,CAAYta,KAAK,CAAC4c,IAAN,CAAWD,KAAX,CAAkBzc,CAAAA,GAAlB,CAAsB2b,WAAtB,CAAZ,CAAP,CAAA;AACD,CAAA;;AAED,SAASgB,SAAT,CAIC,IAAA,EAAA;EAAA,IAJkB;AACjBC,IAAAA,SAAAA;GAGD,GAAA,IAAA,CAAA;;AACC,EAAA,IAAIA,SAAS,CAAC7Y,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AACD,EAAA,oBACEkB,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIF,IAAAA,SAAS,EAAC,WAAA;GAAd,EACGqV,SAAS,CAAC5c,GAAV,CAAc,CAAC6c,QAAD,EAAW3c,GAAX,KAAkB;IAC/B,MAAM;MAAEyF,IAAF;MAAQkW,IAAR;AAAcxX,MAAAA,IAAAA;AAAd,KAAA,GAAuBwY,QAA7B,CAAA;AACA,IAAA,oBACE5X,KAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;AAAIvH,MAAAA,GAAG,EAAEA,GAAAA;KAAT,eACE+E,KAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA,IAAA,EAAS9B,IAAT,CADF,MAAA,EAC4BtB,IAD5B,MAAA,EACoCwX,IADpC,EAEK,SAFL,CADF,CAAA;AAKD,GAPA,CADH,CADF,CAAA;AAYD,CAAA;;AAED,SAASiB,eAAT,CAAyBC,QAAzB,EAA2C;AACzC,EAAA,OAAOA,QAAQ,CACZxa,MADI,CACIkZ,OAAD,IAAa,OAAOA,OAAP,KAAmB,WADnC,CAAA,CAEJzb,GAFI,CAECyb,OAAD,IAAY;IACf,MAAM;MAAEuB,IAAF;AAAQrX,MAAAA,IAAAA;KAASsX,GAAAA,aAAa,CAACxB,OAAD,CAApC,CAAA;IACA,OAAO;AACL9V,MAAAA,IAAI,EAAEA,IADD;MAELkW,IAAI,EAAEmB,IAAI,CAACnB,IAFN;MAGLxX,IAAI,EAAE2Y,IAAI,CAAC3Y,IAAAA;KAHb,CAAA;AAKD,GATI,CAAP,CAAA;AAUD,CAAA;AAED;;;AAGG;;;AACH,SAAS6Y,UAAT,CASoB,KAAA,EAAA;EAAA,IATM;IACxBjV,QADwB;IAExB/E,EAFwB;IAGxB2C,QAHwB;IAIxBD,QAJwB;IAKxBrE,QALwB;IAMxB0B,KANwB;AAOxB6C,IAAAA,SAAS,GAAG,KAPY;AAQxBgC,IAAAA,OAAAA;GACkB,GAAA,KAAA,CAAA;EAClB,MAAMqV,kBAAkB,GAAGC,OAAO,CAChC,MACEtd,KAAK,CAACC,OAAN,CAAckD,KAAd,CAAA,GAAuB6Z,eAAe,CAAC7Z,KAAD,CAAtC,GAAgD6Z,eAAe,CAAC,CAAC7Z,KAAD,CAAD,CAFjC,EAGhC,CAACA,KAAD,CAHgC,CAAlC,CAAA;EAKA,MAAM,CAAC2Z,SAAD,EAAYS,YAAZ,IACJpR,QAAQ,CAAiBkR,kBAAjB,CADV,CAAA;AAGA,EAAA,MAAMhR,YAAY,GAAGC,WAAW,CAC7B/K,KAAD,IAAyC;AACvC,IAAA,IAAI,CAACA,KAAK,CAAC6T,MAAN,CAAauH,KAAlB,EAAyB;AACvB,MAAA,OAAA;AACD,KAAA;;IACDD,YAAY,CAACnb,KAAK,CAAC6T,MAAN,CAAauH,KAAd,CAAZ,CAAiCa,IAAjC,CAAuCC,cAAD,IAAmB;MACvDF,YAAY,CAACE,cAAD,CAAZ,CAAA;MACA,MAAMC,QAAQ,GAAGD,cAAc,CAACvd,GAAf,CAAoB6c,QAAD,IAAcA,QAAQ,CAACpB,OAA1C,CAAjB,CAAA;;AACA,MAAA,IAAIxT,QAAJ,EAAc;QACZ1G,QAAQ,CAACic,QAAD,CAAR,CAAA;AACD,OAFD,MAEO;AACLjc,QAAAA,QAAQ,CAACic,QAAQ,CAAC,CAAD,CAAT,CAAR,CAAA;AACD,OAAA;KAPH,CAAA,CAAA;AASD,GAd6B,EAe9B,CAACvV,QAAD,EAAW1G,QAAX,CAf8B,CAAhC,CAAA;EAkBA,oBACE0D,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,KAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA,IAAA,eACExC,KACE,CAAAwC,aADF,CACE,OADF,EACE;AAAAvE,IAAAA,EAAE,EAAEA,EAAJ;AACAyC,IAAAA,IAAI,EAAEzC,EADN;AAEAmB,IAAAA,IAAI,EAAC,MAFL;IAGAuB,QAAQ,EAAEC,QAAQ,IAAID,QAHtB;AAIArE,IAAAA,QAAQ,EAAE4K,YAJV;AAKAiL,IAAAA,YAAY,EAAC,EALb;AAMA9B,IAAAA,SAAS,EAAExP,SANX;AAOAmC,IAAAA,QAAQ,EAAEA,QAPV;IAQAwV,MAAM,EAAE3V,OAAO,CAAC2V,MAAR,GAAiBC,MAAM,CAAC5V,OAAO,CAAC2V,MAAT,CAAvB,GAA0Cja,SAAAA;GATpD,CADF,CADF,eAcEyB,KAAC,CAAAwC,aAAD,CAACkV,SAAD;AAAWC,IAAAA,SAAS,EAAEA,SAAAA;GAAtB,CAdF,CADF,CAAA;AAkBD;;AC1ID;;;;AAIG;;AACH,SAASe,YAAT,CAAwE,IAAA,EAAA;EAAA,IAAhC;IAAEza,EAAF;AAAMD,IAAAA,KAAAA;GAA0B,GAAA,IAAA,CAAA;AACtE,EAAA,oBACEgC,KAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA;AACEpD,IAAAA,IAAI,EAAC,QADP;AAEEnB,IAAAA,EAAE,EAAEA,EAFN;AAGEyC,IAAAA,IAAI,EAAEzC,EAHR;AAIED,IAAAA,KAAK,EAAE,OAAOA,KAAP,KAAiB,WAAjB,GAA+B,EAA/B,GAAoCA,KAAAA;AAJ7C,GAAA,CADF,CAAA;AAQD;;ACdD;;;AAGG;;AACqB,SAAA2a,cAAA,CACtBnd,KADsB,EACE;EAExB,MAAM;IAAEqH,OAAF;AAAWlH,IAAAA,QAAAA;AAAX,GAAA,GAAwBH,KAA9B,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBAAO7C,KAAA,CAAAwC,aAAA,CAACiN,iBAAD,EAAmB;AAAArQ,IAAAA,IAAI,EAAC,UAAL;IAAe,GAAK5D,KAAAA;AAApB,GAAnB,CAAP,CAAA;AACD;;ACdD;;;;AAIG;;AACH,SAASod,WAAT,CAWoB,IAAA,EAAA;EAAA,IAXmB;IACrC/V,OADqC;IAErC7E,KAFqC;IAGrC8C,QAHqC;IAIrCH,QAJqC;IAKrCC,QALqC;AAMrCC,IAAAA,SAAS,GAAG,KANyB;IAOrCE,MAPqC;IAQrCC,OARqC;IASrC1E,QATqC;AAUrC2B,IAAAA,EAAAA;GACkB,GAAA,IAAA,CAAA;AAClB;AACA,EAAA,MAAMyC,IAAI,GAAGmY,IAAI,CAACC,MAAL,EAAA,CAAcC,QAAd,EAAb,CAAA;EACA,MAAM;IAAE7V,WAAF;IAAe2S,YAAf;AAA6BD,IAAAA,MAAAA;GAAW/S,GAAAA,OAA9C,CAHkB;AAKlB;;EAEA,MAAMkS,UAAU,GAAG5N,WAAW,CAC3B/K,KAAD,IAAyC2E,MAAM,CAAC9C,EAAD,EAAK7B,KAAK,CAAC6T,MAAN,CAAajS,KAAlB,CADnB,EAE5B,CAAC+C,MAAD,EAAS9C,EAAT,CAF4B,CAA9B,CAAA;EAKA,MAAM+W,WAAW,GAAG7N,WAAW,CAC5B/K,KAAD,IAAyC4E,OAAO,CAAC/C,EAAD,EAAK7B,KAAK,CAAC6T,MAAN,CAAajS,KAAlB,CADnB,EAE7B,CAACgD,OAAD,EAAU/C,EAAV,CAF6B,CAA/B,CAAA;AAKA,EAAA,oBACE+B,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,mBAAf;AAAmCrE,IAAAA,EAAE,EAAEA,EAAAA;AAAvC,GAAA,EACGpD,KAAK,CAACC,OAAN,CAAcoI,WAAd,CAAA,IACCA,WAAW,CAACnI,GAAZ,CAAgB,CAAC+J,MAAD,EAAS3H,CAAT,KAAc;AAC5B,IAAA,MAAM2X,OAAO,GAAGhQ,MAAM,CAAC9G,KAAP,KAAiBA,KAAjC,CAAA;AACA,IAAA,MAAM8X,YAAY,GAChBjb,KAAK,CAACC,OAAN,CAAc+a,YAAd,CAAA,IACAA,YAAY,CAAC5M,OAAb,CAAqBnE,MAAM,CAAC9G,KAA5B,CAAA,IAAsC,CAAC,CAFzC,CAAA;IAGA,MAAM+X,WAAW,GACfpV,QAAQ,IAAImV,YAAZ,IAA4BlV,QAA5B,GAAuC,UAAvC,GAAoD,EADtD,CAAA;;IAGA,MAAMsG,YAAY,GAAG,MAAM5K,QAAQ,CAACwI,MAAM,CAAC9G,KAAR,CAAnC,CAAA;;AAEA,IAAA,MAAMgb,KAAK,gBACThZ,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,eACExC,KACE,CAAAwC,aADF,CACE,OADF,EACE;AAAApD,MAAAA,IAAI,EAAC,OAAL;AACAnB,MAAAA,EAAE,EAAKA,EAAL,GAAW6G,GAAAA,GAAAA,MAAM,CAAC9G,KADpB;AAEA8W,MAAAA,OAAO,EAAEA,OAFT;AAGApU,MAAAA,IAAI,EAAEA,IAHN;AAIAI,MAAAA,QAAQ,EAAEA,QAJV;MAKA9C,KAAK,EAAE8G,MAAM,CAAC9G,KALd;AAMA2C,MAAAA,QAAQ,EAAEA,QAAQ,IAAImV,YAAZ,IAA4BlV,QANtC;AAOAyP,MAAAA,SAAS,EAAExP,SAAS,IAAI1D,CAAC,KAAK,CAP9B;AAQAb,MAAAA,QAAQ,EAAE4K,YARV;AASAnG,MAAAA,MAAM,EAAEgU,UATR;AAUA/T,MAAAA,OAAO,EAAEgU,WAAAA;AAVT,KADF,CADF,eAcEhV,KAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOsC,MAAM,CAAC7B,KAAd,CAdF,CADF,CAAA;AAmBA,IAAA,OAAO2S,MAAM,gBACX5V,mBAAA,QAAA;MAAO/E,GAAG,EAAE6J,MAAM,CAAC9G;AAAOsE,MAAAA,SAAS,EAAkByT,eAAAA,GAAAA,WAAAA;KAArD,EACGiD,KADH,CADW,gBAKXhZ,mBAAA,MAAA;MAAK/E,GAAG,EAAE6J,MAAM,CAAC9G;AAAOsE,MAAAA,SAAS,EAAWyT,QAAAA,GAAAA,WAAAA;KAA5C,eACE/V,KAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA,IAAA,EAAQwW,KAAR,CADF,CALF,CAAA;AASD,GAtCD,CAFJ,CADF,CAAA;AA4CD;;AC7ED;;;;AAIG;;AACqB,SAAAC,WAAA,CACtBzd,KADsB,EACE;EAExB,MAAM;IACJwC,KADI;AAEJrC,IAAAA,QAAQ,EAAE;AACR+S,MAAAA,SAAS,EAAE;AAAEe,QAAAA,iBAAAA;AAAF,OAAA;AADH,KAAA;AAFN,GAAA,GAKFjU,KALJ,CAAA;AAMA,EAAA,oBACEwE,KAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;AAAKF,IAAAA,SAAS,EAAC,qBAAA;AAAf,GAAA,eACEtC,KAAA,CAAAwC,aAAA,CAACiN,iBAAD,EAAmB;AAAArQ,IAAAA,IAAI,EAAC,OAAL;IAAY,GAAK5D,KAAAA;AAAjB,GAAnB,CADF,eAEEwE,KAAM,CAAAwC,aAAN,CAAM,MAAN,EAAM;AAAAF,IAAAA,SAAS,EAAC,YAAA;GAAhB,EAA8BtE,KAA9B,CAFF,CADF,CAAA;AAMD;;ACpBD,SAASkb,QAAT,CACE9c,KADF,EAEE4G,QAFF,EAEmB;AAEjB,EAAA,IAAIA,QAAJ,EAAc;IACZ,OAAOnI,KAAK,CAAC4c,IAAN,CAAYrb,KAAK,CAAC6T,MAAN,CAAmCpN,OAA/C,CACJ/E,CAAAA,KADI,EAEJR,CAAAA,MAFI,CAEI0H,CAAD,IAAOA,CAAC,CAACkQ,QAFZ,CAGJna,CAAAA,GAHI,CAGCiK,CAAD,IAAOA,CAAC,CAAChH,KAHT,CAAP,CAAA;AAID,GAAA;;AACD,EAAA,OAAQ5B,KAAK,CAAC6T,MAAN,CAAmCjS,KAA3C,CAAA;AACD,CAAA;AAED;;;;AAIG;;;AACH,SAAS4V,YAAT,CAcoB,IAAA,EAAA;EAAA,IAdoB;IACtClY,MADsC;IAEtCuC,EAFsC;IAGtC4E,OAHsC;IAItC7E,KAJsC;IAKtC8C,QALsC;IAMtCH,QANsC;IAOtCC,QAPsC;AAQtCoC,IAAAA,QAAQ,GAAG,KAR2B;AAStCnC,IAAAA,SAAS,GAAG,KAT0B;IAUtCvE,QAVsC;IAWtCyE,MAXsC;IAYtCC,OAZsC;AAatC0B,IAAAA,WAAAA;GACkB,GAAA,IAAA,CAAA;EAClB,MAAM;IAAEQ,WAAF;AAAe2S,IAAAA,YAAAA;AAAf,GAAA,GAAgChT,OAAtC,CAAA;AACA,EAAA,MAAMqN,UAAU,GAAGlN,QAAQ,GAAG,EAAH,GAAQ,EAAnC,CAAA;AAEA,EAAA,MAAMgS,WAAW,GAAG7N,WAAW,CAC5B/K,KAAD,IAAyC;AACvC,IAAA,MAAMmc,QAAQ,GAAGW,QAAQ,CAAC9c,KAAD,EAAQ4G,QAAR,CAAzB,CAAA;AACA,IAAA,OAAOhC,OAAO,CAAC/C,EAAD,EAAKkb,kBAAkB,CAACzd,MAAD,EAAS6c,QAAT,EAAmB1V,OAAnB,CAAvB,CAAd,CAAA;AACD,GAJ4B,EAK7B,CAAC7B,OAAD,EAAU/C,EAAV,EAAcvC,MAAd,EAAsBsH,QAAtB,EAAgCH,OAAhC,CAL6B,CAA/B,CAAA;AAQA,EAAA,MAAMkS,UAAU,GAAG5N,WAAW,CAC3B/K,KAAD,IAAyC;AACvC,IAAA,MAAMmc,QAAQ,GAAGW,QAAQ,CAAC9c,KAAD,EAAQ4G,QAAR,CAAzB,CAAA;AACA,IAAA,OAAOjC,MAAM,CAAC9C,EAAD,EAAKkb,kBAAkB,CAACzd,MAAD,EAAS6c,QAAT,EAAmB1V,OAAnB,CAAvB,CAAb,CAAA;AACD,GAJ2B,EAK5B,CAAC9B,MAAD,EAAS9C,EAAT,EAAavC,MAAb,EAAqBsH,QAArB,EAA+BH,OAA/B,CAL4B,CAA9B,CAAA;AAQA,EAAA,MAAMqE,YAAY,GAAGC,WAAW,CAC7B/K,KAAD,IAA0C;AACxC,IAAA,MAAMmc,QAAQ,GAAGW,QAAQ,CAAC9c,KAAD,EAAQ4G,QAAR,CAAzB,CAAA;IACA,OAAO1G,QAAQ,CAAC6c,kBAAkB,CAACzd,MAAD,EAAS6c,QAAT,EAAmB1V,OAAnB,CAAnB,CAAf,CAAA;GAH4B,EAK9B,CAACvG,QAAD,EAAWZ,MAAX,EAAmBsH,QAAnB,EAA6BH,OAA7B,CAL8B,CAAhC,CAAA;AAQA,EAAA,oBACE7C,KACE,CAAAwC,aADF,CACE,QADF,EACE;AAAAvE,IAAAA,EAAE,EAAEA,EAAJ;AACAyC,IAAAA,IAAI,EAAEzC,EADN;AAEA+E,IAAAA,QAAQ,EAAEA,QAFV;AAGAV,IAAAA,SAAS,EAAC,cAHV;IAIAtE,KAAK,EAAE,OAAOA,KAAP,KAAiB,WAAjB,GAA+BkS,UAA/B,GAA4ClS,KAJnD;AAKA8C,IAAAA,QAAQ,EAAEA,QALV;IAMAH,QAAQ,EAAEA,QAAQ,IAAIC,QANtB;AAOAyP,IAAAA,SAAS,EAAExP,SAPX;AAQAE,IAAAA,MAAM,EAAEgU,UARR;AASA/T,IAAAA,OAAO,EAAEgU,WATT;AAUA1Y,IAAAA,QAAQ,EAAE4K,YAAAA;AAVV,GADF,EAaG,CAAClE,QAAD,IAAatH,MAAM,CAAC+K,OAAP,KAAmBlI,SAAhC,iBACCyB,KAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;AAAQxE,IAAAA,KAAK,EAAC,EAAA;AAAd,GAAA,EAAkB0E,WAAlB,CAdJ,EAgBG7H,KAAK,CAACC,OAAN,CAAcoI,WAAd,CAAA,IACCA,WAAW,CAACnI,GAAZ,CAAgB,CAAA,KAAA,EAAmBoC,CAAnB,KAAwB;IAAA,IAAvB;MAAEa,KAAF;AAASiF,MAAAA,KAAAA;KAAc,GAAA,KAAA,CAAA;IACtC,MAAMtC,QAAQ,GAAGkV,YAAY,IAAIA,YAAY,CAAC5M,OAAb,CAAqBjL,KAArB,CAA+B,IAAA,CAAC,CAAjE,CAAA;AACA,IAAA,oBACEgC,KAAQ,CAAAwC,aAAR,CAAQ,QAAR,EAAQ;AAAAvH,MAAAA,GAAG,EAAEkC,CAAL;AAAQa,MAAAA,KAAK,EAAEA,KAAf;AAAsB2C,MAAAA,QAAQ,EAAEA,QAAAA;KAAxC,EACGsC,KADH,CADF,CAAA;AAKD,GAPD,CAjBJ,CADF,CAAA;AA4BD;;ACxFD;;;AAGG;;AACH,SAASmW,cAAT,CAYoB,IAAA,EAAA;EAAA,IAZsB;IACxCnb,EADwC;AAExC4E,IAAAA,OAAO,GAAG,EAF8B;IAGxCH,WAHwC;IAIxC1E,KAJwC;IAKxC8C,QALwC;IAMxCH,QANwC;IAOxCC,QAPwC;AAQxCC,IAAAA,SAAS,GAAG,KAR4B;IASxCvE,QATwC;IAUxCyE,MAVwC;AAWxCC,IAAAA,OAAAA;GACkB,GAAA,IAAA,CAAA;EAClB,MAAMkG,YAAY,GAAGC,WAAW,CAC9B,KAAA,IAAA;IAAA,IAAC;AAAE8I,MAAAA,MAAM,EAAE;AAAEjS,QAAAA,KAAAA;AAAF,OAAA;KAAX,GAAA,KAAA,CAAA;IAAA,OACE1B,QAAQ,CAAC0B,KAAK,KAAK,EAAV,GAAe6E,OAAO,CAACqN,UAAvB,GAAoClS,KAArC,CADV,CAAA;GAD8B,EAG9B,CAAC1B,QAAD,EAAWuG,OAAO,CAACqN,UAAnB,CAH8B,CAAhC,CAAA;EAMA,MAAM6E,UAAU,GAAG5N,WAAW,CAC5B,KAAA,IAAA;IAAA,IAAC;AAAE8I,MAAAA,MAAM,EAAE;AAAEjS,QAAAA,KAAAA;AAAF,OAAA;KAAX,GAAA,KAAA,CAAA;AAAA,IAAA,OACE+C,MAAM,CAAC9C,EAAD,EAAKD,KAAL,CADR,CAAA;AAAA,GAD4B,EAG5B,CAAC+C,MAAD,EAAS9C,EAAT,CAH4B,CAA9B,CAAA;EAMA,MAAM+W,WAAW,GAAG7N,WAAW,CAC7B,KAAA,IAAA;IAAA,IAAC;AAAE8I,MAAAA,MAAM,EAAE;AAAEjS,QAAAA,KAAAA;AAAF,OAAA;KAAX,GAAA,KAAA,CAAA;AAAA,IAAA,OACEgD,OAAO,CAAC/C,EAAD,EAAKD,KAAL,CADT,CAAA;AAAA,GAD6B,EAG7B,CAACC,EAAD,EAAK+C,OAAL,CAH6B,CAA/B,CAAA;AAMA,EAAA,oBACEhB,KAAA,CAAAwC,aAAA,CAAA,UAAA,EAAA;AACEvE,IAAAA,EAAE,EAAEA,EADN;AAEEyC,IAAAA,IAAI,EAAEzC,EAFR;AAGEqE,IAAAA,SAAS,EAAC,cAHZ;AAIEtE,IAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAH,GAAW,EAJzB;AAKE0E,IAAAA,WAAW,EAAEA,WALf;AAME5B,IAAAA,QAAQ,EAAEA,QANZ;AAOEH,IAAAA,QAAQ,EAAEA,QAPZ;AAQEsL,IAAAA,QAAQ,EAAErL,QARZ;AASEyP,IAAAA,SAAS,EAAExP,SATb;IAUEwY,IAAI,EAAExW,OAAO,CAACwW,IAVhB;AAWEtY,IAAAA,MAAM,EAAEgU,UAXV;AAYE/T,IAAAA,OAAO,EAAEgU,WAZX;AAaE1Y,IAAAA,QAAQ,EAAE4K,YAAAA;AAbZ,GAAA,CADF,CAAA;AAiBD,CAAA;;AAEDkS,cAAc,CAACE,YAAf,GAA8B;AAC5BzY,EAAAA,SAAS,EAAE,KADiB;AAE5BgC,EAAAA,OAAO,EAAE,EAAA;AAFmB,CAA9B;;ACtDA;;;AAGG;;AACqB,SAAA0W,UAAA,CAA6B/d,KAA7B,EAAqD;EAC3E,MAAM;IAAEqH,OAAF;AAAWlH,IAAAA,QAAAA;AAAX,GAAA,GAAwBH,KAA9B,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBAAO7C,KAAC,CAAAwC,aAAD,CAACiN,iBAAD,EAAuB,EAAA,GAAAjU,KAAAA;AAAA,GAAvB,CAAP,CAAA;AACD;;ACZD;;;AAGG;;AACqB,SAAAge,SAAA,CAA4Bhe,KAA5B,EAAoD;EAC1E,MAAM;IAAEqH,OAAF;AAAWlH,IAAAA,QAAAA;AAAX,GAAA,GAAwBH,KAA9B,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBAAO7C,KAAA,CAAAwC,aAAA,CAACiN,iBAAD,EAAmB;AAAArQ,IAAAA,IAAI,EAAC,KAAL;IAAU,GAAK5D,KAAAA;AAAf,GAAnB,CAAP,CAAA;AACD;;ACZD;;;AAGG;;AACqB,SAAAie,YAAA,CACtBje,KADsB,EACE;EAExB,MAAM;IAAEqH,OAAF;AAAWlH,IAAAA,QAAAA;AAAX,GAAA,GAAwBH,KAA9B,CAAA;EACA,MAAMiU,iBAAiB,GAAG1P,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;AAKA,EAAA,oBAAO7C,KAAA,CAAAwC,aAAA,CAACiN,iBAAD,EAAmB;AAAArQ,IAAAA,IAAI,EAAC,QAAL;IAAa,GAAK5D,KAAAA;AAAlB,GAAnB,CAAP,CAAA;AACD;;ACID,MAAMmH,OAAO,GAAwB;EACnCgW,cADmC;EAEnCC,WAFmC;EAGnCa,YAHmC;EAInCR,WAJmC;EAKnCrF,YALmC;EAMnC2F,UANmC;EAOnCrD,UAPmC;EAQnCC,cARmC;EASnCtC,aATmC;EAUnCc,iBAVmC;EAWnC2B,WAXmC;EAYnCkD,SAZmC;EAanCJ,cAbmC;EAcnCV,YAdmC;EAenCzC,WAfmC;EAgBnCgC,UAhBmC;EAiBnCrD,cAjBmC;AAkBnCe,EAAAA,gBAAAA;AAlBmC,CAArC;;ACfA;;;AAGG;;AACW,SAAU+D,kBAAV,GAA4B;EAIxC,OAAO;IACLjW,MADK;IAELiL,SAFK;IAGL/L,OAHK;AAILgX,IAAAA,UAAU,EAAE,EAJP;AAKLtY,IAAAA,WAAW,EAAE,EAAA;GALf,CAAA;AAOD;;AC4MD;;AACqB,MAAAuY,IAAA,SAA+Bte,SAA/B,CAGpB;AACC;;AAEG;;AAGH;;;;;AAKG;EACHC,WAAA,CAAYC,KAAZ,EAAkC;AAChC,IAAA,KAAA,CAAMA,KAAN,CAAA,CAAA;AADgC,IAAA,IAAA,CARlCqe,WAQkC,GAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,IAAA,CAyMlCC,eAzMkC,GAyMhB,CAAClf,QAAD,EAAc6I,MAAd,KAAqC;AACrD;MACA,IAAIA,MAAM,CAAC3E,MAAP,KAAkB,CAAlB,IAAuB,OAAOlE,QAAP,KAAoB,QAA/C,EAAyD;AACvD,QAAA,OAAOA,QAAP,CAAA;AACD,OAAA;;AAED,MAAA,MAAM2Y,IAAI,GAAsBwG,KAAK,CAACnf,QAAD,EAAW6I,MAAX,CAArC,CAAA;;AACA,MAAA,IAAI5I,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,QAAA,OAAOwJ,MAAM,CAACC,IAAP,CAAYkP,IAAZ,CAAkBxY,CAAAA,GAAlB,CAAuBE,GAAD,IAAiBsY,IAAI,CAACtY,GAAD,CAA3C,CAAP,CAAA;AACD,OAAA;;AAED,MAAA,OAAOsY,IAAP,CAAA;KApNgC,CAAA;;AAAA,IAAA,IAAA,CA4NlCyG,aA5NkC,GA4NlB,CAACC,UAAD,EAA4Brf,QAA5B,KAA2C;MACzD,MAAMsf,WAAW,GAAG,UAClBC,IADkB,EAElBC,GAFkB,EAGlBC,KAHkB,EAIhB;AAAA,QAAA,IAFFD,GAEE,KAAA,KAAA,CAAA,EAAA;AAFFA,UAAAA,GAEE,GAFc,EAEd,CAAA;AAAA,SAAA;;AAAA,QAAA,IADFC,KACE,KAAA,KAAA,CAAA,EAAA;UADFA,KACE,GADM,CAAC,EAAD,CACN,CAAA;AAAA,SAAA;;QACFjW,MAAM,CAACC,IAAP,CAAY8V,IAAZ,EAAkBG,OAAlB,CAA2Brf,GAAD,IAAgB;AACxC,UAAA,IAAI,OAAOkf,IAAI,CAAClf,GAAD,CAAX,KAAqB,QAAzB,EAAmC;AACjC,YAAA,MAAMsf,QAAQ,GAAGF,KAAK,CAACtf,GAAN,CAAWyf,IAAD,IAAaA,IAAb,GAAA,GAAA,GAAqBvf,GAA/B,CAAjB,CADiC;;AAGjC,YAAA,IACEkf,IAAI,CAAClf,GAAD,CAAJ,CAAUwf,8BAAV,CAAA,IACAN,IAAI,CAAClf,GAAD,CAAJ,CAAUyf,QAAV,CAAA,KAAwB,EAF1B,EAGE;cACAN,GAAG,CAAC1N,IAAJ,CAASyN,IAAI,CAAClf,GAAD,CAAJ,CAAUyf,QAAV,CAAT,CAAA,CAAA;AACD,aALD,MAKO;cACLR,WAAW,CAACC,IAAI,CAAClf,GAAD,CAAL,EAAYmf,GAAZ,EAAiBG,QAAjB,CAAX,CAAA;AACD,aAAA;AACF,WAXD,MAWO,IAAItf,GAAG,KAAKyf,QAAR,IAAoBP,IAAI,CAAClf,GAAD,CAAJ,KAAc,EAAtC,EAA0C;AAC/Cof,YAAAA,KAAK,CAACC,OAAN,CAAeE,IAAD,IAAS;cACrBA,IAAI,GAAGA,IAAI,CAAChT,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAP,CAAA;;cACA,MAAMmT,SAAS,GAAGC,GAAI,CAAChgB,QAAD,EAAW4f,IAAX,CAAtB,CAFqB;AAIrB;;;cACA,IAAI,OAAOG,SAAP,KAAqB,QAArB,IAAiCE,QAAQ,CAACF,SAAD,CAA7C,EAA0D;gBACxDP,GAAG,CAAC1N,IAAJ,CAAS8N,IAAT,CAAA,CAAA;AACD,eAAA;aAPH,CAAA,CAAA;AASD,WAAA;SAtBH,CAAA,CAAA;AAwBA,QAAA,OAAOJ,GAAP,CAAA;OA7BF,CAAA;;MAgCA,OAAOF,WAAW,CAACD,UAAD,CAAlB,CAAA;KA7PgC,CAAA;;IAAA,IA2QlC3d,CAAAA,QA3QkC,GA2QvB,CAAC1B,QAAD,EAAcqC,cAAd,EAA+CgB,EAA/C,KAA8D;MACvE,MAAM;QACJ6c,WADI;QAEJC,aAFI;QAGJC,QAHI;QAIJC,UAJI;QAKJC,YALI;AAMJ5e,QAAAA,QAAAA;AANI,OAAA,GAOF,KAAKd,KAPT,CAAA;MAQA,MAAM;QAAEI,WAAF;AAAeF,QAAAA,MAAAA;AAAf,OAAA,GAA0B,KAAKa,KAArC,CAAA;;MACA,IAAIgF,UAAQ,CAAC3G,QAAD,CAAR,IAAsBC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAA1B,EAAmD;QACjD,MAAMugB,QAAQ,GAAG,IAAKC,CAAAA,iBAAL,CAAuB,IAAK5f,CAAAA,KAA5B,EAAmCZ,QAAnC,CAAjB,CAAA;QACAA,QAAQ,GAAGugB,QAAQ,CAACvgB,QAApB,CAAA;AACD,OAAA;;AAED,MAAA,MAAMygB,YAAY,GAAG,CAACJ,UAAD,IAAeC,YAApC,CAAA;AACA,MAAA,IAAI3e,KAAK,GAA6B;QAAE3B,QAAF;AAAYc,QAAAA,MAAAA;OAAlD,CAAA;MACA,IAAIyC,WAAW,GAAGvD,QAAlB,CAAA;;AAEA,MAAA,IAAImgB,aAAa,KAAK,IAAlB,IAA0BC,QAAQ,KAAK,IAA3C,EAAiD;QAC/C,MAAMM,eAAe,GAAG1f,WAAW,CAAC6F,cAAZ,CAA2B/F,MAA3B,EAAmCd,QAAnC,CAAxB,CAAA;QACA,MAAMqf,UAAU,GAAGre,WAAW,CAAC2f,YAAZ,CACjBD,eADiB,EAEjB,EAFiB,EAGjB1gB,QAHiB,CAAnB,CAAA;QAMA,MAAM4gB,UAAU,GAAG,IAAKxB,CAAAA,aAAL,CAAmBC,UAAnB,EAA+Brf,QAA/B,CAAnB,CAAA;AAEAuD,QAAAA,WAAW,GAAG,IAAK2b,CAAAA,eAAL,CAAqBlf,QAArB,EAA+B4gB,UAA/B,CAAd,CAAA;AACAjf,QAAAA,KAAK,GAAG;AACN3B,UAAAA,QAAQ,EAAEuD,WAAAA;SADZ,CAAA;AAGD,OAAA;;AAED,MAAA,IAAIkd,YAAJ,EAAkB;AAChB,QAAA,MAAMI,gBAAgB,GAAG,IAAA,CAAKC,QAAL,CAAcvd,WAAd,CAAzB,CAAA;AACA,QAAA,IAAIgP,MAAM,GAAGsO,gBAAgB,CAACtO,MAA9B,CAAA;AACA,QAAA,IAAInQ,WAAW,GAAGye,gBAAgB,CAACze,WAAnC,CAAA;QACA,MAAM2e,sBAAsB,GAAGxO,MAA/B,CAAA;QACA,MAAMyO,2BAA2B,GAAG5e,WAApC,CAAA;;AACA,QAAA,IAAI8d,WAAJ,EAAiB;UACf,MAAMe,MAAM,GAAGjgB,WAAW,CAACkgB,mBAAZ,CACbL,gBADa,EAEbX,WAFa,CAAf,CAAA;UAIA9d,WAAW,GAAG6e,MAAM,CAAC7e,WAArB,CAAA;UACAmQ,MAAM,GAAG0O,MAAM,CAAC1O,MAAhB,CAAA;AACD,SAAA;;AACD5Q,QAAAA,KAAK,GAAG;AACN3B,UAAAA,QAAQ,EAAEuD,WADJ;UAENgP,MAFM;UAGNnQ,WAHM;UAIN2e,sBAJM;AAKNC,UAAAA,2BAAAA;SALF,CAAA;AAOD,OArBD,MAqBO,IAAI,CAACX,UAAD,IAAehe,cAAnB,EAAmC;AACxC,QAAA,MAAMD,WAAW,GAAG8d,WAAW,GAC1BlP,YAAY,CAAC3O,cAAD,EAAiB6d,WAAjB,EAA8B,IAA9B,CADc,GAE3B7d,cAFJ,CAAA;AAGAV,QAAAA,KAAK,GAAG;AACN3B,UAAAA,QAAQ,EAAEuD,WADJ;AAENnB,UAAAA,WAAW,EAAEA,WAFP;AAGNmQ,UAAAA,MAAM,EAAEvR,WAAW,CAACmgB,YAAZ,EAA2BC,CAAAA,WAA3B,CAAuChf,WAAvC,CAAA;SAHV,CAAA;AAKD,OAAA;;AACD,MAAA,IAAA,CAAKN,QAAL,CACEH,KADF,EAEE,MAAMD,QAAQ,IAAIA,QAAQ,CAAC,EAAE,GAAG,IAAA,CAAKC,KAAV;QAAiB,GAAGA,KAAAA;OAArB,EAA8B0B,EAA9B,CAF5B,CAAA,CAAA;KA7UgC,CAAA;;AAAA,IAAA,IAAA,CAyVlC8C,MAzVkC,GAyVzB,CAAC9C,EAAD,EAAasV,IAAb,KAA0B;MACjC,MAAM;AAAExS,QAAAA,MAAAA;AAAF,OAAA,GAAa,KAAKvF,KAAxB,CAAA;;AACA,MAAA,IAAIuF,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAAC9C,EAAD,EAAKsV,IAAL,CAAN,CAAA;AACD,OAAA;KA7V+B,CAAA;;AAAA,IAAA,IAAA,CAsWlCvS,OAtWkC,GAsWxB,CAAC/C,EAAD,EAAasV,IAAb,KAA0B;MAClC,MAAM;AAAEvS,QAAAA,OAAAA;AAAF,OAAA,GAAc,KAAKxF,KAAzB,CAAA;;AACA,MAAA,IAAIwF,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAAC/C,EAAD,EAAKsV,IAAL,CAAP,CAAA;AACD,OAAA;KA1W+B,CAAA;;IAAA,IAqXlC0I,CAAAA,QArXkC,GAqXtB7f,KAAD,IAAgC;AACzCA,MAAAA,KAAK,CAACC,cAAN,EAAA,CAAA;;AACA,MAAA,IAAID,KAAK,CAAC6T,MAAN,KAAiB7T,KAAK,CAACsB,aAA3B,EAA0C;AACxC,QAAA,OAAA;AACD,OAAA;;AAEDtB,MAAAA,KAAK,CAAC8f,OAAN,EAAA,CAAA;MACA,MAAM;QAAEnB,aAAF;QAAiBD,WAAjB;QAA8BG,UAA9B;AAA0CgB,QAAAA,QAAAA;AAA1C,OAAA,GAAuD,KAAKzgB,KAAlE,CAAA;MACA,IAAI;AAAEZ,QAAAA,QAAQ,EAAEuD,WAAAA;AAAZ,OAAA,GAA4B,KAAK5B,KAArC,CAAA;MACA,MAAM;QAAEb,MAAF;AAAUE,QAAAA,WAAAA;AAAV,OAAA,GAA0B,KAAKW,KAArC,CAAA;;MAEA,IAAIwe,aAAa,KAAK,IAAtB,EAA4B;QAC1B,MAAMO,eAAe,GAAG1f,WAAW,CAAC6F,cAAZ,CAA2B/F,MAA3B,EAAmCyC,WAAnC,CAAxB,CAAA;QACA,MAAM8b,UAAU,GAAGre,WAAW,CAAC2f,YAAZ,CACjBD,eADiB,EAEjB,EAFiB,EAGjBnd,WAHiB,CAAnB,CAAA;QAMA,MAAMqd,UAAU,GAAG,IAAKxB,CAAAA,aAAL,CAAmBC,UAAnB,EAA+B9b,WAA/B,CAAnB,CAAA;AAEAA,QAAAA,WAAW,GAAG,IAAK2b,CAAAA,eAAL,CAAqB3b,WAArB,EAAkCqd,UAAlC,CAAd,CAAA;AACD,OAAA;;AAED,MAAA,IAAIP,UAAU,IAAI,IAAKkB,CAAAA,YAAL,EAAlB,EAAuC;AACrC;AACA;AACA,QAAA,MAAMnf,WAAW,GAAG8d,WAAW,IAAI,EAAnC,CAAA;AACA,QAAA,MAAM3N,MAAM,GAAG2N,WAAW,GACtBlf,WAAW,CAACmgB,YAAZ,EAAA,CAA2BC,WAA3B,CAAuClB,WAAvC,CADsB,GAEtB,EAFJ,CAAA;AAGA,QAAA,IAAA,CAAKpe,QAAL,CACE;AACE9B,UAAAA,QAAQ,EAAEuD,WADZ;UAEEgP,MAFF;UAGEnQ,WAHF;AAIE2e,UAAAA,sBAAsB,EAAE,EAJ1B;AAKEC,UAAAA,2BAA2B,EAAE,EAAA;AAL/B,SADF,EAQE,MAAK;AACH,UAAA,IAAIK,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CACN,EAAE,GAAG,IAAA,CAAK1f,KAAV;AAAiB3B,cAAAA,QAAQ,EAAEuD,WAA3B;AAAwCie,cAAAA,MAAM,EAAE,WAAA;aAD1C,EAENhgB,KAFM,CAAR,CAAA;AAID,WAAA;SAdL,CAAA,CAAA;AAiBD,OAAA;KAra+B,CAAA;;AAGhC,IAAA,IAAI,CAACZ,KAAK,CAAC6gB,SAAX,EAAsB;AACpB,MAAA,MAAM,IAAIzM,KAAJ,CAAU,wDAAV,CAAN,CAAA;AACD,KAAA;;IAED,IAAKrT,CAAAA,KAAL,GAAa,IAAA,CAAK6e,iBAAL,CAAuB5f,KAAvB,EAA8BA,KAAK,CAACZ,QAApC,CAAb,CAAA;;AACA,IAAA,IACE,KAAKY,KAAL,CAAWc,QAAX,IACA,CAAC8J,UAAU,CAAC,IAAA,CAAK7J,KAAL,CAAW3B,QAAZ,EAAsB,IAAA,CAAKY,KAAL,CAAWZ,QAAjC,CAFb,EAGE;AACA,MAAA,IAAA,CAAKY,KAAL,CAAWc,QAAX,CAAoB,KAAKC,KAAzB,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,IAAA,CAAKsd,WAAL,gBAAmB7Z,KAAK,CAACsc,SAAN,EAAnB,CAAA;AACD,GAAA;AAED;;;;;AAKG;;;EACHC,gCAAgC,CAAC7d,SAAD,EAA2B;IACzD,MAAM8d,SAAS,GAAG,IAAA,CAAKpB,iBAAL,CAAuB1c,SAAvB,EAAkCA,SAAS,CAAC9D,QAA5C,CAAlB,CAAA;;AACA,IAAA,IACE,CAACwL,UAAU,CAACoW,SAAS,CAAC5hB,QAAX,EAAqB8D,SAAS,CAAC9D,QAA/B,CAAX,IACA,CAACwL,UAAU,CAACoW,SAAS,CAAC5hB,QAAX,EAAqB,IAAA,CAAK2B,KAAL,CAAW3B,QAAhC,CADX,IAEA8D,SAAS,CAACpC,QAHZ,EAIE;MACAoC,SAAS,CAACpC,QAAV,CAAmBkgB,SAAnB,CAAA,CAAA;AACD,KAAA;;IACD,IAAK9f,CAAAA,QAAL,CAAc8f,SAAd,CAAA,CAAA;AACD,GAAA;AAED;;;;;;;AAOG;;;AACHpB,EAAAA,iBAAiB,CACf5f,KADe,EAEfihB,aAFe,EAEE;AAEjB,IAAA,MAAMlgB,KAAK,GAAoB,IAAKA,CAAAA,KAAL,IAAc,EAA7C,CAAA;AACA,IAAA,MAAMb,MAAM,GAAG,QAAYF,IAAAA,KAAZ,GAAoBA,KAAK,CAACE,MAA1B,GAAmC,IAAA,CAAKF,KAAL,CAAWE,MAA7D,CAAA;AACA,IAAA,MAAM8D,QAAQ,GACZ,CAAC,UAAA,IAAchE,KAAd,GAAsBA,KAAK,CAACgE,QAA5B,GAAwC,IAAKhE,CAAAA,KAAL,CAAWgE,QAApD,KAAkE,EADpE,CAAA;AAEA,IAAA,MAAMkd,IAAI,GAAG,OAAOD,aAAP,KAAyB,WAAtC,CAAA;AACA,IAAA,MAAMvB,YAAY,GAChB,cAAkB1f,IAAAA,KAAlB,GAA0BA,KAAK,CAAC0f,YAAhC,GAA+C,IAAA,CAAK1f,KAAL,CAAW0f,YAD5D,CAAA;IAEA,MAAMG,YAAY,GAAGqB,IAAI,IAAI,CAAClhB,KAAK,CAACyf,UAAf,IAA6BC,YAAlD,CAAA;IACA,MAAMvB,UAAU,GAAGje,MAAnB,CAAA;AACA,IAAA,IAAIE,WAAW,GAAuBW,KAAK,CAACX,WAA5C,CAAA;;AACA,IAAA,IACE,CAACA,WAAD,IACAA,WAAW,CAAC+gB,qBAAZ,CAAkCnhB,KAAK,CAAC6gB,SAAxC,EAAmD1C,UAAnD,CAFF,EAGE;MACA/d,WAAW,GAAGghB,iBAAiB,CAAIphB,KAAK,CAAC6gB,SAAV,EAAqB1C,UAArB,CAA/B,CAAA;AACD,KAAA;;IACD,MAAM/e,QAAQ,GAAMgB,WAAW,CAACM,mBAAZ,CAClBR,MADkB,EAElB+gB,aAFkB,CAApB,CAAA;IAIA,MAAMnB,eAAe,GAAG1f,WAAW,CAAC6F,cAAZ,CAA2B/F,MAA3B,EAAmCd,QAAnC,CAAxB,CAAA;;IAEA,MAAMiiB,gBAAgB,GAAG,MAAwB;MAC/C,IAAIrhB,KAAK,CAACyf,UAAV,EAAsB;QACpB,OAAO;AAAE9N,UAAAA,MAAM,EAAE,EAAV;AAAcnQ,UAAAA,WAAW,EAAE,EAAA;SAAlC,CAAA;AACD,OAFD,MAEO,IAAI,CAACxB,KAAK,CAAC0f,YAAX,EAAyB;QAC9B,OAAO;AACL/N,UAAAA,MAAM,EAAE5Q,KAAK,CAACof,sBAAN,IAAgC,EADnC;AAEL3e,UAAAA,WAAW,EAAET,KAAK,CAACqf,2BAAN,IAAqC,EAAA;SAFpD,CAAA;AAID,OAAA;;MACD,OAAO;AACLzO,QAAAA,MAAM,EAAE5Q,KAAK,CAAC4Q,MAAN,IAAgB,EADnB;AAELnQ,QAAAA,WAAW,EAAET,KAAK,CAACS,WAAN,IAAqB,EAAA;OAFpC,CAAA;KATF,CAAA;;AAeA,IAAA,IAAImQ,MAAJ,CAAA;AACA,IAAA,IAAInQ,WAAJ,CAAA;AACA,IAAA,IAAI2e,sBAAsB,GACxBpf,KAAK,CAACof,sBADR,CAAA;AAEA,IAAA,IAAIC,2BAA2B,GAC7Brf,KAAK,CAACqf,2BADR,CAAA;;AAEA,IAAA,IAAIP,YAAJ,EAAkB;MAChB,MAAMI,gBAAgB,GAAG,IAAA,CAAKC,QAAL,CAAc9gB,QAAd,EAAwBc,MAAxB,EAAgCE,WAAhC,CAAzB,CAAA;MACAuR,MAAM,GAAGsO,gBAAgB,CAACtO,MAA1B,CAAA;MACAnQ,WAAW,GAAGye,gBAAgB,CAACze,WAA/B,CAAA;AACA2e,MAAAA,sBAAsB,GAAGxO,MAAzB,CAAA;AACAyO,MAAAA,2BAA2B,GAAG5e,WAA9B,CAAA;AACD,KAND,MAMO;MACL,MAAM8f,aAAa,GAAGD,gBAAgB,EAAtC,CAAA;MACA1P,MAAM,GAAG2P,aAAa,CAAC3P,MAAvB,CAAA;MACAnQ,WAAW,GAAG8f,aAAa,CAAC9f,WAA5B,CAAA;AACD,KAAA;;IACD,IAAIxB,KAAK,CAACsf,WAAV,EAAuB;AACrB,MAAA,MAAMe,MAAM,GAAGjgB,WAAW,CAACkgB,mBAAZ,CACb;QAAE9e,WAAF;AAAemQ,QAAAA,MAAAA;AAAf,OADa,EAEb3R,KAAK,CAACsf,WAFO,CAAf,CAAA;MAIA9d,WAAW,GAAG6e,MAAM,CAAC7e,WAArB,CAAA;MACAmQ,MAAM,GAAG0O,MAAM,CAAC1O,MAAhB,CAAA;AACD,KAAA;;IACD,MAAM7O,QAAQ,GAAG1C,WAAW,CAACoG,UAAZ,CACfsZ,eADe,EAEf9b,QAAQ,CAAC,gBAAD,CAFO,EAGf5E,QAHe,EAIfY,KAAK,CAACyF,QAJS,EAKfzF,KAAK,CAAC0F,WALS,CAAjB,CAAA;AAOA,IAAA,MAAMsb,SAAS,GAAoB;MACjC5gB,WADiC;MAEjCF,MAFiC;MAGjC8D,QAHiC;MAIjClB,QAJiC;MAKjC1D,QALiC;MAMjC8hB,IANiC;MAOjCvP,MAPiC;MAQjCnQ,WARiC;MASjC2e,sBATiC;AAUjCC,MAAAA,2BAAAA;KAVF,CAAA;AAYA,IAAA,OAAOY,SAAP,CAAA;AACD,GAAA;AAED;;;;;AAKG;;;AACH1O,EAAAA,qBAAqB,CACnBpP,SADmB,EAEnB8d,SAFmB,EAEO;AAE1B,IAAA,OAAOO,YAAY,CAAC,IAAD,EAAOre,SAAP,EAAkB8d,SAAlB,CAAnB,CAAA;AACD,GAAA;AAED;;;;;;AAMG;;;AACHd,EAAAA,QAAQ,CACN9gB,QADM,EAENc,MAFM,EAGNshB,cAHM,EAG6B;AAAA,IAAA,IADnCthB,MACmC,KAAA,KAAA,CAAA,EAAA;AADnCA,MAAAA,MACmC,GAD1B,IAAA,CAAKF,KAAL,CAAWE,MACe,CAAA;AAAA,KAAA;;IAEnC,MAAME,WAAW,GAAGohB,cAAc,GAC9BA,cAD8B,GAE9B,IAAA,CAAKzgB,KAAL,CAAWX,WAFf,CAAA;IAGA,MAAM;MAAEqhB,cAAF;AAAkBC,MAAAA,eAAAA;AAAlB,KAAA,GAAsC,KAAK1hB,KAAjD,CAAA;IACA,MAAM2hB,cAAc,GAAGvhB,WAAW,CAAC6F,cAAZ,CAA2B/F,MAA3B,EAAmCd,QAAnC,CAAvB,CAAA;AACA,IAAA,OAAOgB,WAAW,CACfmgB,YADI,EAAA,CAEJqB,gBAFI,CAGHxiB,QAHG,EAIHuiB,cAJG,EAKHF,cALG,EAMHC,eANG,CAAP,CAAA;AAQD,GAAA;AAED;;;EACAG,YAAY,CAAC1hB,QAAD,EAAyB;IACnC,MAAM;MAAEwR,MAAF;MAAUnQ,WAAV;MAAuBtB,MAAvB;AAA+B8D,MAAAA,QAAAA;AAA/B,KAAA,GAA4C,KAAKjD,KAAvD,CAAA;IACA,MAAM;MAAE+gB,aAAF;AAAiBjc,MAAAA,WAAAA;AAAjB,KAAA,GAAiC,KAAK7F,KAA5C,CAAA;AACA,IAAA,MAAMqH,OAAO,GAAGnD,YAAY,CAAOF,QAAP,CAA5B,CAAA;IACA,MAAM6S,iBAAiB,GAAGtS,WAAW,CACnC,mBADmC,EAEnCpE,QAFmC,EAGnCkH,OAHmC,CAArC,CAAA;;IAMA,IAAIsK,MAAM,IAAIA,MAAM,CAACrO,MAAjB,IAA2Bwe,aAAa,IAAI,KAAhD,EAAuD;AACrD,MAAA,oBACEtd,KAAC,CAAAwC,aAAD,CAAC6P,iBAAD,EACE;AAAAlF,QAAAA,MAAM,EAAEA,MAAR;QACAnQ,WAAW,EAAEA,WAAW,IAAI,EAD5B;AAEAtB,QAAAA,MAAM,EAAEA,MAFR;AAGA8D,QAAAA,QAAQ,EAAEA,QAHV;AAIA6B,QAAAA,WAAW,EAAEA,WAAAA;AAJb,OADF,CADF,CAAA;AASD,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAED;;;;AAIG;;;AAgOH;AACAkc,EAAAA,WAAW,GAAA;AAAA,IAAA,IAAA,qBAAA,CAAA;;IACT,MAAM;AAAE3hB,MAAAA,WAAAA;AAAF,KAAA,GAAkB,KAAKW,KAA7B,CAAA;IACA,MAAM;MAAEkH,MAAF;MAAUiL,SAAV;MAAqB/L,OAArB;AAA8BtB,MAAAA,WAAAA;AAA9B,KAAA,GAA8CqY,kBAAkB,EAAtE,CAAA;IACA,OAAO;MACLjW,MAAM,EAAE,EAAE,GAAGA,MAAL;QAAa,GAAG,IAAA,CAAKjI,KAAL,CAAWiI,MAAAA;OAD9B;MAELiL,SAAS,EAAE,EACT,GAAGA,SADM;QAET,GAAG,IAAA,CAAKlT,KAAL,CAAWkT,SAFL;AAGTC,QAAAA,eAAe,EAAE,EACf,GAAGD,SAAS,CAACC,eADE;AAEf,UAAA,IAAA,CAAA,qBAAA,GAAG,KAAKnT,KAAL,CAAWkT,SAAd,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAG,sBAAsBC,eAAzB,CAAA;AAFe,SAAA;OALd;MAULhM,OAAO,EAAE,EAAE,GAAGA,OAAL;QAAc,GAAG,IAAA,CAAKnH,KAAL,CAAWmH,OAAAA;OAVhC;AAWLgX,MAAAA,UAAU,EAAE,IAAA,CAAKne,KAAL,CAAWE,MAXlB;AAYL2F,MAAAA,WAAW,EAAE,IAAK7F,CAAAA,KAAL,CAAW6F,WAAX,IAA0BA,WAZlC;AAaLzF,MAAAA,WAAAA;KAbF,CAAA;AAeD,GAAA;AAED;;;AACA4hB,EAAAA,MAAM,GAAA;AACJ,IAAA,IAAI,IAAK3D,CAAAA,WAAL,CAAiB4D,OAArB,EAA8B;MAC5B,IAAK5D,CAAAA,WAAL,CAAiB4D,OAAjB,CAAyBC,aAAzB,CACE,IAAIC,WAAJ,CAAgB,QAAhB,EAA0B;AACxBC,QAAAA,UAAU,EAAE,IAAA;AADY,OAA1B,CADF,CAAA,CAAA;AAKA,MAAA,IAAA,CAAK/D,WAAL,CAAiB4D,OAAjB,CAAyBI,aAAzB,EAAA,CAAA;AACD,KAAA;AACF,GAAA;AAED;;;;AAIG;;;AACH1B,EAAAA,YAAY,GAAA;IACV,MAAM;MAAErB,WAAF;AAAegD,MAAAA,OAAAA;AAAf,KAAA,GAA2B,KAAKtiB,KAAtC,CAAA;IACA,MAAM;AAAEZ,MAAAA,QAAAA;AAAF,KAAA,GAAe,KAAK2B,KAA1B,CAAA;IACA,MAAM;AAAEX,MAAAA,WAAAA;AAAF,KAAA,GAAkB,KAAKW,KAA7B,CAAA;AACA,IAAA,MAAMkf,gBAAgB,GAAG,IAAA,CAAKC,QAAL,CAAc9gB,QAAd,CAAzB,CAAA;AACA,IAAA,IAAIuS,MAAM,GAAGsO,gBAAgB,CAACtO,MAA9B,CAAA;AACA,IAAA,IAAInQ,WAAW,GAAGye,gBAAgB,CAACze,WAAnC,CAAA;IACA,MAAM2e,sBAAsB,GAAGxO,MAA/B,CAAA;IACA,MAAMyO,2BAA2B,GAAG5e,WAApC,CAAA;;AACA,IAAA,IAAImQ,MAAM,CAACrO,MAAP,GAAgB,CAApB,EAAuB;AACrB,MAAA,IAAIgc,WAAJ,EAAiB;QACf,MAAMe,MAAM,GAAGjgB,WAAW,CAACkgB,mBAAZ,CACbL,gBADa,EAEbX,WAFa,CAAf,CAAA;QAIA9d,WAAW,GAAG6e,MAAM,CAAC7e,WAArB,CAAA;QACAmQ,MAAM,GAAG0O,MAAM,CAAC1O,MAAhB,CAAA;AACD,OAAA;;AACD,MAAA,IAAA,CAAKzQ,QAAL,CACE;QACEyQ,MADF;QAEEnQ,WAFF;QAGE2e,sBAHF;AAIEC,QAAAA,2BAAAA;AAJF,OADF,EAOE,MAAK;AACH,QAAA,IAAIkC,OAAJ,EAAa;UACXA,OAAO,CAAC3Q,MAAD,CAAP,CAAA;AACD,SAFD,MAEO;AACLL,UAAAA,OAAO,CAACwE,KAAR,CAAc,wBAAd,EAAwCnE,MAAxC,CAAA,CAAA;AACD,SAAA;OAZL,CAAA,CAAA;AAeA,MAAA,OAAO,KAAP,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAED;;AAEG;;;AACHvN,EAAAA,MAAM,GAAA;IACJ,MAAM;MACJ2E,QADI;MAEJtG,EAFI;MAGJgD,QAHI;MAIJC,WAJI;AAKJoB,MAAAA,SAAS,GAAG,EALR;MAMJyb,OANI;MAOJrd,IAPI;MAQJsd,MARI;MASJ/N,MATI;MAUJ8D,MAVI;MAWJkK,YAXI;MAYJC,OAZI;MAaJC,aAbI;AAcJC,MAAAA,eAAe,GAAG,KAdd;AAeJzd,MAAAA,QAAQ,GAAG,KAfP;AAgBJC,MAAAA,QAAQ,GAAG,KAhBP;MAiBJS,WAjBI;AAkBJgd,MAAAA,oBAAAA;AAlBI,KAAA,GAmBF,KAAK7iB,KAnBT,CAAA;IAqBA,MAAM;MAAEE,MAAF;MAAU8D,QAAV;MAAoB5E,QAApB;MAA8BoC,WAA9B;AAA2CsB,MAAAA,QAAAA;AAA3C,KAAA,GAAwD,KAAK/B,KAAnE,CAAA;AACA,IAAA,MAAMZ,QAAQ,GAAG,IAAK4hB,CAAAA,WAAL,EAAjB,CAAA;IACA,MAAM;AAAE5Z,MAAAA,WAAW,EAAE4C,YAAAA;KAAiB5K,GAAAA,QAAQ,CAAC8H,MAA/C,CAAA;IACA,MAAM;AAAEiN,MAAAA,YAAAA;AAAF,KAAA,GAAmB/U,QAAQ,CAAC+S,SAAT,CAAmBC,eAA5C,CAzBI;AA2BJ;AACA;;AACA,IAAA,MAAM2P,EAAE,GAAGD,oBAAoB,GAAGN,OAAH,GAAaxf,SAA5C,CAAA;AACA,IAAA,MAAMggB,OAAO,GAAGF,oBAAoB,IAAIN,OAAxB,IAAmC,MAAnD,CAAA;AAEA,IAAA,oBACE/d,KAAA,CAAAwC,aAAA,CAAC+b,OAAD,EAAQ;AACNjc,MAAAA,SAAS,EAAEA,SAAS,GAAGA,SAAH,GAAe,MAD7B;AAENrE,MAAAA,EAAE,EAAEA,EAFE;AAGNyC,MAAAA,IAAI,EAAEA,IAHA;AAINsd,MAAAA,MAAM,EAAEA,MAJF;AAKN/N,MAAAA,MAAM,EAAEA,MALF;AAMN8D,MAAAA,MAAM,EAAEA,MANF;AAONkK,MAAAA,YAAY,EAAEA,YAPR;AAQNO,MAAAA,OAAO,EAAEN,OARH;AASNO,MAAAA,aAAa,EAAEN,aATT;AAUNlD,MAAAA,UAAU,EAAEmD,eAVN;MAWNnC,QAAQ,EAAE,KAAKA,QAXT;AAYNqC,MAAAA,EAAE,EAAEA,EAZE;AAaNI,MAAAA,GAAG,EAAE,IAAK7E,CAAAA,WAAAA;AAbJ,KAAR,EAeG,IAAA,CAAKwD,YAAL,CAAkB1hB,QAAlB,CAfH,eAgBEqE,KAAA,CAAAwC,aAAA,CAAC+D,YAAD,EAAa;AACX7F,MAAAA,IAAI,EAAC,EADM;AAEXhF,MAAAA,MAAM,EAAEA,MAFG;AAGX8D,MAAAA,QAAQ,EAAEA,QAHC;AAIXxC,MAAAA,WAAW,EAAEA,WAJF;AAKXsB,MAAAA,QAAQ,EAAEA,QALC;AAMX2C,MAAAA,QAAQ,EAAEA,QANC;AAOXC,MAAAA,WAAW,EAAEA,WAPF;AAQXG,MAAAA,WAAW,EAAEA,WARF;AASXzG,MAAAA,QAAQ,EAAEA,QATC;MAUX0B,QAAQ,EAAE,KAAKA,QAVJ;MAWXyE,MAAM,EAAE,KAAKA,MAXF;MAYXC,OAAO,EAAE,KAAKA,OAZH;AAaXrF,MAAAA,QAAQ,EAAEA,QAbC;AAcXgF,MAAAA,QAAQ,EAAEA,QAdC;AAeXC,MAAAA,QAAQ,EAAEA,QAAAA;KAfZ,CAhBF,EAiCG2D,QAAQ,GAAGA,QAAH,gBAAcvE,KAAA,CAAAwC,aAAA,CAACkO,YAAD,EAAa;AAAClR,MAAAA,QAAQ,EAAEA,QAAAA;AAAX,KAAb,CAjCzB,CADF,CAAA;AAqCD,GAAA;;AAxkBF;;ACzND;;AACc,SAAUmf,SAAV,CACZC,UADY,EACkBC,QADlB,EAC+B;AAE3C,EAAA,oBAAOC,UAAU,CACf,CAEEJ,IAAAA,EAAAA,GAFF,KAGI;AAAA,IAAA,IAAA,qBAAA,EAAA,UAAA,CAAA;;IAAA,IAFF;MAAEjb,MAAF;MAAUd,OAAV;MAAmB+L,SAAnB;MAA8B,GAAGqQ,WAAAA;KAE/B,GAAA,IAAA,CAAA;AACFtb,IAAAA,MAAM,GAAG,EAAE,GAAGmb,UAAU,CAACnb,MAAhB;MAAwB,GAAGA,MAAAA;KAApC,CAAA;AACAd,IAAAA,OAAO,GAAG,EAAE,GAAGic,UAAU,CAACjc,OAAhB;MAAyB,GAAGA,OAAAA;KAAtC,CAAA;AACA+L,IAAAA,SAAS,GAAG,EACV,GAAGkQ,UAAU,CAAClQ,SADJ;AAEV,MAAA,GAAGA,SAFO;AAGVC,MAAAA,eAAe,EAAE,EACf,IAAGiQ,UAAH,KAAGA,IAAAA,IAAAA,UAAH,KAAGA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,qBAAAA,GAAAA,UAAU,CAAElQ,SAAf,MAAG,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAuBC,eAA1B,CADe;QAEf,IAAGD,CAAAA,UAAAA,GAAAA,SAAH,MAAG,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAWC,eAAd,CAAA;AAFe,OAAA;KAHnB,CAAA;;AASA,IAAA,IAAGkQ,QAAH,EAAa;MACX,oBACE7e,KAAC,CAAAwC,aAAD,CAACqc,QAAD,EACM,EAAA,GAAAD,UAAA;WACAG,WADA;AAEJtb,QAAAA,MAAM,EAAEA,MAFJ;AAGJd,QAAAA,OAAO,EAAEA,OAHL;AAIJ+L,QAAAA,SAAS,EAAEA,SAJP;AAKJgQ,QAAAA,GAAG,EAAEA,GAAAA;AALD,OADN,CADF,CAAA;AAUD,KAAA;;IAED,oBACE1e,KAAC,CAAAwC,aAAD,CAACoX,IAAD,EACM,EAAA,GAAAgF,UAAA;SACAG,WADA;AAEJtb,MAAAA,MAAM,EAAEA,MAFJ;AAGJd,MAAAA,OAAO,EAAEA,OAHL;AAIJ+L,MAAAA,SAAS,EAAEA,SAJP;AAKJgQ,MAAAA,GAAG,EAAEA,GAAAA;AALD,KADN,CADF,CAAA;AAUD,GAvCc,CAAjB,CAAA;AAyCD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@rjsf/core/dist/core.umd.development.js b/node_modules/@rjsf/core/dist/core.umd.development.js
index bfd0394..f2cf063 100644
--- a/node_modules/@rjsf/core/dist/core.umd.development.js
+++ b/node_modules/@rjsf/core/dist/core.umd.development.js
@@ -4121,7 +4121,7 @@
 
   /** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */
 
-  function withTheme(themeProps) {
+  function withTheme(themeProps, RJSFForm) {
     return /*#__PURE__*/React.forwardRef((_ref, ref) => {
       var _themeProps$templates, _templates;
 
@@ -4143,6 +4143,17 @@
           ...((_templates = templates) === null || _templates === void 0 ? void 0 : _templates.ButtonTemplates)
         }
       };
+
+      if (RJSFForm) {
+        return /*#__PURE__*/React__default["default"].createElement(RJSFForm, { ...themeProps,
+          ...directProps,
+          fields: fields,
+          widgets: widgets,
+          templates: templates,
+          ref: ref
+        });
+      }
+
       return /*#__PURE__*/React__default["default"].createElement(Form, { ...themeProps,
         ...directProps,
         fields: fields,
diff --git a/node_modules/@rjsf/core/dist/core.umd.development.js.map b/node_modules/@rjsf/core/dist/core.umd.development.js.map
index a535800..522384d 100644
--- a/node_modules/@rjsf/core/dist/core.umd.development.js.map
+++ b/node_modules/@rjsf/core/dist/core.umd.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"core.umd.development.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","forwardRef","directProps"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"core.umd.development.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>, RJSFForm: any\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      if(RJSFForm) {\n        return (\n          <RJSFForm\n            {...themeProps}\n            {...directProps}\n            fields={fields}\n            widgets={widgets}\n            templates={templates}\n            ref={ref}\n        />\n        )\n      }\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","RJSFForm","forwardRef","directProps"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@rjsf/core/dist/core.umd.production.min.js b/node_modules/@rjsf/core/dist/core.umd.production.min.js
index b95168e..35b61e8 100644
--- a/node_modules/@rjsf/core/dist/core.umd.production.min.js
+++ b/node_modules/@rjsf/core/dist/core.umd.production.min.js
@@ -1,2 +1,2 @@
-!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("@rjsf/utils"),require("lodash-es/pick"),require("lodash-es/get"),require("lodash-es/isEmpty"),require("lodash-es/isObject"),require("lodash-es/set"),require("nanoid"),require("lodash-es/unset"),require("lodash-es/has"),require("lodash-es/omit")):"function"==typeof define&&define.amd?define(["exports","react","@rjsf/utils","lodash-es/pick","lodash-es/get","lodash-es/isEmpty","lodash-es/isObject","lodash-es/set","nanoid","lodash-es/unset","lodash-es/has","lodash-es/omit"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["@rjsf/core"]={},e.React,e.utils,e._pick,e.get,e._isEmpty,e.isObject,e.set,e.nanoid,e.unset,e.has,e.omit)}(this,(function(e,t,a,r,o,i,n,l,s,d,c,u){"use strict";function m(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var h=m(t),p=m(r),f=m(o),g=m(i),y=m(n),S=m(l),E=m(d),b=m(c),v=m(u);function C(){return s.nanoid()}function F(e){return Array.isArray(e)?e.map((e=>({key:C(),item:e}))):[]}function D(e){return Array.isArray(e)?e.map((e=>e.item)):[]}class x extends t.Component{constructor(e){super(e),this.onOptionChange=e=>{const t=parseInt(e,10),{formData:r,onChange:o,options:i,registry:n}=this.props,{schemaUtils:l}=n,s=l.retrieveSchema(i[t],r);let d;if("object"===a.guessType(r)&&("object"===s.type||s.properties)){d=Object.assign({},r);const e=i.slice();e.splice(t,1);for(const t of e)if(t.properties)for(const e in t.properties)e in d&&E.default(d,e)}o(l.getDefaultFormState(i[t],d),void 0,this.getFieldId()),this.setState({selectedOption:parseInt(e,10)})};const{formData:t,options:r}=this.props;this.state={selectedOption:this.getMatchingOption(0,t,r)}}componentDidUpdate(e,t){const{formData:r,options:o,idSchema:i}=this.props,{selectedOption:n}=this.state;if(!a.deepEquals(r,e.formData)&&i.$id===e.idSchema.$id){const e=this.getMatchingOption(n,r,o);if(!t||e===n)return;this.setState({selectedOption:e})}}getMatchingOption(e,t,a){const{schemaUtils:r}=this.props.registry,o=r.getMatchingOption(t,a);return 0!==o?o:e||0}getFieldId(){const{idSchema:e,schema:t}=this.props;return e.$id+(t.oneOf?"__oneof_select":"__anyof_select")}render(){const{name:e,baseType:t,disabled:r=!1,readonly:o=!1,hideError:i=!1,errorSchema:n={},formData:l,formContext:s,idPrefix:d,idSeparator:c,idSchema:u,onBlur:m,onChange:p,onFocus:f,options:g,registry:y,uiSchema:S}=this.props,{widgets:E,fields:b}=y,{SchemaField:v}=b,{selectedOption:C}=this.state,{widget:F="select",...D}=a.getUiOptions(S),x=a.getWidget({type:"number"},F,E),k=g[C]||null;let T;k&&(T=k.type?k:Object.assign({},k,{type:t}));const N=g.map(((e,t)=>({label:e.title||"Option "+(t+1),value:t})));return h.default.createElement("div",{className:"panel panel-default panel-body"},h.default.createElement("div",{className:"form-group"},h.default.createElement(x,{id:this.getFieldId(),schema:{type:"number",default:0},onChange:this.onOptionChange,onBlur:m,onFocus:f,value:C,options:{enumOptions:N},registry:y,formContext:s,...D,label:""})),null!==k&&h.default.createElement(v,{name:e,schema:T,uiSchema:S,errorSchema:n,idSchema:u,idPrefix:d,idSeparator:c,formData:l,formContext:s,onChange:p,onBlur:m,onFocus:f,registry:y,disabled:r,readonly:o,hideError:i}))}}const k=/\.([0-9]*0)*$/,T=/[0.]0*$/,N={array:"ArrayField",boolean:"BooleanField",integer:"NumberField",number:"NumberField",object:"ObjectField",string:"StringField",null:"NullField"};function A(e){const{schema:t,idSchema:r,uiSchema:o,formData:i,errorSchema:n,idPrefix:l,idSeparator:s,name:d,onChange:c,onKeyChange:u,onDropPropertyClick:m,required:p,registry:f,wasPropertyKeyModified:g=!1}=e,{formContext:S,schemaUtils:E}=f,b=a.getUiOptions(o),C=a.getTemplate("FieldTemplate",f,b),F=a.getTemplate("DescriptionFieldTemplate",f,b),D=a.getTemplate("FieldHelpTemplate",f,b),x=a.getTemplate("FieldErrorTemplate",f,b),k=E.retrieveSchema(t,i),T=r[a.ID_KEY],A=a.mergeObjects(E.toIdSchema(k,T,i,l,s),r),w=h.default.useCallback(((e,t,a)=>c(e,t,a||T)),[T,c]),O=function(e,t,r,o){const i=t.field,{fields:n}=o;if("function"==typeof i)return i;if("string"==typeof i&&i in n)return n[i];const l=a.getSchemaType(e),s=Array.isArray(l)?l[0]:l||"",d=N[s];return d||!e.anyOf&&!e.oneOf?d in n?n[d]:()=>{const i=a.getTemplate("UnsupportedFieldTemplate",o,t);return h.default.createElement(i,{schema:e,idSchema:r,reason:"Unknown field type "+e.type,registry:o})}:()=>null}(k,b,A,f),B=Boolean(e.disabled||b.disabled),I=Boolean(e.readonly||b.readonly||e.schema.readOnly||k.readOnly),U=b.hideError,q=void 0===U?e.hideError:Boolean(U),P=Boolean(e.autofocus||b.autofocus);if(0===Object.keys(k).length)return null;const _=E.getDisplayLabel(k,o),{__errors:R,...V}=n||{},j=v.default(o,["ui:classNames","classNames"]);"ui:options"in j&&(j["ui:options"]=v.default(j["ui:options"],["classNames"]));const M=h.default.createElement(O,{...e,onChange:w,idSchema:A,schema:k,uiSchema:j,disabled:B,readonly:I,hideError:q,autofocus:P,errorSchema:V,formContext:S,rawErrors:R}),K=A[a.ID_KEY];let W;W=g||a.ADDITIONAL_PROPERTY_FLAG in k?d:b.title||e.schema.title||k.title||d;const L=b.description||e.schema.description||k.description||"",$=b.help,Y="hidden"===b.widget,z=["form-group","field","field-"+k.type];!q&&R&&R.length>0&&z.push("field-error has-error has-danger"),null!=o&&o.classNames&&z.push(o.classNames),b.classNames&&z.push(b.classNames);const H=h.default.createElement(D,{help:$,idSchema:A,schema:k,uiSchema:o,hasErrors:!q&&R&&R.length>0,registry:f}),J=q?void 0:h.default.createElement(x,{errors:R,errorSchema:n,idSchema:A,schema:k,uiSchema:o,registry:f}),G={description:h.default.createElement(F,{id:K+"__description",description:L,schema:k,uiSchema:o,registry:f}),rawDescription:L,help:H,rawHelp:"string"==typeof $?$:void 0,errors:J,rawErrors:q?void 0:R,id:K,label:W,hidden:Y,onChange:c,onKeyChange:u,onDropPropertyClick:m,required:p,disabled:B,readonly:I,hideError:q,displayLabel:_,classNames:z.join(" ").trim(),formContext:S,formData:i,schema:k,uiSchema:o,registry:f},Q=f.fields.AnyOfField,X=f.fields.OneOfField;return h.default.createElement(C,{...G},h.default.createElement(h.default.Fragment,null,M,k.anyOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&h.default.createElement(Q,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.anyOf.map((e=>E.retrieveSchema(y.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o}),k.oneOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&h.default.createElement(X,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.oneOf.map((e=>E.retrieveSchema(y.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o})))}const w={AnyOfField:x,ArrayField:class extends t.Component{constructor(e){super(e),this._getNewFormDataRow=()=>{const{schema:e,registry:t}=this.props,{schemaUtils:r}=t;let o=e.items;return a.isFixedItems(e)&&a.allowAdditionalItems(e)&&(o=e.additionalItems),r.getDefaultFormState(o)},this.onAddClick=e=>{e&&e.preventDefault();const{onChange:t}=this.props,{keyedFormData:a}=this.state,r=[...a,{key:C(),item:this._getNewFormDataRow()}];this.setState({keyedFormData:r,updatedKeyedFormData:!0},(()=>t(D(r))))},this.onAddIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a}=this.props,{keyedFormData:r}=this.state,o={key:C(),item:this._getNewFormDataRow()},i=[...r];i.splice(e,0,o),this.setState({keyedFormData:i,updatedKeyedFormData:!0},(()=>a(D(i))))},this.onDropIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a,errorSchema:r}=this.props,{keyedFormData:o}=this.state;let i;if(r){i={};for(const t in r){const a=parseInt(t);a<e?S.default(i,[a],r[t]):a>e&&S.default(i,[a-1],r[t])}}const n=o.filter(((t,a)=>a!==e));this.setState({keyedFormData:n,updatedKeyedFormData:!0},(()=>a(D(n),i)))},this.onReorderClick=(e,t)=>a=>{a&&(a.preventDefault(),a.currentTarget.blur());const{onChange:r,errorSchema:o}=this.props;let i;if(this.props.errorSchema){i={};for(const a in o){const r=parseInt(a);r==e?S.default(i,[t],o[e]):r==t?S.default(i,[e],o[t]):S.default(i,[a],o[r])}}const{keyedFormData:n}=this.state,l=function(){const a=n.slice();return a.splice(e,1),a.splice(t,0,n[e]),a}();this.setState({keyedFormData:l},(()=>r(D(l),i)))},this.onChangeForIndex=e=>(t,a,r)=>{const{formData:o,onChange:i,errorSchema:n}=this.props;i((Array.isArray(o)?o:[]).map(((a,r)=>e===r?void 0===t?null:t:a)),n&&n&&{...n,[e]:a},r)},this.onSelectChange=e=>{const{onChange:t,idSchema:a}=this.props;t(e,void 0,a&&a.$id)};const{formData:t=[]}=e,r=F(t);this.state={keyedFormData:r,updatedKeyedFormData:!1}}static getDerivedStateFromProps(e,t){if(t.updatedKeyedFormData)return{updatedKeyedFormData:!1};const a=Array.isArray(e.formData)?e.formData:[],r=t.keyedFormData||[];return{keyedFormData:a.length===r.length?r.map(((e,t)=>({key:e.key,item:a[t]}))):F(a)}}get itemTitle(){const{schema:e}=this.props;return f.default(e,[a.ITEMS_KEY,"title"],f.default(e,[a.ITEMS_KEY,"description"],"Item"))}isItemRequired(e){return Array.isArray(e.type)?!e.type.includes("null"):"null"!==e.type}canAddItem(e){const{schema:t,uiSchema:r}=this.props;let{addable:o}=a.getUiOptions(r);return!1!==o&&(o=void 0===t.maxItems||e.length<t.maxItems),o}render(){const{schema:e,uiSchema:t,idSchema:r,registry:o}=this.props,{schemaUtils:i}=o;if(!(a.ITEMS_KEY in e)){const i=a.getUiOptions(t),n=a.getTemplate("UnsupportedFieldTemplate",o,i);return h.default.createElement(n,{schema:e,idSchema:r,reason:"Missing items definition",registry:o})}return i.isMultiSelect(e)?this.renderMultiSelect():a.isCustomWidget(t)?this.renderCustomWidget():a.isFixedItems(e)?this.renderFixedArray():i.isFilesArray(e,t)?this.renderFiles():this.renderNormalArray()}renderNormalArray(){const{schema:e,uiSchema:t={},errorSchema:r,idSchema:o,name:i,disabled:n=!1,readonly:l=!1,autofocus:s=!1,required:d=!1,registry:c,onBlur:u,onFocus:m,idPrefix:p,idSeparator:f="_",rawErrors:g}=this.props,{keyedFormData:S}=this.state,E=void 0===e.title?i:e.title,{schemaUtils:b,formContext:v}=c,C=a.getUiOptions(t),F=y.default(e.items)?e.items:{},x=b.retrieveSchema(F),k=D(this.state.keyedFormData),T={canAdd:this.canAddItem(k),items:S.map(((e,a)=>{const{key:n,item:l}=e,d=l,c=b.retrieveSchema(F,d),h=r?r[a]:void 0,y=b.toIdSchema(c,o.$id+f+a,d,p,f);return this.renderArrayFieldItem({key:n,index:a,name:i&&i+"-"+a,canMoveUp:a>0,canMoveDown:a<k.length-1,itemSchema:c,itemIdSchema:y,itemErrorSchema:h,itemData:d,itemUiSchema:t.items,autofocus:s&&0===a,onBlur:u,onFocus:m,rawErrors:g})})),className:"field field-array field-array-of-"+x.type,disabled:n,idSchema:o,uiSchema:t,onAddClick:this.onAddClick,readonly:l,required:d,schema:e,title:E,formContext:v,formData:k,rawErrors:g,registry:c},N=a.getTemplate("ArrayFieldTemplate",c,C);return h.default.createElement(N,{...T})}renderCustomWidget(){const{schema:e,idSchema:t,uiSchema:r,disabled:o=!1,readonly:i=!1,autofocus:n=!1,required:l=!1,hideError:s,placeholder:d,onBlur:c,onFocus:u,formData:m=[],registry:p,rawErrors:f,name:g}=this.props,{widgets:y,formContext:S}=p,E=e.title||g,{widget:b,...v}=a.getUiOptions(r),C=a.getWidget(e,b,y);return h.default.createElement(C,{id:t&&t.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:v,schema:e,uiSchema:r,registry:p,value:m,disabled:o,readonly:i,hideError:s,required:l,label:E,placeholder:d,formContext:S,autofocus:n,rawErrors:f})}renderMultiSelect(){const{schema:e,idSchema:t,uiSchema:r,formData:o=[],disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,placeholder:d,onBlur:c,onFocus:u,registry:m,rawErrors:p,name:f}=this.props,{widgets:g,schemaUtils:y,formContext:S}=m,E=y.retrieveSchema(e.items,o),b=e.title||f,v=a.optionsList(E),{widget:C="select",...F}=a.getUiOptions(r),D=a.getWidget(e,C,g);return h.default.createElement(D,{id:t&&t.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:{...F,enumOptions:v},schema:e,uiSchema:r,registry:m,value:o,disabled:i,readonly:n,required:s,label:b,placeholder:d,formContext:S,autofocus:l,rawErrors:p})}renderFiles(){const{schema:e,uiSchema:t,idSchema:r,name:o,disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,onBlur:d,onFocus:c,registry:u,formData:m=[],rawErrors:p}=this.props,f=e.title||o,{widgets:g,formContext:y}=u,{widget:S="files",...E}=a.getUiOptions(t),b=a.getWidget(e,S,g);return h.default.createElement(b,{options:E,id:r&&r.$id,multiple:!0,onChange:this.onSelectChange,onBlur:d,onFocus:c,schema:e,uiSchema:t,title:f,value:m,disabled:i,readonly:n,required:s,registry:u,formContext:y,autofocus:l,rawErrors:p,label:""})}renderFixedArray(){const{schema:e,uiSchema:t={},formData:r=[],errorSchema:o,idPrefix:i,idSeparator:n="_",idSchema:l,name:s,disabled:d=!1,readonly:c=!1,autofocus:u=!1,required:m=!1,registry:p,onBlur:f,onFocus:g,rawErrors:S}=this.props,{keyedFormData:E}=this.state;let{formData:b=[]}=this.props;const v=e.title||s,C=a.getUiOptions(t),{schemaUtils:F,formContext:D}=p,x=(y.default(e.items)?e.items:[]).map(((e,t)=>F.retrieveSchema(e,r[t]))),k=y.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,r):null;(!b||b.length<x.length)&&(b=b||[],b=b.concat(new Array(x.length-b.length)));const T={canAdd:this.canAddItem(b)&&!!k,className:"field field-array field-array-fixed-items",disabled:d,idSchema:l,formData:r,items:E.map(((a,r)=>{const{key:d,item:c}=a,m=c,h=r>=x.length,p=h&&y.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,m):x[r],E=F.toIdSchema(p,l.$id+n+r,m,i,n),v=h?t.additionalItems||{}:Array.isArray(t.items)?t.items[r]:t.items||{};return this.renderArrayFieldItem({key:d,index:r,name:s&&s+"-"+r,canRemove:h,canMoveUp:r>=x.length+1,canMoveDown:h&&r<b.length-1,itemSchema:p,itemData:m,itemUiSchema:v,itemIdSchema:E,itemErrorSchema:o?o[r]:void 0,autofocus:u&&0===r,onBlur:f,onFocus:g,rawErrors:S})})),onAddClick:this.onAddClick,readonly:c,required:m,registry:p,schema:e,uiSchema:t,title:v,formContext:D,rawErrors:S},N=a.getTemplate("ArrayFieldTemplate",p,C);return h.default.createElement(N,{...T})}renderArrayFieldItem(e){const{key:t,index:r,name:o,canRemove:i=!0,canMoveUp:n=!0,canMoveDown:l=!0,itemSchema:s,itemData:d,itemUiSchema:c,itemIdSchema:u,itemErrorSchema:m,autofocus:p,onBlur:f,onFocus:g,rawErrors:y}=e,{disabled:S,hideError:E,idPrefix:b,idSeparator:v,readonly:C,uiSchema:F,registry:D,formContext:x}=this.props,{fields:{ArraySchemaField:k,SchemaField:T}}=D,N=k||T,{orderable:A=!0,removable:w=!0}=a.getUiOptions(F),O={moveUp:A&&n,moveDown:A&&l,remove:w&&i,toolbar:!1};return O.toolbar=Object.keys(O).some((e=>O[e])),{children:h.default.createElement(N,{name:o,index:r,schema:s,uiSchema:c,formData:d,formContext:x,errorSchema:m,idPrefix:b,idSeparator:v,idSchema:u,required:this.isItemRequired(s),onChange:this.onChangeForIndex(r),onBlur:f,onFocus:g,registry:D,disabled:S,readonly:C,hideError:E,autofocus:p,rawErrors:y}),className:"array-item",disabled:S,hasToolbar:O.toolbar,hasMoveUp:O.moveUp,hasMoveDown:O.moveDown,hasRemove:O.remove,index:r,key:t,onAddIndexClick:this.onAddIndexClick,onDropIndexClick:this.onDropIndexClick,onReorderClick:this.onReorderClick,readonly:C,registry:D,uiSchema:c}}},BooleanField:function(e){const{schema:t,name:r,uiSchema:o,idSchema:i,formData:n,registry:l,required:s,disabled:d,readonly:c,autofocus:u,onChange:m,onFocus:p,onBlur:f,rawErrors:g}=e,{title:S}=t,{widgets:E,formContext:b}=l,{widget:v="checkbox",...C}=a.getUiOptions(o),F=a.getWidget(t,v,E);let D;if(Array.isArray(t.oneOf))D=a.optionsList({oneOf:t.oneOf.map((e=>{if(y.default(e))return{...e,title:e.title||(!0===e.const?"Yes":"No")}})).filter((e=>e))});else{var x;const e=t,r=null!=(x=t.enum)?x:[!0,!1];D=!e.enumNames&&2===r.length&&r.every((e=>"boolean"==typeof e))?[{value:r[0],label:r[0]?"Yes":"No"},{value:r[1],label:r[1]?"Yes":"No"}]:a.optionsList({enum:r,enumNames:e.enumNames})}return h.default.createElement(F,{options:{...C,enumOptions:D},schema:t,uiSchema:o,id:i&&i.$id,onChange:m,onFocus:p,onBlur:f,label:void 0===S?r:S,value:n,required:s,disabled:d,readonly:c,registry:l,formContext:b,autofocus:u,rawErrors:g})},NumberField:function(e){const{registry:r,onChange:o,formData:i,value:n}=e,[l,s]=t.useState(n),{StringField:d}=r.fields;let c=i;const u=t.useCallback((e=>{s(e),"."===(""+e).charAt(0)&&(e="0"+e);const t="string"==typeof e&&e.match(k)?a.asNumber(e.replace(T,"")):a.asNumber(e);o(t)}),[o]);if("string"==typeof l&&"number"==typeof c){const e=new RegExp((""+c).replace(".","\\.")+"\\.?0*$");l.match(e)&&(c=l)}return h.default.createElement(d,{...e,formData:c,onChange:u})},ObjectField:class extends t.Component{constructor(){var e;super(...arguments),e=this,this.state={wasPropertyKeyModified:!1,additionalProperties:{}},this.onPropertyChange=function(t,a){return void 0===a&&(a=!1),(r,o,i)=>{const{formData:n,onChange:l,errorSchema:s}=e.props;void 0===r&&a&&(r=""),l({...n,[t]:r},s&&s&&{...s,[t]:o},i)}},this.onDropPropertyClick=e=>t=>{t.preventDefault();const{onChange:a,formData:r}=this.props,o={...r};E.default(o,e),a(o)},this.getAvailableKey=(e,t)=>{const{uiSchema:r}=this.props,{duplicateKeySuffixSeparator:o="-"}=a.getUiOptions(r);let i=0,n=e;for(;n in t;)n=""+e+o+ ++i;return n},this.onKeyChange=e=>(t,a)=>{if(e===t)return;const{formData:r,onChange:o,errorSchema:i}=this.props;t=this.getAvailableKey(t,r);const n={...r},l={[e]:t},s=Object.keys(n).map((e=>({[l[e]||e]:n[e]}))),d=Object.assign({},...s);this.setState({wasPropertyKeyModified:!0}),o(d,i&&i&&{...i,[t]:a})},this.handleAddClick=e=>()=>{if(!e.additionalProperties)return;const{formData:t,onChange:r,registry:o}=this.props,i={...t};let n;if(y.default(e.additionalProperties)&&(n=e.additionalProperties.type,a.REF_KEY in e.additionalProperties)){const{schemaUtils:r}=o;n=r.retrieveSchema({$ref:e.additionalProperties[a.REF_KEY]},t).type}const l=this.getAvailableKey("newKey",i);S.default(i,l,this.getDefaultValue(n)),r(i)}}isRequired(e){const{schema:t}=this.props;return Array.isArray(t.required)&&-1!==t.required.indexOf(e)}getDefaultValue(e){switch(e){case"string":default:return"New Value";case"array":return[];case"boolean":return!1;case"null":return null;case"number":return 0;case"object":return{}}}render(){const{schema:e,uiSchema:t={},formData:r,errorSchema:o,idSchema:i,name:n,required:l=!1,disabled:s=!1,readonly:d=!1,hideError:c,idPrefix:u,idSeparator:m,onBlur:p,onFocus:g,registry:y}=this.props,{fields:S,formContext:E,schemaUtils:v}=y,{SchemaField:C}=S,F=v.retrieveSchema(e,r),D=a.getUiOptions(t),{properties:x={}}=F,k=void 0===F.title?n:F.title,T=D.description||F.description;let N;try{const e=Object.keys(x);N=a.orderProperties(e,D.order)}catch(e){return h.default.createElement("div",null,h.default.createElement("p",{className:"config-error",style:{color:"red"}},"Invalid ",n||"root"," object field configuration:",h.default.createElement("em",null,e.message),"."),h.default.createElement("pre",null,JSON.stringify(F)))}const A=a.getTemplate("ObjectFieldTemplate",y,D),w={title:D.title||k,description:T,properties:N.map((e=>{const n=b.default(F,[a.PROPERTIES_KEY,e,a.ADDITIONAL_PROPERTY_FLAG]),S=n?t.additionalProperties:t[e],v="hidden"===a.getUiOptions(S).widget,D=f.default(i,[e],{});return{content:h.default.createElement(C,{key:e,name:e,required:this.isRequired(e),schema:f.default(F,[a.PROPERTIES_KEY,e],{}),uiSchema:S,errorSchema:f.default(o,e),idSchema:D,idPrefix:u,idSeparator:m,formData:f.default(r,e),formContext:E,wasPropertyKeyModified:this.state.wasPropertyKeyModified,onKeyChange:this.onKeyChange(e),onChange:this.onPropertyChange(e,n),onBlur:p,onFocus:g,registry:y,disabled:s,readonly:d,hideError:c,onDropPropertyClick:this.onDropPropertyClick}),name:e,readonly:d,disabled:s,required:l,hidden:v}})),readonly:d,disabled:s,required:l,idSchema:i,uiSchema:t,schema:F,formData:r,formContext:E,registry:y};return h.default.createElement(A,{...w,onAddClick:this.handleAddClick})}},OneOfField:x,SchemaField:class extends h.default.Component{shouldComponentUpdate(e){return!a.deepEquals(this.props,e)}render(){return h.default.createElement(A,{...this.props})}},StringField:function(e){const{schema:t,name:r,uiSchema:o,idSchema:i,formData:n,required:l,disabled:s=!1,readonly:d=!1,autofocus:c=!1,onChange:u,onBlur:m,onFocus:p,registry:f,rawErrors:g}=e,{title:y,format:S}=t,{widgets:E,formContext:b,schemaUtils:v}=f,C=v.isSelect(t)?a.optionsList(t):void 0;let F=C?"select":"text";S&&a.hasWidget(t,S,E)&&(F=S);const{widget:D=F,placeholder:x="",...k}=a.getUiOptions(o),T=a.getWidget(t,D,E);return h.default.createElement(T,{options:{...k,enumOptions:C},schema:t,uiSchema:o,id:i&&i.$id,label:void 0===y?r:y,value:n,onChange:u,onBlur:m,onFocus:p,required:l,disabled:s,readonly:d,formContext:b,autofocus:c,registry:f,placeholder:x,rawErrors:g})},NullField:function(e){const{formData:a,onChange:r}=e;return t.useEffect((()=>{void 0===a&&r(null)}),[a,r]),null}};function O(e){const{iconType:t="default",icon:a,className:r,uiSchema:o,...i}=e;return h.default.createElement("button",{type:"button",className:"btn btn-"+t+" "+r,...i},h.default.createElement("i",{className:"glyphicon glyphicon-"+a}))}function B(e){const{label:t,required:a,id:r}=e;return t?h.default.createElement("label",{className:"control-label",htmlFor:r},t,a&&h.default.createElement("span",{className:"required"},"*")):null}const I={ArrayFieldDescriptionTemplate:function(e){const{idSchema:t,description:r,registry:o,schema:i,uiSchema:n}=e,l=a.getUiOptions(n),{label:s=!0}=l;if(!r||!s)return null;const d=a.getTemplate("DescriptionFieldTemplate",o,l);return h.default.createElement(d,{id:t.$id+"__description",description:r,schema:i,uiSchema:n,registry:o})},ArrayFieldItemTemplate:function(e){const{children:t,className:a,disabled:r,hasToolbar:o,hasMoveDown:i,hasMoveUp:n,hasRemove:l,index:s,onDropIndexClick:d,onReorderClick:c,readonly:u,registry:m,uiSchema:p}=e,{MoveDownButton:f,MoveUpButton:g,RemoveButton:y}=m.templates.ButtonTemplates,S={flex:1,paddingLeft:6,paddingRight:6,fontWeight:"bold"};return h.default.createElement("div",{className:a},h.default.createElement("div",{className:o?"col-xs-9":"col-xs-12"},t),o&&h.default.createElement("div",{className:"col-xs-3 array-item-toolbox"},h.default.createElement("div",{className:"btn-group",style:{display:"flex",justifyContent:"space-around"}},(n||i)&&h.default.createElement(g,{style:S,disabled:r||u||!n,onClick:c(s,s-1),uiSchema:p}),(n||i)&&h.default.createElement(f,{style:S,disabled:r||u||!i,onClick:c(s,s+1),uiSchema:p}),l&&h.default.createElement(y,{style:S,disabled:r||u,onClick:d(s),uiSchema:p}))))},ArrayFieldTemplate:function(e){const{canAdd:t,className:r,disabled:o,idSchema:i,uiSchema:n,items:l,onAddClick:s,readonly:d,registry:c,required:u,schema:m,title:p}=e,f=a.getUiOptions(n),g=a.getTemplate("ArrayFieldDescriptionTemplate",c,f),y=a.getTemplate("ArrayFieldItemTemplate",c,f),S=a.getTemplate("ArrayFieldTitleTemplate",c,f),{ButtonTemplates:{AddButton:E}}=c.templates;return h.default.createElement("fieldset",{className:r,id:i.$id},h.default.createElement(S,{idSchema:i,title:f.title||p,required:u,schema:m,uiSchema:n,registry:c}),h.default.createElement(g,{idSchema:i,description:f.description||m.description,schema:m,uiSchema:n,registry:c}),h.default.createElement("div",{className:"row array-item-list"},l&&l.map((e=>{let{key:t,...a}=e;return h.default.createElement(y,{key:t,...a})}))),t&&h.default.createElement(E,{className:"array-item-add",onClick:s,disabled:o||d,uiSchema:n}))},ArrayFieldTitleTemplate:function(e){const{idSchema:t,title:r,schema:o,uiSchema:i,required:n,registry:l}=e,s=a.getUiOptions(i),{label:d=!0}=s;if(!r||!d)return null;const c=a.getTemplate("TitleFieldTemplate",l,s);return h.default.createElement(c,{id:t.$id+"__title",title:r,required:n,schema:o,uiSchema:i,registry:l})},ButtonTemplates:{SubmitButton:function(e){let{uiSchema:t}=e;const{submitText:r,norender:o,props:i={}}=a.getSubmitButtonOptions(t);return o?null:h.default.createElement("div",null,h.default.createElement("button",{type:"submit",...i,className:"btn btn-info "+i.className},r))},AddButton:function(e){let{className:t,onClick:a,disabled:r}=e;return h.default.createElement("div",{className:"row"},h.default.createElement("p",{className:"col-xs-3 col-xs-offset-9 text-right "+t},h.default.createElement(O,{iconType:"info",icon:"plus",className:"btn-add col-xs-12",title:"Add",onClick:a,disabled:r})))},MoveDownButton:function(e){return h.default.createElement(O,{title:"Move down",className:"array-item-move-down",...e,icon:"arrow-down"})},MoveUpButton:function(e){return h.default.createElement(O,{title:"Move up",className:"array-item-move-up",...e,icon:"arrow-up"})},RemoveButton:function(e){return h.default.createElement(O,{title:"Remove",className:"array-item-remove",...e,iconType:"danger",icon:"remove"})}},BaseInputTemplate:function(e){const{id:r,value:o,readonly:i,disabled:n,autofocus:l,onBlur:s,onFocus:d,onChange:c,options:u,schema:m,uiSchema:p,formContext:f,registry:g,rawErrors:y,type:S,...E}=e;if(!r)throw console.log("No id for",e),new Error("no id for props "+JSON.stringify(e));const b={...E,...a.getInputProps(m,S,u)};let v;v="number"===b.type||"integer"===b.type?o||0===o?o:"":null==o?"":o;const C=t.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?u.emptyValue:t)}),[c,u]),F=t.useCallback((e=>{let{target:{value:t}}=e;return s(r,t)}),[s,r]),D=t.useCallback((e=>{let{target:{value:t}}=e;return d(r,t)}),[d,r]);return h.default.createElement(h.default.Fragment,null,h.default.createElement("input",{id:r,name:r,className:"form-control",readOnly:i,disabled:n,autoFocus:l,value:v,...b,list:m.examples?"examples_"+r:void 0,onChange:C,onBlur:F,onFocus:D}),Array.isArray(m.examples)&&h.default.createElement("datalist",{key:"datalist_"+r,id:"examples_"+r},[...new Set(m.examples.concat(m.default?[m.default]:[]))].map((e=>h.default.createElement("option",{key:e,value:e})))))},DescriptionFieldTemplate:function(e){const{id:t,description:a}=e;return a?h.default.createElement("string"==typeof a?"p":"div",{id:t,className:"field-description"},a):null},ErrorListTemplate:function(e){let{errors:t}=e;return h.default.createElement("div",{className:"panel panel-danger errors"},h.default.createElement("div",{className:"panel-heading"},h.default.createElement("h3",{className:"panel-title"},"Errors")),h.default.createElement("ul",{className:"list-group"},t.map(((e,t)=>h.default.createElement("li",{key:t,className:"list-group-item text-danger"},e.stack)))))},FieldTemplate:function(e){const{id:t,label:r,children:o,errors:i,help:n,description:l,hidden:s,required:d,displayLabel:c,registry:u,uiSchema:m}=e,p=a.getUiOptions(m),f=a.getTemplate("WrapIfAdditionalTemplate",u,p);return s?h.default.createElement("div",{className:"hidden"},o):h.default.createElement(f,{...e},c&&h.default.createElement(B,{label:r,required:d,id:t}),c&&l?l:null,o,i,n)},FieldErrorTemplate:function(e){const{errors:t=[],idSchema:a}=e;return 0===t.length?null:h.default.createElement("div",null,h.default.createElement("ul",{id:a.$id+"__error",className:"error-detail bs-callout bs-callout-info"},t.filter((e=>!!e)).map(((e,t)=>h.default.createElement("li",{className:"text-danger",key:t},e)))))},FieldHelpTemplate:function(e){const{idSchema:t,help:a}=e;return a?h.default.createElement("string"==typeof a?"p":"div",{id:t.$id+"__help",className:"help-block"},a):null},ObjectFieldTemplate:function(e){const{description:t,disabled:r,formData:o,idSchema:i,onAddClick:n,properties:l,readonly:s,registry:d,required:c,schema:u,title:m,uiSchema:p}=e,f=a.getUiOptions(p),g=a.getTemplate("TitleFieldTemplate",d,f),y=a.getTemplate("DescriptionFieldTemplate",d,f),{ButtonTemplates:{AddButton:S}}=d.templates;return h.default.createElement("fieldset",{id:i.$id},(f.title||m)&&h.default.createElement(g,{id:i.$id+"__title",title:f.title||m,required:c,schema:u,uiSchema:p,registry:d}),(f.description||t)&&h.default.createElement(y,{id:i.$id+"__description",description:f.description||t,schema:u,uiSchema:p,registry:d}),l.map((e=>e.content)),a.canExpand(u,p,o)&&h.default.createElement(S,{className:"object-property-expand",onClick:n(u),disabled:r||s,uiSchema:p}))},TitleFieldTemplate:function(e){const{id:t,title:a,required:r}=e;return h.default.createElement("legend",{id:t},a,r&&h.default.createElement("span",{className:"required"},"*"))},UnsupportedFieldTemplate:function(e){const{schema:t,idSchema:a,reason:r}=e;return h.default.createElement("div",{className:"unsupported-field"},h.default.createElement("p",null,"Unsupported field schema",a&&a.$id&&h.default.createElement("span",null," for"," field ",h.default.createElement("code",null,a.$id)),r&&h.default.createElement("em",null,": ",r),"."),t&&h.default.createElement("pre",null,JSON.stringify(t,null,2)))},WrapIfAdditionalTemplate:function(e){const{id:t,classNames:r,disabled:o,label:i,onKeyChange:n,onDropPropertyClick:l,readonly:s,required:d,schema:c,children:u,uiSchema:m,registry:p}=e,{RemoveButton:f}=p.templates.ButtonTemplates;return h.default.createElement("div",{className:r},a.ADDITIONAL_PROPERTY_FLAG in c?h.default.createElement("div",{className:"row"},h.default.createElement("div",{className:"col-xs-5 form-additional"},h.default.createElement("div",{className:"form-group"},h.default.createElement(B,{label:i+" Key",required:d,id:t+"-key"}),h.default.createElement("input",{className:"form-control",type:"text",id:t+"-key",onBlur:e=>n(e.target.value),defaultValue:i}))),h.default.createElement("div",{className:"form-additional form-group col-xs-5"},u),h.default.createElement("div",{className:"col-xs-2"},h.default.createElement(f,{className:"array-item-remove btn-block",style:{border:"0"},disabled:o||s,onClick:l(i),uiSchema:m}))):u)}};function U(e,t){const r=[];for(let o=e;o<=t;o++)r.push({value:o,label:a.pad(o,2)});return r}function q(e){let{type:t,range:a,value:r,select:o,rootId:i,disabled:n,readonly:l,autofocus:s,registry:d,onBlur:c,onFocus:u}=e;const m=i+"_"+t,{SelectWidget:p}=d.widgets;return h.default.createElement(p,{schema:{type:"integer"},id:m,className:"form-control",options:{enumOptions:U(a[0],a[1])},placeholder:t,value:r,disabled:n,readonly:l,autofocus:s,onChange:e=>o(t,e),onBlur:c,onFocus:u,registry:d,label:""})}function P(e,t){return null===e?null:e.replace(";base64",";name="+encodeURIComponent(t)+";base64")}function _(e){const{name:t,size:a,type:r}=e;return new Promise(((o,i)=>{const n=new window.FileReader;n.onerror=i,n.onload=e=>{var i;"string"==typeof(null===(i=e.target)||void 0===i?void 0:i.result)?o({dataURL:P(e.target.result,t),name:t,size:a,type:r}):o({dataURL:null,name:t,size:a,type:r})},n.readAsDataURL(e)}))}function R(e){let{filesInfo:t}=e;return 0===t.length?null:h.default.createElement("ul",{className:"file-info"},t.map(((e,t)=>{const{name:a,size:r,type:o}=e;return h.default.createElement("li",{key:t},h.default.createElement("strong",null,a)," (",o,", ",r," bytes)")})))}function V(e){return e.filter((e=>void 0!==e)).map((e=>{const{blob:t,name:r}=a.dataURItoBlob(e);return{name:r,size:t.size,type:t.type}}))}function j(e,t){return t?Array.from(e.target.options).slice().filter((e=>e.selected)).map((e=>e.value)):e.target.value}function M(e){let{id:a,options:r={},placeholder:o,value:i,required:n,disabled:l,readonly:s,autofocus:d=!1,onChange:c,onBlur:u,onFocus:m}=e;const p=t.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?r.emptyValue:t)}),[c,r.emptyValue]),f=t.useCallback((e=>{let{target:{value:t}}=e;return u(a,t)}),[u,a]),g=t.useCallback((e=>{let{target:{value:t}}=e;return m(a,t)}),[a,m]);return h.default.createElement("textarea",{id:a,name:a,className:"form-control",value:i||"",placeholder:o,required:n,disabled:l,readOnly:s,autoFocus:d,rows:r.rows,onBlur:f,onFocus:g,onChange:p})}M.defaultProps={autofocus:!1,options:{}};const K={PasswordWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"password",...e})},RadioWidget:function(e){let{options:a,value:r,required:o,disabled:i,readonly:n,autofocus:l=!1,onBlur:s,onFocus:d,onChange:c,id:u}=e;const m=Math.random().toString(),{enumOptions:p,enumDisabled:f,inline:g}=a,y=t.useCallback((e=>s(u,e.target.value)),[s,u]),S=t.useCallback((e=>d(u,e.target.value)),[d,u]);return h.default.createElement("div",{className:"field-radio-group",id:u},Array.isArray(p)&&p.map(((e,t)=>{const a=e.value===r,s=Array.isArray(f)&&-1!=f.indexOf(e.value),d=i||s||n?"disabled":"",p=h.default.createElement("span",null,h.default.createElement("input",{type:"radio",id:u+"-"+e.value,checked:a,name:m,required:o,value:e.value,disabled:i||s||n,autoFocus:l&&0===t,onChange:()=>c(e.value),onBlur:y,onFocus:S}),h.default.createElement("span",null,e.label));return g?h.default.createElement("label",{key:e.value,className:"radio-inline "+d},p):h.default.createElement("div",{key:e.value,className:"radio "+d},h.default.createElement("label",null,p))})))},UpDownWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"number",...e})},RangeWidget:function(e){const{value:t,registry:{templates:{BaseInputTemplate:a}}}=e;return h.default.createElement("div",{className:"field-range-wrapper"},h.default.createElement(a,{type:"range",...e}),h.default.createElement("span",{className:"range-view"},t))},SelectWidget:function(e){let{schema:r,id:o,options:i,value:n,required:l,disabled:s,readonly:d,multiple:c=!1,autofocus:u=!1,onChange:m,onBlur:p,onFocus:f,placeholder:g}=e;const{enumOptions:y,enumDisabled:S}=i,E=c?[]:"",b=t.useCallback((e=>{const t=j(e,c);return f(o,a.processSelectValue(r,t,i))}),[f,o,r,c,i]),v=t.useCallback((e=>{const t=j(e,c);return p(o,a.processSelectValue(r,t,i))}),[p,o,r,c,i]),C=t.useCallback((e=>{const t=j(e,c);return m(a.processSelectValue(r,t,i))}),[m,r,c,i]);return h.default.createElement("select",{id:o,name:o,multiple:c,className:"form-control",value:void 0===n?E:n,required:l,disabled:s||d,autoFocus:u,onBlur:v,onFocus:b,onChange:C},!c&&void 0===r.default&&h.default.createElement("option",{value:""},g),Array.isArray(y)&&y.map(((e,t)=>{let{value:a,label:r}=e;const o=S&&-1!=S.indexOf(a);return h.default.createElement("option",{key:t,value:a,disabled:o},r)})))},TextWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{...e})},DateWidget:function(e){const{onChange:r,options:o,registry:i}=e,n=a.getTemplate("BaseInputTemplate",i,o),l=t.useCallback((e=>r(e||void 0)),[r]);return h.default.createElement(n,{type:"date",...e,onChange:l})},DateTimeWidget:function(e){const{onChange:t,value:r,options:o,registry:i}=e,n=a.getTemplate("BaseInputTemplate",i,o);return h.default.createElement(n,{type:"datetime-local",...e,value:a.utcToLocal(r),onChange:e=>t(a.localToUTC(e))})},AltDateWidget:function(e){let{time:r=!1,disabled:o=!1,readonly:i=!1,autofocus:n=!1,options:l,id:s,registry:d,onBlur:c,onFocus:u,onChange:m,value:p}=e;const[f,g]=t.useReducer(((e,t)=>({...e,...t})),a.parseDateString(p,r));t.useEffect((()=>{p&&p!==a.toDateString(f,r)&&g(a.parseDateString(p,r))}),[p,f,r]),t.useEffect((()=>{(function(e){return Object.values(e).every((e=>-1!==e))})(f)&&m(a.toDateString(f,r))}),[f,r,m]);const y=t.useCallback(((e,t)=>{g({[e]:t})}),[]),S=t.useCallback((e=>{if(e.preventDefault(),o||i)return;const t=a.parseDateString((new Date).toJSON(),r);g(t)}),[o,i,r]),E=t.useCallback((e=>{e.preventDefault(),o||i||(g(a.parseDateString("",r)),m(void 0))}),[o,i,r,m]);return h.default.createElement("ul",{className:"list-inline"},function(e,t,a){void 0===a&&(a=[1900,(new Date).getFullYear()+2]);const{year:r,month:o,day:i,hour:n,minute:l,second:s}=e,d=[{type:"year",range:a,value:r},{type:"month",range:[1,12],value:o},{type:"day",range:[1,31],value:i}];return t&&d.push({type:"hour",range:[0,23],value:n},{type:"minute",range:[0,59],value:l},{type:"second",range:[0,59],value:s}),d}(f,r,l.yearsRange).map(((e,t)=>h.default.createElement("li",{key:t},h.default.createElement(q,{rootId:s,select:y,...e,disabled:o,readonly:i,registry:d,onBlur:c,onFocus:u,autofocus:n&&0===t})))),("undefined"===l.hideNowButton||!l.hideNowButton)&&h.default.createElement("li",null,h.default.createElement("a",{href:"#",className:"btn btn-info btn-now",onClick:S},"Now")),("undefined"===l.hideClearButton||!l.hideClearButton)&&h.default.createElement("li",null,h.default.createElement("a",{href:"#",className:"btn btn-warning btn-clear",onClick:E},"Clear")))},AltDateTimeWidget:function(e){let{time:t=!0,...a}=e;const{AltDateWidget:r}=a.registry.widgets;return h.default.createElement(r,{time:t,...a})},EmailWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"email",...e})},URLWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"url",...e})},TextareaWidget:M,HiddenWidget:function(e){let{id:t,value:a}=e;return h.default.createElement("input",{type:"hidden",id:t,name:t,value:void 0===a?"":a})},ColorWidget:function(e){const{disabled:t,readonly:r,options:o,registry:i}=e,n=a.getTemplate("BaseInputTemplate",i,o);return h.default.createElement(n,{type:"color",...e,disabled:t||r})},FileWidget:function(e){let{multiple:a,id:r,readonly:o,disabled:i,onChange:n,value:l,autofocus:s=!1,options:d}=e;const c=t.useMemo((()=>Array.isArray(l)?V(l):V([l])),[l]),[u,m]=t.useState(c),p=t.useCallback((e=>{var t;e.target.files&&(t=e.target.files,Promise.all(Array.from(t).map(_))).then((e=>{m(e);const t=e.map((e=>e.dataURL));n(a?t:t[0])}))}),[a,n]);return h.default.createElement("div",null,h.default.createElement("p",null,h.default.createElement("input",{id:r,name:r,type:"file",disabled:o||i,onChange:p,defaultValue:"",autoFocus:s,multiple:a,accept:d.accept?String(d.accept):void 0})),h.default.createElement(R,{filesInfo:u}))},CheckboxWidget:function(e){let{schema:r,uiSchema:o,options:i,id:n,value:l,disabled:s,readonly:d,label:c,autofocus:u=!1,onBlur:m,onFocus:p,onChange:f,registry:g}=e;const y=a.getTemplate("DescriptionFieldTemplate",g,i),S=a.schemaRequiresTrueValue(r),E=t.useCallback((e=>f(e.target.checked)),[f]),b=t.useCallback((e=>m(n,e.target.checked)),[m,n]),v=t.useCallback((e=>p(n,e.target.checked)),[p,n]);return h.default.createElement("div",{className:"checkbox "+(s||d?"disabled":"")},r.description&&h.default.createElement(y,{id:n+"__description",description:r.description,schema:r,uiSchema:o,registry:g}),h.default.createElement("label",null,h.default.createElement("input",{type:"checkbox",id:n,name:n,checked:void 0!==l&&l,required:S,disabled:s||d,autoFocus:u,onChange:E,onBlur:b,onFocus:v}),h.default.createElement("span",null,c)))},CheckboxesWidget:function(e){let{id:t,disabled:a,options:{inline:r=!1,enumOptions:o,enumDisabled:i},value:n,autofocus:l=!1,readonly:s,onChange:d}=e;return h.default.createElement("div",{className:"checkboxes",id:t},Array.isArray(o)&&o.map(((e,c)=>{const u=-1!==n.indexOf(e.value),m=Array.isArray(i)&&-1!=i.indexOf(e.value),p=a||m||s?"disabled":"",f=h.default.createElement("span",null,h.default.createElement("input",{type:"checkbox",id:t+"-"+e.value,name:t,checked:u,disabled:a||m||s,autoFocus:l&&0===c,onChange:t=>{const a=o.map((e=>{let{value:t}=e;return t}));d(t.target.checked?function(e,t,a){const r=a.indexOf(e);return t.slice(0,r).concat(e,t.slice(r)).sort(((e,t)=>Number(a.indexOf(e)>a.indexOf(t))))}(e.value,n,a):function(e,t){return t.filter((t=>t!==e))}(e.value,n))}}),h.default.createElement("span",null,e.label));return r?h.default.createElement("label",{key:e.value,className:"checkbox-inline "+p},f):h.default.createElement("div",{key:e.value,className:"checkbox "+p},h.default.createElement("label",null,f))})))}};function W(){return{fields:w,templates:I,widgets:K,rootSchema:{},formContext:{}}}class L extends t.Component{constructor(e){if(super(e),this.formElement=void 0,this.getUsedFormData=(e,t)=>{if(0===t.length&&"object"!=typeof e)return e;const a=p.default(e,t);return Array.isArray(e)?Object.keys(a).map((e=>a[e])):a},this.getFieldNames=(e,t)=>{const r=function(e,o,i){return void 0===o&&(o=[]),void 0===i&&(i=[""]),Object.keys(e).forEach((n=>{if("object"==typeof e[n]){const t=i.map((e=>e+"."+n));e[n][a.RJSF_ADDITONAL_PROPERTIES_FLAG]&&""!==e[n][a.NAME_KEY]?o.push(e[n][a.NAME_KEY]):r(e[n],o,t)}else n===a.NAME_KEY&&""!==e[n]&&i.forEach((e=>{e=e.replace(/^\./,"");const a=f.default(t,e);("object"!=typeof a||g.default(a))&&o.push(e)}))})),o};return r(e)},this.onChange=(e,t,r)=>{const{extraErrors:o,omitExtraData:i,liveOmit:n,noValidate:l,liveValidate:s,onChange:d}=this.props,{schemaUtils:c,schema:u}=this.state;(a.isObject(e)||Array.isArray(e))&&(e=this.getStateFromProps(this.props,e).formData);const m=!l&&s;let h={formData:e,schema:u},p=e;if(!0===i&&!0===n){const t=c.retrieveSchema(u,e),a=c.toPathSchema(t,"",e),r=this.getFieldNames(a,e);p=this.getUsedFormData(e,r),h={formData:p}}if(m){const e=this.validate(p);let t=e.errors,a=e.errorSchema;const r=t,i=a;if(o){const r=c.mergeValidationData(e,o);a=r.errorSchema,t=r.errors}h={formData:p,errors:t,errorSchema:a,schemaValidationErrors:r,schemaValidationErrorSchema:i}}else if(!l&&t){const e=o?a.mergeObjects(t,o,!0):t;h={formData:p,errorSchema:e,errors:c.getValidator().toErrorList(e)}}this.setState(h,(()=>d&&d({...this.state,...h},r)))},this.onBlur=(e,t)=>{const{onBlur:a}=this.props;a&&a(e,t)},this.onFocus=(e,t)=>{const{onFocus:a}=this.props;a&&a(e,t)},this.onSubmit=e=>{if(e.preventDefault(),e.target!==e.currentTarget)return;e.persist();const{omitExtraData:t,extraErrors:a,noValidate:r,onSubmit:o}=this.props;let{formData:i}=this.state;const{schema:n,schemaUtils:l}=this.state;if(!0===t){const e=l.retrieveSchema(n,i),t=l.toPathSchema(e,"",i),a=this.getFieldNames(t,i);i=this.getUsedFormData(i,a)}if(r||this.validateForm()){const t=a||{},r=a?l.getValidator().toErrorList(a):[];this.setState({formData:i,errors:r,errorSchema:t,schemaValidationErrors:[],schemaValidationErrorSchema:{}},(()=>{o&&o({...this.state,formData:i,status:"submitted"},e)}))}},!e.validator)throw new Error("A validator is required for Form functionality to work");this.state=this.getStateFromProps(e,e.formData),this.props.onChange&&!a.deepEquals(this.state.formData,this.props.formData)&&this.props.onChange(this.state),this.formElement=h.default.createRef()}UNSAFE_componentWillReceiveProps(e){const t=this.getStateFromProps(e,e.formData);a.deepEquals(t.formData,e.formData)||a.deepEquals(t.formData,this.state.formData)||!e.onChange||e.onChange(t),this.setState(t)}getStateFromProps(e,t){const r=this.state||{},o="schema"in e?e.schema:this.props.schema,i=("uiSchema"in e?e.uiSchema:this.props.uiSchema)||{},n=void 0!==t,l=n&&!e.noValidate&&("liveValidate"in e?e.liveValidate:this.props.liveValidate),s=o;let d=r.schemaUtils;d&&!d.doesSchemaUtilsDiffer(e.validator,s)||(d=a.createSchemaUtils(e.validator,s));const c=d.getDefaultFormState(o,t),u=d.retrieveSchema(o,c);let m,h,p=r.schemaValidationErrors,f=r.schemaValidationErrorSchema;if(l){const e=this.validate(c,o,d);m=e.errors,h=e.errorSchema,p=m,f=h}else{const t=e.noValidate?{errors:[],errorSchema:{}}:e.liveValidate?{errors:r.errors||[],errorSchema:r.errorSchema||{}}:{errors:r.schemaValidationErrors||[],errorSchema:r.schemaValidationErrorSchema||{}};m=t.errors,h=t.errorSchema}if(e.extraErrors){const t=d.mergeValidationData({errorSchema:h,errors:m},e.extraErrors);h=t.errorSchema,m=t.errors}const g=d.toIdSchema(u,i["ui:rootFieldId"],c,e.idPrefix,e.idSeparator);return{schemaUtils:d,schema:o,uiSchema:i,idSchema:g,formData:c,edit:n,errors:m,errorSchema:h,schemaValidationErrors:p,schemaValidationErrorSchema:f}}shouldComponentUpdate(e,t){return a.shouldRender(this,e,t)}validate(e,t,a){void 0===t&&(t=this.props.schema);const r=a||this.state.schemaUtils,{customValidate:o,transformErrors:i}=this.props,n=r.retrieveSchema(t,e);return r.getValidator().validateFormData(e,n,o,i)}renderErrors(e){const{errors:t,errorSchema:r,schema:o,uiSchema:i}=this.state,{showErrorList:n,formContext:l}=this.props,s=a.getUiOptions(i),d=a.getTemplate("ErrorListTemplate",e,s);return t&&t.length&&0!=n?h.default.createElement(d,{errors:t,errorSchema:r||{},schema:o,uiSchema:i,formContext:l}):null}getRegistry(){var e;const{schemaUtils:t}=this.state,{fields:a,templates:r,widgets:o,formContext:i}=W();return{fields:{...a,...this.props.fields},templates:{...r,...this.props.templates,ButtonTemplates:{...r.ButtonTemplates,...null===(e=this.props.templates)||void 0===e?void 0:e.ButtonTemplates}},widgets:{...o,...this.props.widgets},rootSchema:this.props.schema,formContext:this.props.formContext||i,schemaUtils:t}}submit(){this.formElement.current&&(this.formElement.current.dispatchEvent(new CustomEvent("submit",{cancelable:!0})),this.formElement.current.requestSubmit())}validateForm(){const{extraErrors:e,onError:t}=this.props,{formData:a}=this.state,{schemaUtils:r}=this.state,o=this.validate(a);let i=o.errors,n=o.errorSchema;const l=i,s=n;if(i.length>0){if(e){const t=r.mergeValidationData(o,e);n=t.errorSchema,i=t.errors}return this.setState({errors:i,errorSchema:n,schemaValidationErrors:l,schemaValidationErrorSchema:s},(()=>{t?t(i):console.error("Form validation failed",i)})),!1}return!0}render(){const{children:e,id:t,idPrefix:a,idSeparator:r,className:o="",tagName:i,name:n,method:l,target:s,action:d,autoComplete:c,enctype:u,acceptcharset:m,noHtml5Validate:p=!1,disabled:f=!1,readonly:g=!1,formContext:y,_internalFormWrapper:S}=this.props,{schema:E,uiSchema:b,formData:v,errorSchema:C,idSchema:F}=this.state,D=this.getRegistry(),{SchemaField:x}=D.fields,{SubmitButton:k}=D.templates.ButtonTemplates;return h.default.createElement(S||i||"form",{className:o||"rjsf",id:t,name:n,method:l,target:s,action:d,autoComplete:c,encType:u,acceptCharset:m,noValidate:p,onSubmit:this.onSubmit,as:S?i:void 0,ref:this.formElement},this.renderErrors(D),h.default.createElement(x,{name:"",schema:E,uiSchema:b,errorSchema:C,idSchema:F,idPrefix:a,idSeparator:r,formContext:y,formData:v,onChange:this.onChange,onBlur:this.onBlur,onFocus:this.onFocus,registry:D,disabled:f,readonly:g}),e||h.default.createElement(k,{uiSchema:b}))}}e.default=L,e.getDefaultRegistry=W,e.withTheme=function(e){return t.forwardRef(((t,a)=>{var r,o;let{fields:i,widgets:n,templates:l,...s}=t;return i={...e.fields,...i},n={...e.widgets,...n},l={...e.templates,...l,ButtonTemplates:{...null==e||null===(r=e.templates)||void 0===r?void 0:r.ButtonTemplates,...null===(o=l)||void 0===o?void 0:o.ButtonTemplates}},h.default.createElement(L,{...e,...s,fields:i,widgets:n,templates:l,ref:a})}))},Object.defineProperty(e,"__esModule",{value:!0})}));
+!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("@rjsf/utils"),require("lodash-es/pick"),require("lodash-es/get"),require("lodash-es/isEmpty"),require("lodash-es/isObject"),require("lodash-es/set"),require("nanoid"),require("lodash-es/unset"),require("lodash-es/has"),require("lodash-es/omit")):"function"==typeof define&&define.amd?define(["exports","react","@rjsf/utils","lodash-es/pick","lodash-es/get","lodash-es/isEmpty","lodash-es/isObject","lodash-es/set","nanoid","lodash-es/unset","lodash-es/has","lodash-es/omit"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["@rjsf/core"]={},e.React,e.utils,e._pick,e.get,e._isEmpty,e.isObject,e.set,e.nanoid,e.unset,e.has,e.omit)}(this,(function(e,t,a,r,o,i,n,l,s,d,c,u){"use strict";function m(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var h=m(t),p=m(r),f=m(o),g=m(i),y=m(n),S=m(l),E=m(d),b=m(c),v=m(u);function C(){return s.nanoid()}function F(e){return Array.isArray(e)?e.map((e=>({key:C(),item:e}))):[]}function D(e){return Array.isArray(e)?e.map((e=>e.item)):[]}class x extends t.Component{constructor(e){super(e),this.onOptionChange=e=>{const t=parseInt(e,10),{formData:r,onChange:o,options:i,registry:n}=this.props,{schemaUtils:l}=n,s=l.retrieveSchema(i[t],r);let d;if("object"===a.guessType(r)&&("object"===s.type||s.properties)){d=Object.assign({},r);const e=i.slice();e.splice(t,1);for(const t of e)if(t.properties)for(const e in t.properties)e in d&&E.default(d,e)}o(l.getDefaultFormState(i[t],d),void 0,this.getFieldId()),this.setState({selectedOption:parseInt(e,10)})};const{formData:t,options:r}=this.props;this.state={selectedOption:this.getMatchingOption(0,t,r)}}componentDidUpdate(e,t){const{formData:r,options:o,idSchema:i}=this.props,{selectedOption:n}=this.state;if(!a.deepEquals(r,e.formData)&&i.$id===e.idSchema.$id){const e=this.getMatchingOption(n,r,o);if(!t||e===n)return;this.setState({selectedOption:e})}}getMatchingOption(e,t,a){const{schemaUtils:r}=this.props.registry,o=r.getMatchingOption(t,a);return 0!==o?o:e||0}getFieldId(){const{idSchema:e,schema:t}=this.props;return e.$id+(t.oneOf?"__oneof_select":"__anyof_select")}render(){const{name:e,baseType:t,disabled:r=!1,readonly:o=!1,hideError:i=!1,errorSchema:n={},formData:l,formContext:s,idPrefix:d,idSeparator:c,idSchema:u,onBlur:m,onChange:p,onFocus:f,options:g,registry:y,uiSchema:S}=this.props,{widgets:E,fields:b}=y,{SchemaField:v}=b,{selectedOption:C}=this.state,{widget:F="select",...D}=a.getUiOptions(S),x=a.getWidget({type:"number"},F,E),k=g[C]||null;let T;k&&(T=k.type?k:Object.assign({},k,{type:t}));const N=g.map(((e,t)=>({label:e.title||"Option "+(t+1),value:t})));return h.default.createElement("div",{className:"panel panel-default panel-body"},h.default.createElement("div",{className:"form-group"},h.default.createElement(x,{id:this.getFieldId(),schema:{type:"number",default:0},onChange:this.onOptionChange,onBlur:m,onFocus:f,value:C,options:{enumOptions:N},registry:y,formContext:s,...D,label:""})),null!==k&&h.default.createElement(v,{name:e,schema:T,uiSchema:S,errorSchema:n,idSchema:u,idPrefix:d,idSeparator:c,formData:l,formContext:s,onChange:p,onBlur:m,onFocus:f,registry:y,disabled:r,readonly:o,hideError:i}))}}const k=/\.([0-9]*0)*$/,T=/[0.]0*$/,N={array:"ArrayField",boolean:"BooleanField",integer:"NumberField",number:"NumberField",object:"ObjectField",string:"StringField",null:"NullField"};function A(e){const{schema:t,idSchema:r,uiSchema:o,formData:i,errorSchema:n,idPrefix:l,idSeparator:s,name:d,onChange:c,onKeyChange:u,onDropPropertyClick:m,required:p,registry:f,wasPropertyKeyModified:g=!1}=e,{formContext:S,schemaUtils:E}=f,b=a.getUiOptions(o),C=a.getTemplate("FieldTemplate",f,b),F=a.getTemplate("DescriptionFieldTemplate",f,b),D=a.getTemplate("FieldHelpTemplate",f,b),x=a.getTemplate("FieldErrorTemplate",f,b),k=E.retrieveSchema(t,i),T=r[a.ID_KEY],A=a.mergeObjects(E.toIdSchema(k,T,i,l,s),r),w=h.default.useCallback(((e,t,a)=>c(e,t,a||T)),[T,c]),O=function(e,t,r,o){const i=t.field,{fields:n}=o;if("function"==typeof i)return i;if("string"==typeof i&&i in n)return n[i];const l=a.getSchemaType(e),s=Array.isArray(l)?l[0]:l||"",d=N[s];return d||!e.anyOf&&!e.oneOf?d in n?n[d]:()=>{const i=a.getTemplate("UnsupportedFieldTemplate",o,t);return h.default.createElement(i,{schema:e,idSchema:r,reason:"Unknown field type "+e.type,registry:o})}:()=>null}(k,b,A,f),B=Boolean(e.disabled||b.disabled),I=Boolean(e.readonly||b.readonly||e.schema.readOnly||k.readOnly),U=b.hideError,q=void 0===U?e.hideError:Boolean(U),P=Boolean(e.autofocus||b.autofocus);if(0===Object.keys(k).length)return null;const _=E.getDisplayLabel(k,o),{__errors:R,...V}=n||{},j=v.default(o,["ui:classNames","classNames"]);"ui:options"in j&&(j["ui:options"]=v.default(j["ui:options"],["classNames"]));const M=h.default.createElement(O,{...e,onChange:w,idSchema:A,schema:k,uiSchema:j,disabled:B,readonly:I,hideError:q,autofocus:P,errorSchema:V,formContext:S,rawErrors:R}),K=A[a.ID_KEY];let W;W=g||a.ADDITIONAL_PROPERTY_FLAG in k?d:b.title||e.schema.title||k.title||d;const L=b.description||e.schema.description||k.description||"",$=b.help,Y="hidden"===b.widget,z=["form-group","field","field-"+k.type];!q&&R&&R.length>0&&z.push("field-error has-error has-danger"),null!=o&&o.classNames&&z.push(o.classNames),b.classNames&&z.push(b.classNames);const H=h.default.createElement(D,{help:$,idSchema:A,schema:k,uiSchema:o,hasErrors:!q&&R&&R.length>0,registry:f}),J=q?void 0:h.default.createElement(x,{errors:R,errorSchema:n,idSchema:A,schema:k,uiSchema:o,registry:f}),G={description:h.default.createElement(F,{id:K+"__description",description:L,schema:k,uiSchema:o,registry:f}),rawDescription:L,help:H,rawHelp:"string"==typeof $?$:void 0,errors:J,rawErrors:q?void 0:R,id:K,label:W,hidden:Y,onChange:c,onKeyChange:u,onDropPropertyClick:m,required:p,disabled:B,readonly:I,hideError:q,displayLabel:_,classNames:z.join(" ").trim(),formContext:S,formData:i,schema:k,uiSchema:o,registry:f},Q=f.fields.AnyOfField,X=f.fields.OneOfField;return h.default.createElement(C,{...G},h.default.createElement(h.default.Fragment,null,M,k.anyOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&h.default.createElement(Q,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.anyOf.map((e=>E.retrieveSchema(y.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o}),k.oneOf&&!(null!=o&&o["ui:field"])&&!E.isSelect(k)&&h.default.createElement(X,{name:d,disabled:B,readonly:I,hideError:q,errorSchema:n,formData:i,formContext:S,idPrefix:l,idSchema:A,idSeparator:s,onBlur:e.onBlur,onChange:e.onChange,onFocus:e.onFocus,options:k.oneOf.map((e=>E.retrieveSchema(y.default(e)?e:{},i))),baseType:k.type,registry:f,schema:k,uiSchema:o})))}const w={AnyOfField:x,ArrayField:class extends t.Component{constructor(e){super(e),this._getNewFormDataRow=()=>{const{schema:e,registry:t}=this.props,{schemaUtils:r}=t;let o=e.items;return a.isFixedItems(e)&&a.allowAdditionalItems(e)&&(o=e.additionalItems),r.getDefaultFormState(o)},this.onAddClick=e=>{e&&e.preventDefault();const{onChange:t}=this.props,{keyedFormData:a}=this.state,r=[...a,{key:C(),item:this._getNewFormDataRow()}];this.setState({keyedFormData:r,updatedKeyedFormData:!0},(()=>t(D(r))))},this.onAddIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a}=this.props,{keyedFormData:r}=this.state,o={key:C(),item:this._getNewFormDataRow()},i=[...r];i.splice(e,0,o),this.setState({keyedFormData:i,updatedKeyedFormData:!0},(()=>a(D(i))))},this.onDropIndexClick=e=>t=>{t&&t.preventDefault();const{onChange:a,errorSchema:r}=this.props,{keyedFormData:o}=this.state;let i;if(r){i={};for(const t in r){const a=parseInt(t);a<e?S.default(i,[a],r[t]):a>e&&S.default(i,[a-1],r[t])}}const n=o.filter(((t,a)=>a!==e));this.setState({keyedFormData:n,updatedKeyedFormData:!0},(()=>a(D(n),i)))},this.onReorderClick=(e,t)=>a=>{a&&(a.preventDefault(),a.currentTarget.blur());const{onChange:r,errorSchema:o}=this.props;let i;if(this.props.errorSchema){i={};for(const a in o){const r=parseInt(a);r==e?S.default(i,[t],o[e]):r==t?S.default(i,[e],o[t]):S.default(i,[a],o[r])}}const{keyedFormData:n}=this.state,l=function(){const a=n.slice();return a.splice(e,1),a.splice(t,0,n[e]),a}();this.setState({keyedFormData:l},(()=>r(D(l),i)))},this.onChangeForIndex=e=>(t,a,r)=>{const{formData:o,onChange:i,errorSchema:n}=this.props;i((Array.isArray(o)?o:[]).map(((a,r)=>e===r?void 0===t?null:t:a)),n&&n&&{...n,[e]:a},r)},this.onSelectChange=e=>{const{onChange:t,idSchema:a}=this.props;t(e,void 0,a&&a.$id)};const{formData:t=[]}=e,r=F(t);this.state={keyedFormData:r,updatedKeyedFormData:!1}}static getDerivedStateFromProps(e,t){if(t.updatedKeyedFormData)return{updatedKeyedFormData:!1};const a=Array.isArray(e.formData)?e.formData:[],r=t.keyedFormData||[];return{keyedFormData:a.length===r.length?r.map(((e,t)=>({key:e.key,item:a[t]}))):F(a)}}get itemTitle(){const{schema:e}=this.props;return f.default(e,[a.ITEMS_KEY,"title"],f.default(e,[a.ITEMS_KEY,"description"],"Item"))}isItemRequired(e){return Array.isArray(e.type)?!e.type.includes("null"):"null"!==e.type}canAddItem(e){const{schema:t,uiSchema:r}=this.props;let{addable:o}=a.getUiOptions(r);return!1!==o&&(o=void 0===t.maxItems||e.length<t.maxItems),o}render(){const{schema:e,uiSchema:t,idSchema:r,registry:o}=this.props,{schemaUtils:i}=o;if(!(a.ITEMS_KEY in e)){const i=a.getUiOptions(t),n=a.getTemplate("UnsupportedFieldTemplate",o,i);return h.default.createElement(n,{schema:e,idSchema:r,reason:"Missing items definition",registry:o})}return i.isMultiSelect(e)?this.renderMultiSelect():a.isCustomWidget(t)?this.renderCustomWidget():a.isFixedItems(e)?this.renderFixedArray():i.isFilesArray(e,t)?this.renderFiles():this.renderNormalArray()}renderNormalArray(){const{schema:e,uiSchema:t={},errorSchema:r,idSchema:o,name:i,disabled:n=!1,readonly:l=!1,autofocus:s=!1,required:d=!1,registry:c,onBlur:u,onFocus:m,idPrefix:p,idSeparator:f="_",rawErrors:g}=this.props,{keyedFormData:S}=this.state,E=void 0===e.title?i:e.title,{schemaUtils:b,formContext:v}=c,C=a.getUiOptions(t),F=y.default(e.items)?e.items:{},x=b.retrieveSchema(F),k=D(this.state.keyedFormData),T={canAdd:this.canAddItem(k),items:S.map(((e,a)=>{const{key:n,item:l}=e,d=l,c=b.retrieveSchema(F,d),h=r?r[a]:void 0,y=b.toIdSchema(c,o.$id+f+a,d,p,f);return this.renderArrayFieldItem({key:n,index:a,name:i&&i+"-"+a,canMoveUp:a>0,canMoveDown:a<k.length-1,itemSchema:c,itemIdSchema:y,itemErrorSchema:h,itemData:d,itemUiSchema:t.items,autofocus:s&&0===a,onBlur:u,onFocus:m,rawErrors:g})})),className:"field field-array field-array-of-"+x.type,disabled:n,idSchema:o,uiSchema:t,onAddClick:this.onAddClick,readonly:l,required:d,schema:e,title:E,formContext:v,formData:k,rawErrors:g,registry:c},N=a.getTemplate("ArrayFieldTemplate",c,C);return h.default.createElement(N,{...T})}renderCustomWidget(){const{schema:e,idSchema:t,uiSchema:r,disabled:o=!1,readonly:i=!1,autofocus:n=!1,required:l=!1,hideError:s,placeholder:d,onBlur:c,onFocus:u,formData:m=[],registry:p,rawErrors:f,name:g}=this.props,{widgets:y,formContext:S}=p,E=e.title||g,{widget:b,...v}=a.getUiOptions(r),C=a.getWidget(e,b,y);return h.default.createElement(C,{id:t&&t.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:v,schema:e,uiSchema:r,registry:p,value:m,disabled:o,readonly:i,hideError:s,required:l,label:E,placeholder:d,formContext:S,autofocus:n,rawErrors:f})}renderMultiSelect(){const{schema:e,idSchema:t,uiSchema:r,formData:o=[],disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,placeholder:d,onBlur:c,onFocus:u,registry:m,rawErrors:p,name:f}=this.props,{widgets:g,schemaUtils:y,formContext:S}=m,E=y.retrieveSchema(e.items,o),b=e.title||f,v=a.optionsList(E),{widget:C="select",...F}=a.getUiOptions(r),D=a.getWidget(e,C,g);return h.default.createElement(D,{id:t&&t.$id,multiple:!0,onChange:this.onSelectChange,onBlur:c,onFocus:u,options:{...F,enumOptions:v},schema:e,uiSchema:r,registry:m,value:o,disabled:i,readonly:n,required:s,label:b,placeholder:d,formContext:S,autofocus:l,rawErrors:p})}renderFiles(){const{schema:e,uiSchema:t,idSchema:r,name:o,disabled:i=!1,readonly:n=!1,autofocus:l=!1,required:s=!1,onBlur:d,onFocus:c,registry:u,formData:m=[],rawErrors:p}=this.props,f=e.title||o,{widgets:g,formContext:y}=u,{widget:S="files",...E}=a.getUiOptions(t),b=a.getWidget(e,S,g);return h.default.createElement(b,{options:E,id:r&&r.$id,multiple:!0,onChange:this.onSelectChange,onBlur:d,onFocus:c,schema:e,uiSchema:t,title:f,value:m,disabled:i,readonly:n,required:s,registry:u,formContext:y,autofocus:l,rawErrors:p,label:""})}renderFixedArray(){const{schema:e,uiSchema:t={},formData:r=[],errorSchema:o,idPrefix:i,idSeparator:n="_",idSchema:l,name:s,disabled:d=!1,readonly:c=!1,autofocus:u=!1,required:m=!1,registry:p,onBlur:f,onFocus:g,rawErrors:S}=this.props,{keyedFormData:E}=this.state;let{formData:b=[]}=this.props;const v=e.title||s,C=a.getUiOptions(t),{schemaUtils:F,formContext:D}=p,x=(y.default(e.items)?e.items:[]).map(((e,t)=>F.retrieveSchema(e,r[t]))),k=y.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,r):null;(!b||b.length<x.length)&&(b=b||[],b=b.concat(new Array(x.length-b.length)));const T={canAdd:this.canAddItem(b)&&!!k,className:"field field-array field-array-fixed-items",disabled:d,idSchema:l,formData:r,items:E.map(((a,r)=>{const{key:d,item:c}=a,m=c,h=r>=x.length,p=h&&y.default(e.additionalItems)?F.retrieveSchema(e.additionalItems,m):x[r],E=F.toIdSchema(p,l.$id+n+r,m,i,n),v=h?t.additionalItems||{}:Array.isArray(t.items)?t.items[r]:t.items||{};return this.renderArrayFieldItem({key:d,index:r,name:s&&s+"-"+r,canRemove:h,canMoveUp:r>=x.length+1,canMoveDown:h&&r<b.length-1,itemSchema:p,itemData:m,itemUiSchema:v,itemIdSchema:E,itemErrorSchema:o?o[r]:void 0,autofocus:u&&0===r,onBlur:f,onFocus:g,rawErrors:S})})),onAddClick:this.onAddClick,readonly:c,required:m,registry:p,schema:e,uiSchema:t,title:v,formContext:D,rawErrors:S},N=a.getTemplate("ArrayFieldTemplate",p,C);return h.default.createElement(N,{...T})}renderArrayFieldItem(e){const{key:t,index:r,name:o,canRemove:i=!0,canMoveUp:n=!0,canMoveDown:l=!0,itemSchema:s,itemData:d,itemUiSchema:c,itemIdSchema:u,itemErrorSchema:m,autofocus:p,onBlur:f,onFocus:g,rawErrors:y}=e,{disabled:S,hideError:E,idPrefix:b,idSeparator:v,readonly:C,uiSchema:F,registry:D,formContext:x}=this.props,{fields:{ArraySchemaField:k,SchemaField:T}}=D,N=k||T,{orderable:A=!0,removable:w=!0}=a.getUiOptions(F),O={moveUp:A&&n,moveDown:A&&l,remove:w&&i,toolbar:!1};return O.toolbar=Object.keys(O).some((e=>O[e])),{children:h.default.createElement(N,{name:o,index:r,schema:s,uiSchema:c,formData:d,formContext:x,errorSchema:m,idPrefix:b,idSeparator:v,idSchema:u,required:this.isItemRequired(s),onChange:this.onChangeForIndex(r),onBlur:f,onFocus:g,registry:D,disabled:S,readonly:C,hideError:E,autofocus:p,rawErrors:y}),className:"array-item",disabled:S,hasToolbar:O.toolbar,hasMoveUp:O.moveUp,hasMoveDown:O.moveDown,hasRemove:O.remove,index:r,key:t,onAddIndexClick:this.onAddIndexClick,onDropIndexClick:this.onDropIndexClick,onReorderClick:this.onReorderClick,readonly:C,registry:D,uiSchema:c}}},BooleanField:function(e){const{schema:t,name:r,uiSchema:o,idSchema:i,formData:n,registry:l,required:s,disabled:d,readonly:c,autofocus:u,onChange:m,onFocus:p,onBlur:f,rawErrors:g}=e,{title:S}=t,{widgets:E,formContext:b}=l,{widget:v="checkbox",...C}=a.getUiOptions(o),F=a.getWidget(t,v,E);let D;if(Array.isArray(t.oneOf))D=a.optionsList({oneOf:t.oneOf.map((e=>{if(y.default(e))return{...e,title:e.title||(!0===e.const?"Yes":"No")}})).filter((e=>e))});else{var x;const e=t,r=null!=(x=t.enum)?x:[!0,!1];D=!e.enumNames&&2===r.length&&r.every((e=>"boolean"==typeof e))?[{value:r[0],label:r[0]?"Yes":"No"},{value:r[1],label:r[1]?"Yes":"No"}]:a.optionsList({enum:r,enumNames:e.enumNames})}return h.default.createElement(F,{options:{...C,enumOptions:D},schema:t,uiSchema:o,id:i&&i.$id,onChange:m,onFocus:p,onBlur:f,label:void 0===S?r:S,value:n,required:s,disabled:d,readonly:c,registry:l,formContext:b,autofocus:u,rawErrors:g})},NumberField:function(e){const{registry:r,onChange:o,formData:i,value:n}=e,[l,s]=t.useState(n),{StringField:d}=r.fields;let c=i;const u=t.useCallback((e=>{s(e),"."===(""+e).charAt(0)&&(e="0"+e);const t="string"==typeof e&&e.match(k)?a.asNumber(e.replace(T,"")):a.asNumber(e);o(t)}),[o]);if("string"==typeof l&&"number"==typeof c){const e=new RegExp((""+c).replace(".","\\.")+"\\.?0*$");l.match(e)&&(c=l)}return h.default.createElement(d,{...e,formData:c,onChange:u})},ObjectField:class extends t.Component{constructor(){var e;super(...arguments),e=this,this.state={wasPropertyKeyModified:!1,additionalProperties:{}},this.onPropertyChange=function(t,a){return void 0===a&&(a=!1),(r,o,i)=>{const{formData:n,onChange:l,errorSchema:s}=e.props;void 0===r&&a&&(r=""),l({...n,[t]:r},s&&s&&{...s,[t]:o},i)}},this.onDropPropertyClick=e=>t=>{t.preventDefault();const{onChange:a,formData:r}=this.props,o={...r};E.default(o,e),a(o)},this.getAvailableKey=(e,t)=>{const{uiSchema:r}=this.props,{duplicateKeySuffixSeparator:o="-"}=a.getUiOptions(r);let i=0,n=e;for(;n in t;)n=""+e+o+ ++i;return n},this.onKeyChange=e=>(t,a)=>{if(e===t)return;const{formData:r,onChange:o,errorSchema:i}=this.props;t=this.getAvailableKey(t,r);const n={...r},l={[e]:t},s=Object.keys(n).map((e=>({[l[e]||e]:n[e]}))),d=Object.assign({},...s);this.setState({wasPropertyKeyModified:!0}),o(d,i&&i&&{...i,[t]:a})},this.handleAddClick=e=>()=>{if(!e.additionalProperties)return;const{formData:t,onChange:r,registry:o}=this.props,i={...t};let n;if(y.default(e.additionalProperties)&&(n=e.additionalProperties.type,a.REF_KEY in e.additionalProperties)){const{schemaUtils:r}=o;n=r.retrieveSchema({$ref:e.additionalProperties[a.REF_KEY]},t).type}const l=this.getAvailableKey("newKey",i);S.default(i,l,this.getDefaultValue(n)),r(i)}}isRequired(e){const{schema:t}=this.props;return Array.isArray(t.required)&&-1!==t.required.indexOf(e)}getDefaultValue(e){switch(e){case"string":default:return"New Value";case"array":return[];case"boolean":return!1;case"null":return null;case"number":return 0;case"object":return{}}}render(){const{schema:e,uiSchema:t={},formData:r,errorSchema:o,idSchema:i,name:n,required:l=!1,disabled:s=!1,readonly:d=!1,hideError:c,idPrefix:u,idSeparator:m,onBlur:p,onFocus:g,registry:y}=this.props,{fields:S,formContext:E,schemaUtils:v}=y,{SchemaField:C}=S,F=v.retrieveSchema(e,r),D=a.getUiOptions(t),{properties:x={}}=F,k=void 0===F.title?n:F.title,T=D.description||F.description;let N;try{const e=Object.keys(x);N=a.orderProperties(e,D.order)}catch(e){return h.default.createElement("div",null,h.default.createElement("p",{className:"config-error",style:{color:"red"}},"Invalid ",n||"root"," object field configuration:",h.default.createElement("em",null,e.message),"."),h.default.createElement("pre",null,JSON.stringify(F)))}const A=a.getTemplate("ObjectFieldTemplate",y,D),w={title:D.title||k,description:T,properties:N.map((e=>{const n=b.default(F,[a.PROPERTIES_KEY,e,a.ADDITIONAL_PROPERTY_FLAG]),S=n?t.additionalProperties:t[e],v="hidden"===a.getUiOptions(S).widget,D=f.default(i,[e],{});return{content:h.default.createElement(C,{key:e,name:e,required:this.isRequired(e),schema:f.default(F,[a.PROPERTIES_KEY,e],{}),uiSchema:S,errorSchema:f.default(o,e),idSchema:D,idPrefix:u,idSeparator:m,formData:f.default(r,e),formContext:E,wasPropertyKeyModified:this.state.wasPropertyKeyModified,onKeyChange:this.onKeyChange(e),onChange:this.onPropertyChange(e,n),onBlur:p,onFocus:g,registry:y,disabled:s,readonly:d,hideError:c,onDropPropertyClick:this.onDropPropertyClick}),name:e,readonly:d,disabled:s,required:l,hidden:v}})),readonly:d,disabled:s,required:l,idSchema:i,uiSchema:t,schema:F,formData:r,formContext:E,registry:y};return h.default.createElement(A,{...w,onAddClick:this.handleAddClick})}},OneOfField:x,SchemaField:class extends h.default.Component{shouldComponentUpdate(e){return!a.deepEquals(this.props,e)}render(){return h.default.createElement(A,{...this.props})}},StringField:function(e){const{schema:t,name:r,uiSchema:o,idSchema:i,formData:n,required:l,disabled:s=!1,readonly:d=!1,autofocus:c=!1,onChange:u,onBlur:m,onFocus:p,registry:f,rawErrors:g}=e,{title:y,format:S}=t,{widgets:E,formContext:b,schemaUtils:v}=f,C=v.isSelect(t)?a.optionsList(t):void 0;let F=C?"select":"text";S&&a.hasWidget(t,S,E)&&(F=S);const{widget:D=F,placeholder:x="",...k}=a.getUiOptions(o),T=a.getWidget(t,D,E);return h.default.createElement(T,{options:{...k,enumOptions:C},schema:t,uiSchema:o,id:i&&i.$id,label:void 0===y?r:y,value:n,onChange:u,onBlur:m,onFocus:p,required:l,disabled:s,readonly:d,formContext:b,autofocus:c,registry:f,placeholder:x,rawErrors:g})},NullField:function(e){const{formData:a,onChange:r}=e;return t.useEffect((()=>{void 0===a&&r(null)}),[a,r]),null}};function O(e){const{iconType:t="default",icon:a,className:r,uiSchema:o,...i}=e;return h.default.createElement("button",{type:"button",className:"btn btn-"+t+" "+r,...i},h.default.createElement("i",{className:"glyphicon glyphicon-"+a}))}function B(e){const{label:t,required:a,id:r}=e;return t?h.default.createElement("label",{className:"control-label",htmlFor:r},t,a&&h.default.createElement("span",{className:"required"},"*")):null}const I={ArrayFieldDescriptionTemplate:function(e){const{idSchema:t,description:r,registry:o,schema:i,uiSchema:n}=e,l=a.getUiOptions(n),{label:s=!0}=l;if(!r||!s)return null;const d=a.getTemplate("DescriptionFieldTemplate",o,l);return h.default.createElement(d,{id:t.$id+"__description",description:r,schema:i,uiSchema:n,registry:o})},ArrayFieldItemTemplate:function(e){const{children:t,className:a,disabled:r,hasToolbar:o,hasMoveDown:i,hasMoveUp:n,hasRemove:l,index:s,onDropIndexClick:d,onReorderClick:c,readonly:u,registry:m,uiSchema:p}=e,{MoveDownButton:f,MoveUpButton:g,RemoveButton:y}=m.templates.ButtonTemplates,S={flex:1,paddingLeft:6,paddingRight:6,fontWeight:"bold"};return h.default.createElement("div",{className:a},h.default.createElement("div",{className:o?"col-xs-9":"col-xs-12"},t),o&&h.default.createElement("div",{className:"col-xs-3 array-item-toolbox"},h.default.createElement("div",{className:"btn-group",style:{display:"flex",justifyContent:"space-around"}},(n||i)&&h.default.createElement(g,{style:S,disabled:r||u||!n,onClick:c(s,s-1),uiSchema:p}),(n||i)&&h.default.createElement(f,{style:S,disabled:r||u||!i,onClick:c(s,s+1),uiSchema:p}),l&&h.default.createElement(y,{style:S,disabled:r||u,onClick:d(s),uiSchema:p}))))},ArrayFieldTemplate:function(e){const{canAdd:t,className:r,disabled:o,idSchema:i,uiSchema:n,items:l,onAddClick:s,readonly:d,registry:c,required:u,schema:m,title:p}=e,f=a.getUiOptions(n),g=a.getTemplate("ArrayFieldDescriptionTemplate",c,f),y=a.getTemplate("ArrayFieldItemTemplate",c,f),S=a.getTemplate("ArrayFieldTitleTemplate",c,f),{ButtonTemplates:{AddButton:E}}=c.templates;return h.default.createElement("fieldset",{className:r,id:i.$id},h.default.createElement(S,{idSchema:i,title:f.title||p,required:u,schema:m,uiSchema:n,registry:c}),h.default.createElement(g,{idSchema:i,description:f.description||m.description,schema:m,uiSchema:n,registry:c}),h.default.createElement("div",{className:"row array-item-list"},l&&l.map((e=>{let{key:t,...a}=e;return h.default.createElement(y,{key:t,...a})}))),t&&h.default.createElement(E,{className:"array-item-add",onClick:s,disabled:o||d,uiSchema:n}))},ArrayFieldTitleTemplate:function(e){const{idSchema:t,title:r,schema:o,uiSchema:i,required:n,registry:l}=e,s=a.getUiOptions(i),{label:d=!0}=s;if(!r||!d)return null;const c=a.getTemplate("TitleFieldTemplate",l,s);return h.default.createElement(c,{id:t.$id+"__title",title:r,required:n,schema:o,uiSchema:i,registry:l})},ButtonTemplates:{SubmitButton:function(e){let{uiSchema:t}=e;const{submitText:r,norender:o,props:i={}}=a.getSubmitButtonOptions(t);return o?null:h.default.createElement("div",null,h.default.createElement("button",{type:"submit",...i,className:"btn btn-info "+i.className},r))},AddButton:function(e){let{className:t,onClick:a,disabled:r}=e;return h.default.createElement("div",{className:"row"},h.default.createElement("p",{className:"col-xs-3 col-xs-offset-9 text-right "+t},h.default.createElement(O,{iconType:"info",icon:"plus",className:"btn-add col-xs-12",title:"Add",onClick:a,disabled:r})))},MoveDownButton:function(e){return h.default.createElement(O,{title:"Move down",className:"array-item-move-down",...e,icon:"arrow-down"})},MoveUpButton:function(e){return h.default.createElement(O,{title:"Move up",className:"array-item-move-up",...e,icon:"arrow-up"})},RemoveButton:function(e){return h.default.createElement(O,{title:"Remove",className:"array-item-remove",...e,iconType:"danger",icon:"remove"})}},BaseInputTemplate:function(e){const{id:r,value:o,readonly:i,disabled:n,autofocus:l,onBlur:s,onFocus:d,onChange:c,options:u,schema:m,uiSchema:p,formContext:f,registry:g,rawErrors:y,type:S,...E}=e;if(!r)throw console.log("No id for",e),new Error("no id for props "+JSON.stringify(e));const b={...E,...a.getInputProps(m,S,u)};let v;v="number"===b.type||"integer"===b.type?o||0===o?o:"":null==o?"":o;const C=t.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?u.emptyValue:t)}),[c,u]),F=t.useCallback((e=>{let{target:{value:t}}=e;return s(r,t)}),[s,r]),D=t.useCallback((e=>{let{target:{value:t}}=e;return d(r,t)}),[d,r]);return h.default.createElement(h.default.Fragment,null,h.default.createElement("input",{id:r,name:r,className:"form-control",readOnly:i,disabled:n,autoFocus:l,value:v,...b,list:m.examples?"examples_"+r:void 0,onChange:C,onBlur:F,onFocus:D}),Array.isArray(m.examples)&&h.default.createElement("datalist",{key:"datalist_"+r,id:"examples_"+r},[...new Set(m.examples.concat(m.default?[m.default]:[]))].map((e=>h.default.createElement("option",{key:e,value:e})))))},DescriptionFieldTemplate:function(e){const{id:t,description:a}=e;return a?h.default.createElement("string"==typeof a?"p":"div",{id:t,className:"field-description"},a):null},ErrorListTemplate:function(e){let{errors:t}=e;return h.default.createElement("div",{className:"panel panel-danger errors"},h.default.createElement("div",{className:"panel-heading"},h.default.createElement("h3",{className:"panel-title"},"Errors")),h.default.createElement("ul",{className:"list-group"},t.map(((e,t)=>h.default.createElement("li",{key:t,className:"list-group-item text-danger"},e.stack)))))},FieldTemplate:function(e){const{id:t,label:r,children:o,errors:i,help:n,description:l,hidden:s,required:d,displayLabel:c,registry:u,uiSchema:m}=e,p=a.getUiOptions(m),f=a.getTemplate("WrapIfAdditionalTemplate",u,p);return s?h.default.createElement("div",{className:"hidden"},o):h.default.createElement(f,{...e},c&&h.default.createElement(B,{label:r,required:d,id:t}),c&&l?l:null,o,i,n)},FieldErrorTemplate:function(e){const{errors:t=[],idSchema:a}=e;return 0===t.length?null:h.default.createElement("div",null,h.default.createElement("ul",{id:a.$id+"__error",className:"error-detail bs-callout bs-callout-info"},t.filter((e=>!!e)).map(((e,t)=>h.default.createElement("li",{className:"text-danger",key:t},e)))))},FieldHelpTemplate:function(e){const{idSchema:t,help:a}=e;return a?h.default.createElement("string"==typeof a?"p":"div",{id:t.$id+"__help",className:"help-block"},a):null},ObjectFieldTemplate:function(e){const{description:t,disabled:r,formData:o,idSchema:i,onAddClick:n,properties:l,readonly:s,registry:d,required:c,schema:u,title:m,uiSchema:p}=e,f=a.getUiOptions(p),g=a.getTemplate("TitleFieldTemplate",d,f),y=a.getTemplate("DescriptionFieldTemplate",d,f),{ButtonTemplates:{AddButton:S}}=d.templates;return h.default.createElement("fieldset",{id:i.$id},(f.title||m)&&h.default.createElement(g,{id:i.$id+"__title",title:f.title||m,required:c,schema:u,uiSchema:p,registry:d}),(f.description||t)&&h.default.createElement(y,{id:i.$id+"__description",description:f.description||t,schema:u,uiSchema:p,registry:d}),l.map((e=>e.content)),a.canExpand(u,p,o)&&h.default.createElement(S,{className:"object-property-expand",onClick:n(u),disabled:r||s,uiSchema:p}))},TitleFieldTemplate:function(e){const{id:t,title:a,required:r}=e;return h.default.createElement("legend",{id:t},a,r&&h.default.createElement("span",{className:"required"},"*"))},UnsupportedFieldTemplate:function(e){const{schema:t,idSchema:a,reason:r}=e;return h.default.createElement("div",{className:"unsupported-field"},h.default.createElement("p",null,"Unsupported field schema",a&&a.$id&&h.default.createElement("span",null," for"," field ",h.default.createElement("code",null,a.$id)),r&&h.default.createElement("em",null,": ",r),"."),t&&h.default.createElement("pre",null,JSON.stringify(t,null,2)))},WrapIfAdditionalTemplate:function(e){const{id:t,classNames:r,disabled:o,label:i,onKeyChange:n,onDropPropertyClick:l,readonly:s,required:d,schema:c,children:u,uiSchema:m,registry:p}=e,{RemoveButton:f}=p.templates.ButtonTemplates;return h.default.createElement("div",{className:r},a.ADDITIONAL_PROPERTY_FLAG in c?h.default.createElement("div",{className:"row"},h.default.createElement("div",{className:"col-xs-5 form-additional"},h.default.createElement("div",{className:"form-group"},h.default.createElement(B,{label:i+" Key",required:d,id:t+"-key"}),h.default.createElement("input",{className:"form-control",type:"text",id:t+"-key",onBlur:e=>n(e.target.value),defaultValue:i}))),h.default.createElement("div",{className:"form-additional form-group col-xs-5"},u),h.default.createElement("div",{className:"col-xs-2"},h.default.createElement(f,{className:"array-item-remove btn-block",style:{border:"0"},disabled:o||s,onClick:l(i),uiSchema:m}))):u)}};function U(e,t){const r=[];for(let o=e;o<=t;o++)r.push({value:o,label:a.pad(o,2)});return r}function q(e){let{type:t,range:a,value:r,select:o,rootId:i,disabled:n,readonly:l,autofocus:s,registry:d,onBlur:c,onFocus:u}=e;const m=i+"_"+t,{SelectWidget:p}=d.widgets;return h.default.createElement(p,{schema:{type:"integer"},id:m,className:"form-control",options:{enumOptions:U(a[0],a[1])},placeholder:t,value:r,disabled:n,readonly:l,autofocus:s,onChange:e=>o(t,e),onBlur:c,onFocus:u,registry:d,label:""})}function P(e,t){return null===e?null:e.replace(";base64",";name="+encodeURIComponent(t)+";base64")}function _(e){const{name:t,size:a,type:r}=e;return new Promise(((o,i)=>{const n=new window.FileReader;n.onerror=i,n.onload=e=>{var i;"string"==typeof(null===(i=e.target)||void 0===i?void 0:i.result)?o({dataURL:P(e.target.result,t),name:t,size:a,type:r}):o({dataURL:null,name:t,size:a,type:r})},n.readAsDataURL(e)}))}function R(e){let{filesInfo:t}=e;return 0===t.length?null:h.default.createElement("ul",{className:"file-info"},t.map(((e,t)=>{const{name:a,size:r,type:o}=e;return h.default.createElement("li",{key:t},h.default.createElement("strong",null,a)," (",o,", ",r," bytes)")})))}function V(e){return e.filter((e=>void 0!==e)).map((e=>{const{blob:t,name:r}=a.dataURItoBlob(e);return{name:r,size:t.size,type:t.type}}))}function j(e,t){return t?Array.from(e.target.options).slice().filter((e=>e.selected)).map((e=>e.value)):e.target.value}function M(e){let{id:a,options:r={},placeholder:o,value:i,required:n,disabled:l,readonly:s,autofocus:d=!1,onChange:c,onBlur:u,onFocus:m}=e;const p=t.useCallback((e=>{let{target:{value:t}}=e;return c(""===t?r.emptyValue:t)}),[c,r.emptyValue]),f=t.useCallback((e=>{let{target:{value:t}}=e;return u(a,t)}),[u,a]),g=t.useCallback((e=>{let{target:{value:t}}=e;return m(a,t)}),[a,m]);return h.default.createElement("textarea",{id:a,name:a,className:"form-control",value:i||"",placeholder:o,required:n,disabled:l,readOnly:s,autoFocus:d,rows:r.rows,onBlur:f,onFocus:g,onChange:p})}M.defaultProps={autofocus:!1,options:{}};const K={PasswordWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"password",...e})},RadioWidget:function(e){let{options:a,value:r,required:o,disabled:i,readonly:n,autofocus:l=!1,onBlur:s,onFocus:d,onChange:c,id:u}=e;const m=Math.random().toString(),{enumOptions:p,enumDisabled:f,inline:g}=a,y=t.useCallback((e=>s(u,e.target.value)),[s,u]),S=t.useCallback((e=>d(u,e.target.value)),[d,u]);return h.default.createElement("div",{className:"field-radio-group",id:u},Array.isArray(p)&&p.map(((e,t)=>{const a=e.value===r,s=Array.isArray(f)&&-1!=f.indexOf(e.value),d=i||s||n?"disabled":"",p=h.default.createElement("span",null,h.default.createElement("input",{type:"radio",id:u+"-"+e.value,checked:a,name:m,required:o,value:e.value,disabled:i||s||n,autoFocus:l&&0===t,onChange:()=>c(e.value),onBlur:y,onFocus:S}),h.default.createElement("span",null,e.label));return g?h.default.createElement("label",{key:e.value,className:"radio-inline "+d},p):h.default.createElement("div",{key:e.value,className:"radio "+d},h.default.createElement("label",null,p))})))},UpDownWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"number",...e})},RangeWidget:function(e){const{value:t,registry:{templates:{BaseInputTemplate:a}}}=e;return h.default.createElement("div",{className:"field-range-wrapper"},h.default.createElement(a,{type:"range",...e}),h.default.createElement("span",{className:"range-view"},t))},SelectWidget:function(e){let{schema:r,id:o,options:i,value:n,required:l,disabled:s,readonly:d,multiple:c=!1,autofocus:u=!1,onChange:m,onBlur:p,onFocus:f,placeholder:g}=e;const{enumOptions:y,enumDisabled:S}=i,E=c?[]:"",b=t.useCallback((e=>{const t=j(e,c);return f(o,a.processSelectValue(r,t,i))}),[f,o,r,c,i]),v=t.useCallback((e=>{const t=j(e,c);return p(o,a.processSelectValue(r,t,i))}),[p,o,r,c,i]),C=t.useCallback((e=>{const t=j(e,c);return m(a.processSelectValue(r,t,i))}),[m,r,c,i]);return h.default.createElement("select",{id:o,name:o,multiple:c,className:"form-control",value:void 0===n?E:n,required:l,disabled:s||d,autoFocus:u,onBlur:v,onFocus:b,onChange:C},!c&&void 0===r.default&&h.default.createElement("option",{value:""},g),Array.isArray(y)&&y.map(((e,t)=>{let{value:a,label:r}=e;const o=S&&-1!=S.indexOf(a);return h.default.createElement("option",{key:t,value:a,disabled:o},r)})))},TextWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{...e})},DateWidget:function(e){const{onChange:r,options:o,registry:i}=e,n=a.getTemplate("BaseInputTemplate",i,o),l=t.useCallback((e=>r(e||void 0)),[r]);return h.default.createElement(n,{type:"date",...e,onChange:l})},DateTimeWidget:function(e){const{onChange:t,value:r,options:o,registry:i}=e,n=a.getTemplate("BaseInputTemplate",i,o);return h.default.createElement(n,{type:"datetime-local",...e,value:a.utcToLocal(r),onChange:e=>t(a.localToUTC(e))})},AltDateWidget:function(e){let{time:r=!1,disabled:o=!1,readonly:i=!1,autofocus:n=!1,options:l,id:s,registry:d,onBlur:c,onFocus:u,onChange:m,value:p}=e;const[f,g]=t.useReducer(((e,t)=>({...e,...t})),a.parseDateString(p,r));t.useEffect((()=>{p&&p!==a.toDateString(f,r)&&g(a.parseDateString(p,r))}),[p,f,r]),t.useEffect((()=>{(function(e){return Object.values(e).every((e=>-1!==e))})(f)&&m(a.toDateString(f,r))}),[f,r,m]);const y=t.useCallback(((e,t)=>{g({[e]:t})}),[]),S=t.useCallback((e=>{if(e.preventDefault(),o||i)return;const t=a.parseDateString((new Date).toJSON(),r);g(t)}),[o,i,r]),E=t.useCallback((e=>{e.preventDefault(),o||i||(g(a.parseDateString("",r)),m(void 0))}),[o,i,r,m]);return h.default.createElement("ul",{className:"list-inline"},function(e,t,a){void 0===a&&(a=[1900,(new Date).getFullYear()+2]);const{year:r,month:o,day:i,hour:n,minute:l,second:s}=e,d=[{type:"year",range:a,value:r},{type:"month",range:[1,12],value:o},{type:"day",range:[1,31],value:i}];return t&&d.push({type:"hour",range:[0,23],value:n},{type:"minute",range:[0,59],value:l},{type:"second",range:[0,59],value:s}),d}(f,r,l.yearsRange).map(((e,t)=>h.default.createElement("li",{key:t},h.default.createElement(q,{rootId:s,select:y,...e,disabled:o,readonly:i,registry:d,onBlur:c,onFocus:u,autofocus:n&&0===t})))),("undefined"===l.hideNowButton||!l.hideNowButton)&&h.default.createElement("li",null,h.default.createElement("a",{href:"#",className:"btn btn-info btn-now",onClick:S},"Now")),("undefined"===l.hideClearButton||!l.hideClearButton)&&h.default.createElement("li",null,h.default.createElement("a",{href:"#",className:"btn btn-warning btn-clear",onClick:E},"Clear")))},AltDateTimeWidget:function(e){let{time:t=!0,...a}=e;const{AltDateWidget:r}=a.registry.widgets;return h.default.createElement(r,{time:t,...a})},EmailWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"email",...e})},URLWidget:function(e){const{options:t,registry:r}=e,o=a.getTemplate("BaseInputTemplate",r,t);return h.default.createElement(o,{type:"url",...e})},TextareaWidget:M,HiddenWidget:function(e){let{id:t,value:a}=e;return h.default.createElement("input",{type:"hidden",id:t,name:t,value:void 0===a?"":a})},ColorWidget:function(e){const{disabled:t,readonly:r,options:o,registry:i}=e,n=a.getTemplate("BaseInputTemplate",i,o);return h.default.createElement(n,{type:"color",...e,disabled:t||r})},FileWidget:function(e){let{multiple:a,id:r,readonly:o,disabled:i,onChange:n,value:l,autofocus:s=!1,options:d}=e;const c=t.useMemo((()=>Array.isArray(l)?V(l):V([l])),[l]),[u,m]=t.useState(c),p=t.useCallback((e=>{var t;e.target.files&&(t=e.target.files,Promise.all(Array.from(t).map(_))).then((e=>{m(e);const t=e.map((e=>e.dataURL));n(a?t:t[0])}))}),[a,n]);return h.default.createElement("div",null,h.default.createElement("p",null,h.default.createElement("input",{id:r,name:r,type:"file",disabled:o||i,onChange:p,defaultValue:"",autoFocus:s,multiple:a,accept:d.accept?String(d.accept):void 0})),h.default.createElement(R,{filesInfo:u}))},CheckboxWidget:function(e){let{schema:r,uiSchema:o,options:i,id:n,value:l,disabled:s,readonly:d,label:c,autofocus:u=!1,onBlur:m,onFocus:p,onChange:f,registry:g}=e;const y=a.getTemplate("DescriptionFieldTemplate",g,i),S=a.schemaRequiresTrueValue(r),E=t.useCallback((e=>f(e.target.checked)),[f]),b=t.useCallback((e=>m(n,e.target.checked)),[m,n]),v=t.useCallback((e=>p(n,e.target.checked)),[p,n]);return h.default.createElement("div",{className:"checkbox "+(s||d?"disabled":"")},r.description&&h.default.createElement(y,{id:n+"__description",description:r.description,schema:r,uiSchema:o,registry:g}),h.default.createElement("label",null,h.default.createElement("input",{type:"checkbox",id:n,name:n,checked:void 0!==l&&l,required:S,disabled:s||d,autoFocus:u,onChange:E,onBlur:b,onFocus:v}),h.default.createElement("span",null,c)))},CheckboxesWidget:function(e){let{id:t,disabled:a,options:{inline:r=!1,enumOptions:o,enumDisabled:i},value:n,autofocus:l=!1,readonly:s,onChange:d}=e;return h.default.createElement("div",{className:"checkboxes",id:t},Array.isArray(o)&&o.map(((e,c)=>{const u=-1!==n.indexOf(e.value),m=Array.isArray(i)&&-1!=i.indexOf(e.value),p=a||m||s?"disabled":"",f=h.default.createElement("span",null,h.default.createElement("input",{type:"checkbox",id:t+"-"+e.value,name:t,checked:u,disabled:a||m||s,autoFocus:l&&0===c,onChange:t=>{const a=o.map((e=>{let{value:t}=e;return t}));d(t.target.checked?function(e,t,a){const r=a.indexOf(e);return t.slice(0,r).concat(e,t.slice(r)).sort(((e,t)=>Number(a.indexOf(e)>a.indexOf(t))))}(e.value,n,a):function(e,t){return t.filter((t=>t!==e))}(e.value,n))}}),h.default.createElement("span",null,e.label));return r?h.default.createElement("label",{key:e.value,className:"checkbox-inline "+p},f):h.default.createElement("div",{key:e.value,className:"checkbox "+p},h.default.createElement("label",null,f))})))}};function W(){return{fields:w,templates:I,widgets:K,rootSchema:{},formContext:{}}}class L extends t.Component{constructor(e){if(super(e),this.formElement=void 0,this.getUsedFormData=(e,t)=>{if(0===t.length&&"object"!=typeof e)return e;const a=p.default(e,t);return Array.isArray(e)?Object.keys(a).map((e=>a[e])):a},this.getFieldNames=(e,t)=>{const r=function(e,o,i){return void 0===o&&(o=[]),void 0===i&&(i=[""]),Object.keys(e).forEach((n=>{if("object"==typeof e[n]){const t=i.map((e=>e+"."+n));e[n][a.RJSF_ADDITONAL_PROPERTIES_FLAG]&&""!==e[n][a.NAME_KEY]?o.push(e[n][a.NAME_KEY]):r(e[n],o,t)}else n===a.NAME_KEY&&""!==e[n]&&i.forEach((e=>{e=e.replace(/^\./,"");const a=f.default(t,e);("object"!=typeof a||g.default(a))&&o.push(e)}))})),o};return r(e)},this.onChange=(e,t,r)=>{const{extraErrors:o,omitExtraData:i,liveOmit:n,noValidate:l,liveValidate:s,onChange:d}=this.props,{schemaUtils:c,schema:u}=this.state;(a.isObject(e)||Array.isArray(e))&&(e=this.getStateFromProps(this.props,e).formData);const m=!l&&s;let h={formData:e,schema:u},p=e;if(!0===i&&!0===n){const t=c.retrieveSchema(u,e),a=c.toPathSchema(t,"",e),r=this.getFieldNames(a,e);p=this.getUsedFormData(e,r),h={formData:p}}if(m){const e=this.validate(p);let t=e.errors,a=e.errorSchema;const r=t,i=a;if(o){const r=c.mergeValidationData(e,o);a=r.errorSchema,t=r.errors}h={formData:p,errors:t,errorSchema:a,schemaValidationErrors:r,schemaValidationErrorSchema:i}}else if(!l&&t){const e=o?a.mergeObjects(t,o,!0):t;h={formData:p,errorSchema:e,errors:c.getValidator().toErrorList(e)}}this.setState(h,(()=>d&&d({...this.state,...h},r)))},this.onBlur=(e,t)=>{const{onBlur:a}=this.props;a&&a(e,t)},this.onFocus=(e,t)=>{const{onFocus:a}=this.props;a&&a(e,t)},this.onSubmit=e=>{if(e.preventDefault(),e.target!==e.currentTarget)return;e.persist();const{omitExtraData:t,extraErrors:a,noValidate:r,onSubmit:o}=this.props;let{formData:i}=this.state;const{schema:n,schemaUtils:l}=this.state;if(!0===t){const e=l.retrieveSchema(n,i),t=l.toPathSchema(e,"",i),a=this.getFieldNames(t,i);i=this.getUsedFormData(i,a)}if(r||this.validateForm()){const t=a||{},r=a?l.getValidator().toErrorList(a):[];this.setState({formData:i,errors:r,errorSchema:t,schemaValidationErrors:[],schemaValidationErrorSchema:{}},(()=>{o&&o({...this.state,formData:i,status:"submitted"},e)}))}},!e.validator)throw new Error("A validator is required for Form functionality to work");this.state=this.getStateFromProps(e,e.formData),this.props.onChange&&!a.deepEquals(this.state.formData,this.props.formData)&&this.props.onChange(this.state),this.formElement=h.default.createRef()}UNSAFE_componentWillReceiveProps(e){const t=this.getStateFromProps(e,e.formData);a.deepEquals(t.formData,e.formData)||a.deepEquals(t.formData,this.state.formData)||!e.onChange||e.onChange(t),this.setState(t)}getStateFromProps(e,t){const r=this.state||{},o="schema"in e?e.schema:this.props.schema,i=("uiSchema"in e?e.uiSchema:this.props.uiSchema)||{},n=void 0!==t,l=n&&!e.noValidate&&("liveValidate"in e?e.liveValidate:this.props.liveValidate),s=o;let d=r.schemaUtils;d&&!d.doesSchemaUtilsDiffer(e.validator,s)||(d=a.createSchemaUtils(e.validator,s));const c=d.getDefaultFormState(o,t),u=d.retrieveSchema(o,c);let m,h,p=r.schemaValidationErrors,f=r.schemaValidationErrorSchema;if(l){const e=this.validate(c,o,d);m=e.errors,h=e.errorSchema,p=m,f=h}else{const t=e.noValidate?{errors:[],errorSchema:{}}:e.liveValidate?{errors:r.errors||[],errorSchema:r.errorSchema||{}}:{errors:r.schemaValidationErrors||[],errorSchema:r.schemaValidationErrorSchema||{}};m=t.errors,h=t.errorSchema}if(e.extraErrors){const t=d.mergeValidationData({errorSchema:h,errors:m},e.extraErrors);h=t.errorSchema,m=t.errors}const g=d.toIdSchema(u,i["ui:rootFieldId"],c,e.idPrefix,e.idSeparator);return{schemaUtils:d,schema:o,uiSchema:i,idSchema:g,formData:c,edit:n,errors:m,errorSchema:h,schemaValidationErrors:p,schemaValidationErrorSchema:f}}shouldComponentUpdate(e,t){return a.shouldRender(this,e,t)}validate(e,t,a){void 0===t&&(t=this.props.schema);const r=a||this.state.schemaUtils,{customValidate:o,transformErrors:i}=this.props,n=r.retrieveSchema(t,e);return r.getValidator().validateFormData(e,n,o,i)}renderErrors(e){const{errors:t,errorSchema:r,schema:o,uiSchema:i}=this.state,{showErrorList:n,formContext:l}=this.props,s=a.getUiOptions(i),d=a.getTemplate("ErrorListTemplate",e,s);return t&&t.length&&0!=n?h.default.createElement(d,{errors:t,errorSchema:r||{},schema:o,uiSchema:i,formContext:l}):null}getRegistry(){var e;const{schemaUtils:t}=this.state,{fields:a,templates:r,widgets:o,formContext:i}=W();return{fields:{...a,...this.props.fields},templates:{...r,...this.props.templates,ButtonTemplates:{...r.ButtonTemplates,...null===(e=this.props.templates)||void 0===e?void 0:e.ButtonTemplates}},widgets:{...o,...this.props.widgets},rootSchema:this.props.schema,formContext:this.props.formContext||i,schemaUtils:t}}submit(){this.formElement.current&&(this.formElement.current.dispatchEvent(new CustomEvent("submit",{cancelable:!0})),this.formElement.current.requestSubmit())}validateForm(){const{extraErrors:e,onError:t}=this.props,{formData:a}=this.state,{schemaUtils:r}=this.state,o=this.validate(a);let i=o.errors,n=o.errorSchema;const l=i,s=n;if(i.length>0){if(e){const t=r.mergeValidationData(o,e);n=t.errorSchema,i=t.errors}return this.setState({errors:i,errorSchema:n,schemaValidationErrors:l,schemaValidationErrorSchema:s},(()=>{t?t(i):console.error("Form validation failed",i)})),!1}return!0}render(){const{children:e,id:t,idPrefix:a,idSeparator:r,className:o="",tagName:i,name:n,method:l,target:s,action:d,autoComplete:c,enctype:u,acceptcharset:m,noHtml5Validate:p=!1,disabled:f=!1,readonly:g=!1,formContext:y,_internalFormWrapper:S}=this.props,{schema:E,uiSchema:b,formData:v,errorSchema:C,idSchema:F}=this.state,D=this.getRegistry(),{SchemaField:x}=D.fields,{SubmitButton:k}=D.templates.ButtonTemplates;return h.default.createElement(S||i||"form",{className:o||"rjsf",id:t,name:n,method:l,target:s,action:d,autoComplete:c,encType:u,acceptCharset:m,noValidate:p,onSubmit:this.onSubmit,as:S?i:void 0,ref:this.formElement},this.renderErrors(D),h.default.createElement(x,{name:"",schema:E,uiSchema:b,errorSchema:C,idSchema:F,idPrefix:a,idSeparator:r,formContext:y,formData:v,onChange:this.onChange,onBlur:this.onBlur,onFocus:this.onFocus,registry:D,disabled:f,readonly:g}),e||h.default.createElement(k,{uiSchema:b}))}}e.default=L,e.getDefaultRegistry=W,e.withTheme=function(e,a){return t.forwardRef(((t,r)=>{var o,i;let{fields:n,widgets:l,templates:s,...d}=t;return n={...e.fields,...n},l={...e.widgets,...l},s={...e.templates,...s,ButtonTemplates:{...null==e||null===(o=e.templates)||void 0===o?void 0:o.ButtonTemplates,...null===(i=s)||void 0===i?void 0:i.ButtonTemplates}},h.default.createElement(a||L,{...e,...d,fields:n,widgets:l,templates:s,ref:r})}))},Object.defineProperty(e,"__esModule",{value:!0})}));
 //# sourceMappingURL=core.umd.production.min.js.map
diff --git a/node_modules/@rjsf/core/dist/core.umd.production.min.js.map b/node_modules/@rjsf/core/dist/core.umd.production.min.js.map
index f3d3c0b..cd9dd26 100644
--- a/node_modules/@rjsf/core/dist/core.umd.production.min.js.map
+++ b/node_modules/@rjsf/core/dist/core.umd.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/index.ts","../src/components/fields/BooleanField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/index.ts","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","AnyOfField","Component","constructor","props","super","this","onOptionChange","option","selectedOption","parseInt","onChange","options","registry","schemaUtils","newOption","retrieveSchema","newFormData","guessType","type","properties","Object","assign","optionsToDiscard","slice","splice","unset","getDefaultFormState","undefined","getFieldId","setState","state","getMatchingOption","componentDidUpdate","prevProps","prevState","idSchema","deepEquals","$id","matchingOption","schema","oneOf","render","name","baseType","disabled","readonly","hideError","errorSchema","formContext","idPrefix","idSeparator","onBlur","onFocus","uiSchema","widgets","fields","SchemaField","_SchemaField","widget","uiOptions","getUiOptions","Widget","getWidget","optionSchema","enumOptions","index","label","title","value","React","createElement","className","id","default","trailingCharMatcherWithPrefix","trailingCharMatcher","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","onKeyChange","onDropPropertyClick","required","wasPropertyKeyModified","FieldTemplate","getTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","toIdSchema","handleFieldComponentChange","useCallback","newErrorSchema","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnsupportedFieldTemplate","reason","getFieldComponent","Boolean","readOnly","uiSchemaHideError","autofocus","keys","length","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","fieldUiSchema","omit","rawErrors","ADDITIONAL_PROPERTY_FLAG","description","help","hidden","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","isObject","MultiSchemaField","ArrayField","_getNewFormDataRow","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","onAddClick","event","preventDefault","newKeyedFormData","updatedKeyedFormData","onAddIndexClick","newKeyedFormDataRow","onDropIndexClick","idx","i","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","reOrderArray","onChangeForIndex","onSelectChange","static","nextProps","nextFormData","previousKeyedFormData","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","includes","canAddItem","formItems","addable","maxItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_schemaItems","itemsSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","Template","placeholder","multiple","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","ArraySchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","const","o","_schema$enum","schemaWithEnumNames","enums","enum","enumNames","every","v","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_this","arguments","additionalProperties","onPropertyChange","addedByAdditionalProperties","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldIdSchema","content","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","IconButton","iconType","icon","otherProps","Label","htmlFor","templates","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","_ref","itemProps","TitleFieldTemplate","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","BaseInputTemplate","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","ErrorListTemplate","error","stack","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","getValue","from","selected","TextareaWidget","handleBlur","handleFocus","_ref4","rows","defaultProps","PasswordWidget","RadioWidget","Math","random","toString","enumDisabled","inline","checked","itemDisabled","disabledCls","radio","UpDownWidget","RangeWidget","newValue","processSelectValue","TextWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","AltDateWidget","time","useReducer","action","parseDateString","toDateString","values","readyForChange","property","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","year","month","day","hour","minute","second","data","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","EmailWidget","URLWidget","HiddenWidget","ColorWidget","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","then","filesInfoEvent","accept","String","CheckboxWidget","schemaRequiresTrueValue","CheckboxesWidget","checkbox","at","sort","a","b","Number","selectValue","deselectValue","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","_this$props$templates","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/index.ts","../src/components/fields/BooleanField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/index.ts","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>, RJSFForm: any\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      if(RJSFForm) {\n        return (\n          <RJSFForm\n            {...themeProps}\n            {...directProps}\n            fields={fields}\n            widgets={widgets}\n            templates={templates}\n            ref={ref}\n        />\n        )\n      }\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","AnyOfField","Component","constructor","props","super","this","onOptionChange","option","selectedOption","parseInt","onChange","options","registry","schemaUtils","newOption","retrieveSchema","newFormData","guessType","type","properties","Object","assign","optionsToDiscard","slice","splice","unset","getDefaultFormState","undefined","getFieldId","setState","state","getMatchingOption","componentDidUpdate","prevProps","prevState","idSchema","deepEquals","$id","matchingOption","schema","oneOf","render","name","baseType","disabled","readonly","hideError","errorSchema","formContext","idPrefix","idSeparator","onBlur","onFocus","uiSchema","widgets","fields","SchemaField","_SchemaField","widget","uiOptions","getUiOptions","Widget","getWidget","optionSchema","enumOptions","index","label","title","value","React","createElement","className","id","default","trailingCharMatcherWithPrefix","trailingCharMatcher","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","onKeyChange","onDropPropertyClick","required","wasPropertyKeyModified","FieldTemplate","getTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","toIdSchema","handleFieldComponentChange","useCallback","newErrorSchema","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnsupportedFieldTemplate","reason","getFieldComponent","Boolean","readOnly","uiSchemaHideError","autofocus","keys","length","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","fieldUiSchema","omit","rawErrors","ADDITIONAL_PROPERTY_FLAG","description","help","hidden","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","isObject","MultiSchemaField","ArrayField","_getNewFormDataRow","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","onAddClick","event","preventDefault","newKeyedFormData","updatedKeyedFormData","onAddIndexClick","newKeyedFormDataRow","onDropIndexClick","idx","i","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","reOrderArray","onChangeForIndex","onSelectChange","static","nextProps","nextFormData","previousKeyedFormData","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","includes","canAddItem","formItems","addable","maxItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_schemaItems","itemsSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","Template","placeholder","multiple","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","ArraySchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","const","o","_schema$enum","schemaWithEnumNames","enums","enum","enumNames","every","v","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_this","arguments","additionalProperties","onPropertyChange","addedByAdditionalProperties","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldIdSchema","content","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","IconButton","iconType","icon","otherProps","Label","htmlFor","templates","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","_ref","itemProps","TitleFieldTemplate","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","BaseInputTemplate","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","ErrorListTemplate","error","stack","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","getValue","from","selected","TextareaWidget","handleBlur","handleFocus","_ref4","rows","defaultProps","PasswordWidget","RadioWidget","Math","random","toString","enumDisabled","inline","checked","itemDisabled","disabledCls","radio","UpDownWidget","RangeWidget","newValue","processSelectValue","TextWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","AltDateWidget","time","useReducer","action","parseDateString","toDateString","values","readyForChange","property","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","year","month","day","hour","minute","second","data","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","EmailWidget","URLWidget","HiddenWidget","ColorWidget","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","then","filesInfoEvent","accept","String","CheckboxWidget","schemaRequiresTrueValue","CheckboxesWidget","checkbox","at","sort","a","b","Number","selectValue","deselectValue","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","_this$props$templates","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","encType","acceptCharset","as","ref","themeProps","RJSFForm","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@rjsf/core/dist/index.d.ts b/node_modules/@rjsf/core/dist/index.d.ts
index 1fd603e..04e84f4 100644
--- a/node_modules/@rjsf/core/dist/index.d.ts
+++ b/node_modules/@rjsf/core/dist/index.d.ts
@@ -294,7 +294,7 @@ declare class Form<T = any, F = any> extends Component<FormProps<T, F>, FormStat
  */
 declare type ThemeProps<T = any, F = any> = Pick<FormProps<T, F>, "fields" | "templates" | "widgets" | "_internalFormWrapper">;
 /** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */
-declare function withTheme<T = any, F = any>(themeProps: ThemeProps<T, F>): React.ForwardRefExoticComponent<FormProps<T, F> & React.RefAttributes<Form<T, F>>>;
+declare function withTheme<T = any, F = any>(themeProps: ThemeProps<T, F>, RJSFForm: any): React.ForwardRefExoticComponent<FormProps<T, F> & React.RefAttributes<Form<T, F>>>;
 
 /** The default registry consists of all the fields, templates and widgets provided in the core implementation,
  * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a
