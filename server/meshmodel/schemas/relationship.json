{
  "$id": "https://schema.meshery.io/relationship.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "`Relationships` define the genealogy between one or more interconnected `Components`. Just as in familial relationships, MeshModel `Relationships` are represented in a variety of forms very much resembling familiar ancestral lineage, including `hierarchical` relationships such as direct parent and child relationships as well as any number of layers of indirect grandparent and grandchild relationships and branch relationships (e.g. aunt, uncle,..). Peer relationships like that of `sibling`s take on different types such as `network` and `dependency`.  Each type of `Relationship` has a `subtype`, `metadata`, `selectors` and some optional parameters.",
  "required": [
    "apiVersion",
    "kind",
    "subType",
    "model"
  ],
  "additionalProperties": false,
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string",
      "description": "API Version of the Relationship."
    },
    "kind": {
      "type": "string",
      "description": "Kind of the Relationship."
    },
    "metadata": {
      "type": "object",
      "description": "Metadata contains additional information associated with the Relationship.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the Relationship."
        }
      }
    },
    "model": {
      "$ref": "https://schema.meshery.io/model.json",
      "description": "Model of the Relationship."
    },
    "subType": {
      "type": "string",
      "description": "Used for further classification of Relationships. Type and SubType together identifies a Relationship."
    },
    "selectors": {
      "type": "object",
      "description": "Optional selectors used to match Components. Absence of a selector means that it is applied to all Components.",
      "additionalProperties": false,
      "properties": {
        "from": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "kind": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "version": {
                "$ref": "https://schema.meshery.io/core.json#versionString"
              },
              "patch": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "patchStrategy": {
                    "type": "string",
                    "enum": ["replace"]
                  },
                  "mutatorRef": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]." 
                    },
                    "description": "JSON ref to value from where patch should be applied."
                  }
                }
              }
            },
            "description": "Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning."
          }
        },
        "to": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "kind": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "version": {
                "$ref": "https://schema.meshery.io/core.json#versionString"
              },
              "patch": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "patchStrategy": {
                    "type": "string",
                    "enum": [
                      "replace"
                    ]
                  },
                  "mutatedRef": {
                    "type": "string",
                    "description": "JSON ref to value that should be patched."
                  }
                }
              }
            },
            "description": "Optional fields that are a part of the `to` selector. Absence of a field has an implied * meaning."
          }
        }
      }
    }
  }
}
