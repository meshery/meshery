{
  "$id": "https://schema.meshery.io/selectors.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Reusable relationships selectors schema elements",
  "from": {
    "type": "array",
    "items": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "kind": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "version": {
          "$ref": "https://schema.meshery.io/core.json#versionString"
        },
        "match": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "self": {
              "description": "Defines paths which should be matched with 'kind'.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "kind": {
              "description": "Optional property which defines paths which should be matched with 'self'. Here 'kind' is valid Component 'kind' belonging to the above specifed model. eg: If model is Kubernetes, valid 'kind' are 'Pod', 'Secret'. If the value for all paths of 'self' & 'kind' along with the value of all paths inside 'to.match.self' & 'to.match.kind are equal then the component with 'kind' act as an binded component. eg: ClusterRole, ClusterRoleBinding and ServiceAccount. If the paths for ClusterRole & ClusterRoleBinding and ServiceAccount & ClusterRoleBinding are equal then ClusterRoleBinding acts as an binding. Make sure the 'kind' value in 'from' and 'to' should be equal.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "patch": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "patchStrategy": {
              "type": "string",
              "enum": [
                "replace"
              ]
            },
            "mutatorRef": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
              },
              "description": "JSON ref to value from where patch should be applied."
            }
          }
        }
      },
      "description": "Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning."
    }
  },
  "to": {
    "type": "array",
    "items": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "kind": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "version": {
          "$ref": "https://schema.meshery.io/core.json#versionString"
        },
        "match": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "self": {
              "description": "Defines paths which should be matched with 'kind'.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "kind": {
              "description": "Optional property which defines paths which should be matched with 'self'. Here 'kind' is valid Component 'kind' belonging to the above specifed model. eg: If model is Kubernetes, valid 'kind' are 'Pod', 'Secret'. If the value for all paths of 'self' & 'kind' along with the value of all paths inside 'to.match.self' & 'to.match.kind are equal then the component with 'kind' act as an binded component. eg: ClusterRole, ClusterRoleBinding and ServiceAccount. If the paths for ClusterRole & ClusterRoleBinding and ServiceAccount & ClusterRoleBinding are equal then ClusterRoleBinding acts as an binding. Make sure the 'kind' value in 'from' and 'to' should be equal.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "patch": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "patchStrategy": {
              "type": "string",
              "enum": [
                "replace"
              ]
            },
            "mutatedRef": {
              "type": "string",
              "description": "JSON ref to value that should be patched."
            }
          }
        }
      },
      "description": "Optional fields that are a part of the `to` selector. Absence of a field has an implied * meaning."
    }
  }
}