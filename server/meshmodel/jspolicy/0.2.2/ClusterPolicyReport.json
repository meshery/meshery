{"kind":"ClusterPolicyReport","apiVersion":"wgpolicyk8s.io/v1alpha2","displayName":"Cluster Policy Report","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":false,"logoURL":"","model":"jspolicy","modelDisplayName":"JSpolicy","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"jspolicy","version":"0.2.2","displayName":"JSpolicy","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Uncategorized","metadata":null},"metadata":{"source_uri":"https://charts.loft.sh/charts/jspolicy-0.3.0-beta.1.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"ClusterPolicyReport is the Schema for the clusterpolicyreports API\",\n \"properties\": {\n  \"results\": {\n   \"description\": \"PolicyReportResult provides result details\",\n   \"items\": {\n    \"description\": \"PolicyReportResult provides the result for an individual policy\",\n    \"properties\": {\n     \"category\": {\n      \"description\": \"Category indicates policy category\",\n      \"type\": \"string\"\n     },\n     \"message\": {\n      \"description\": \"Message is a short user friendly description of the policy rule\",\n      \"type\": \"string\"\n     },\n     \"policy\": {\n      \"description\": \"Policy is the name of the policy\",\n      \"type\": \"string\"\n     },\n     \"properties\": {\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      },\n      \"description\": \"Properties provides additional information for the policy rule\",\n      \"type\": \"object\"\n     },\n     \"resourceSelector\": {\n      \"description\": \"ResourceSelector is an optional selector for policy results that apply to multiple resources. For example, a policy result may apply to all pods that match a label. Either a Resource or a ResourceSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\",\n      \"properties\": {\n       \"matchExpressions\": {\n        \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n        \"items\": {\n         \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n         \"properties\": {\n          \"key\": {\n           \"description\": \"key is the label key that the selector applies to.\",\n           \"type\": \"string\"\n          },\n          \"operator\": {\n           \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n           \"type\": \"string\"\n          },\n          \"values\": {\n           \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n           \"items\": {\n            \"type\": \"string\"\n           },\n           \"type\": \"array\"\n          }\n         },\n         \"required\": [\n          \"key\",\n          \"operator\"\n         ],\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"matchLabels\": {\n        \"additionalProperties\": {\n         \"type\": \"string\"\n        },\n        \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"resources\": {\n      \"description\": \"Resources is an optional reference to the resource checked by the policy and rule\",\n      \"items\": {\n       \"description\": \"ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, \\\"must refer only to types A and B\\\" or \\\"UID not honored\\\" or \\\"name must be restricted\\\". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .\",\n       \"properties\": {\n        \"apiVersion\": {\n         \"description\": \"API version of the referent.\",\n         \"type\": \"string\"\n        },\n        \"fieldPath\": {\n         \"description\": \"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\",\n         \"type\": \"string\"\n        },\n        \"kind\": {\n         \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\n         \"type\": \"string\"\n        },\n        \"name\": {\n         \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n         \"type\": \"string\"\n        },\n        \"namespace\": {\n         \"description\": \"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n         \"type\": \"string\"\n        },\n        \"resourceVersion\": {\n         \"description\": \"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\",\n         \"type\": \"string\"\n        },\n        \"uid\": {\n         \"description\": \"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"type\": \"array\"\n     },\n     \"result\": {\n      \"description\": \"Result indicates the outcome of the policy rule execution\",\n      \"enum\": [\n       \"pass\",\n       \"fail\",\n       \"warn\",\n       \"error\",\n       \"skip\"\n      ],\n      \"type\": \"string\"\n     },\n     \"rule\": {\n      \"description\": \"Rule is the name of the policy rule\",\n      \"type\": \"string\"\n     },\n     \"scored\": {\n      \"description\": \"Scored indicates if this policy rule is scored\",\n      \"type\": \"boolean\"\n     },\n     \"severity\": {\n      \"description\": \"Severity indicates policy severity\",\n      \"enum\": [\n       \"high\",\n       \"low\",\n       \"medium\"\n      ],\n      \"type\": \"string\"\n     },\n     \"source\": {\n      \"description\": \"Source is an identifier for the policy engine that manages this report\",\n      \"type\": \"string\"\n     },\n     \"timestamp\": {\n      \"description\": \"Timestamp indicates the time the result was found\",\n      \"properties\": {\n       \"nanos\": {\n        \"description\": \"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\",\n        \"format\": \"int32\",\n        \"type\": \"integer\"\n       },\n       \"seconds\": {\n        \"description\": \"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\",\n        \"format\": \"int64\",\n        \"type\": \"integer\"\n       }\n      },\n      \"required\": [\n       \"nanos\",\n       \"seconds\"\n      ],\n      \"type\": \"object\"\n     }\n    },\n    \"required\": [\n     \"policy\"\n    ],\n    \"type\": \"object\"\n   },\n   \"type\": \"array\"\n  },\n  \"scope\": {\n   \"description\": \"Scope is an optional reference to the report scope (e.g. a Deployment, Namespace, or Node)\",\n   \"properties\": {\n    \"apiVersion\": {\n     \"description\": \"API version of the referent.\",\n     \"type\": \"string\"\n    },\n    \"fieldPath\": {\n     \"description\": \"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\",\n     \"type\": \"string\"\n    },\n    \"kind\": {\n     \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\n     \"type\": \"string\"\n    },\n    \"name\": {\n     \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n     \"type\": \"string\"\n    },\n    \"namespace\": {\n     \"description\": \"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n     \"type\": \"string\"\n    },\n    \"resourceVersion\": {\n     \"description\": \"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\",\n     \"type\": \"string\"\n    },\n    \"uid\": {\n     \"description\": \"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"scopeSelector\": {\n   \"description\": \"ScopeSelector is an optional selector for multiple scopes (e.g. Pods). Either one of, or none of, but not both of, Scope or ScopeSelector should be specified.\",\n   \"properties\": {\n    \"matchExpressions\": {\n     \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n     \"items\": {\n      \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n      \"properties\": {\n       \"key\": {\n        \"description\": \"key is the label key that the selector applies to.\",\n        \"type\": \"string\"\n       },\n       \"operator\": {\n        \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n        \"type\": \"string\"\n       },\n       \"values\": {\n        \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n        \"items\": {\n         \"type\": \"string\"\n        },\n        \"type\": \"array\"\n       }\n      },\n      \"required\": [\n       \"key\",\n       \"operator\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"matchLabels\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"summary\": {\n   \"description\": \"PolicyReportSummary provides a summary of results\",\n   \"properties\": {\n    \"error\": {\n     \"description\": \"Error provides the count of policies that could not be evaluated\",\n     \"type\": \"integer\"\n    },\n    \"fail\": {\n     \"description\": \"Fail provides the count of policies whose requirements were not met\",\n     \"type\": \"integer\"\n    },\n    \"pass\": {\n     \"description\": \"Pass provides the count of policies whose requirements were met\",\n     \"type\": \"integer\"\n    },\n    \"skip\": {\n     \"description\": \"Skip indicates the count of policies that were not selected for evaluation\",\n     \"type\": \"integer\"\n    },\n    \"warn\": {\n     \"description\": \"Warn provides the count of unscored policies whose requirements were not met\",\n     \"type\": \"integer\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Cluster Policy Report\",\n \"type\": \"object\"\n}"}