{"kind":"MeshTrace","apiVersion":"v1alpha1","display-name":"Mesh Trace","format":"JSON","metadata":{"logo-URL":"","model":"kong-mesh","model-display-name":"Kong Mesh","primary-color":"","secondary-color":"","shape":"circle","svg_color":"","svg_white":""},"model":{"name":"kong-mesh","version":"2.0.1","display-name":"Kong Mesh","category":"Not Found","sub-category":"Not Found"},"schema":"{\n \"description\": \"Spec is the specification of the Kuma MeshTrace resource.\",\n \"properties\": {\n  \"default\": {\n   \"description\": \"MeshTrace configuration.\",\n   \"properties\": {\n    \"backends\": {\n     \"description\": \"A one element array of backend definition. Envoy allows configuring only 1 backend, so the natural way of representing that would be just one object. Unfortunately due to the reasons explained in MADR 009-tracing-policy this has to be a one element array for now.\",\n     \"items\": {\n      \"description\": \"Only one of zipkin or datadog can be used.\",\n      \"properties\": {\n       \"datadog\": {\n        \"description\": \"Datadog backend configuration.\",\n        \"properties\": {\n         \"splitService\": {\n          \"description\": \"Determines if datadog service name should be split based on traffic direction and destination. For example, with `splitService: true` and a `backend` service that communicates with a couple of databases, you would get service names like `backend_INBOUND`, `backend_OUTBOUND_db1`, and `backend_OUTBOUND_db2` in Datadog. Default: false\",\n          \"type\": \"boolean\"\n         },\n         \"url\": {\n          \"description\": \"Address of Datadog collector, only host and port are allowed (no paths, fragments etc.)\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"zipkin\": {\n        \"description\": \"Zipkin backend configuration.\",\n        \"properties\": {\n         \"apiVersion\": {\n          \"description\": \"Version of the API. values: httpJson, httpProto. Default: httpJson see https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/trace/v3/zipkin.proto#L66\",\n          \"type\": \"string\"\n         },\n         \"sharedSpanContext\": {\n          \"description\": \"Determines whether client and server spans will share the same span context. Default: true. https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/trace/v3/zipkin.proto#L63\",\n          \"type\": \"boolean\"\n         },\n         \"traceId128bit\": {\n          \"description\": \"Generate 128bit traces. Default: false\",\n          \"type\": \"boolean\"\n         },\n         \"url\": {\n          \"description\": \"Address of Zipkin collector.\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"nullable\": true,\n     \"type\": \"array\"\n    },\n    \"sampling\": {\n     \"description\": \"Sampling configuration. Sampling is the process by which a decision is made on whether to process/export a span or not.\",\n     \"properties\": {\n      \"client\": {\n       \"description\": \"Target percentage of requests that will be force traced if the 'x-client-trace-id' header is set. Default: 100% Mirror of client_sampling in Envoy https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L127-L133\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      },\n      \"overall\": {\n       \"description\": \"Target percentage of requests will be traced after all other sampling checks have been applied (client, force tracing, random sampling). This field functions as an upper limit on the total configured sampling rate. For instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1% of client requests with the appropriate headers to be force traced. Default: 100% Mirror of overall_sampling in Envoy https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L142-L150\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      },\n      \"random\": {\n       \"description\": \"Target percentage of requests that will be randomly selected for trace generation, if not requested by the client or not forced. Default: 100% Mirror of random_sampling in Envoy https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L135-L140\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"tags\": {\n     \"description\": \"Custom tags configuration. You can add custom tags to traces based on headers or literal values.\",\n     \"items\": {\n      \"description\": \"Custom tags configuration. Only one of literal or header can be used.\",\n      \"properties\": {\n       \"header\": {\n        \"description\": \"Tag taken from a header.\",\n        \"properties\": {\n         \"default\": {\n          \"description\": \"Default value to use if header is missing. If the default is missing and there is no value the tag will not be included.\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"Name of the header.\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"literal\": {\n        \"description\": \"Tag taken from literal value.\",\n        \"type\": \"string\"\n       },\n       \"name\": {\n        \"description\": \"Name of the tag.\",\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"nullable\": true,\n     \"type\": \"array\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"targetRef\": {\n   \"description\": \"TargetRef is a reference to the resource the policy takes an effect on. The resource could be either a real store object or virtual resource defined inplace.\",\n   \"properties\": {\n    \"kind\": {\n     \"description\": \"Kind of the referenced resource\",\n     \"enum\": [\n      \"Mesh\",\n      \"MeshSubset\",\n      \"MeshService\",\n      \"MeshServiceSubset\",\n      \"MeshGatewayRoute\"\n     ],\n     \"type\": \"string\"\n    },\n    \"mesh\": {\n     \"description\": \"Mesh is reserved for future use to identify cross mesh resources.\",\n     \"type\": \"string\"\n    },\n    \"name\": {\n     \"description\": \"Name of the referenced resource. Can only be used with kinds: `MeshService`, `MeshServiceSubset` and `MeshGatewayRoute`\",\n     \"type\": \"string\"\n    },\n    \"tags\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"description\": \"Tags used to select a subset of proxies by tags. Can only be used with kinds `MeshSubset` and `MeshServiceSubset`\",\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Mesh Trace\",\n \"type\": \"object\"\n}"}