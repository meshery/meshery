{"kind":"SGCluster","apiVersion":"v1beta1","display-name":"SG Cluster","format":"JSON","metadata":{},"model":{"name":"stackgres-operator","version":"1.4.0","display-name":"stackgres-operator","category":"","sub-category":""},"schema":"{\n \"properties\": {\n  \"configurations\": {\n   \"description\": \"Custom configuration to be applied to the cluster.\\n\",\n   \"properties\": {\n    \"sgBackupConfig\": {\n     \"description\": \"Name of the [SGBackupConfig](https://stackgres.io/doc/latest/04-postgres-cluster-management/04-backups/) to use for this cluster. This will define the backups policy, storage and retention, among others, to apply to this cluster. If not set, a default backup config will be used.\\n\",\n     \"type\": \"string\"\n    },\n    \"sgPoolingConfig\": {\n     \"description\": \"Name of the [SGPoolingConfig](https://stackgres.io/doc/latest/04-postgres-cluster-management/02-configuration-tuning/03-connection-pooling-configuration/) to use for this cluster. Each pod contains a sidecar with a connection pooler (currently: [PgBouncer](https://www.pgbouncer.org/)). The connection pooler is implemented as a sidecar.\\n\\nIf not selected, a default configuration will be used. Note that you may disable connection pooling altogether by setting to false the disableConnectionPooling property of the pods object.\\n\",\n     \"type\": \"string\"\n    },\n    \"sgPostgresConfig\": {\n     \"description\": \"Name of the [SGPostgresConfig](https://stackgres.io/doc/latest/04-postgres-cluster-management/02-configuration-tuning/02-postgres-configuration/) to use for this cluster. It must exist. If not set, a default Postgres config, for the major version selected, will be used.\\n\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"distributedLogs\": {\n   \"description\": \"StackGres features a functionality for all pods to send Postgres, Patroni and PgBouncer logs to a central (distributed) location, which is in turn another Postgres database. Logs can then be accessed via SQL interface or from the web UI. This section controls whether to enable this feature or not. If not enabled, logs are send to the pod's standard output.\",\n   \"properties\": {\n    \"sgDistributedLogs\": {\n     \"description\": \"Name of the [SGDistributedLogs](https://stackgres.io/doc/latest/04-postgres-cluster-management/06-distributed-logs/) to use for this cluster. It must exist.\\n\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"initialData\": {\n   \"description\": \"Cluster initialization data options. Cluster may be initialized empty, or from a backup restoration. You may also specify scripts to run on the database after cluster creation.\",\n   \"properties\": {\n    \"restore\": {\n     \"properties\": {\n      \"downloadDiskConcurrency\": {\n       \"description\": \"The backup fetch process may fetch several streams in parallel. Specify a value larger than one for parallel fetching.\\n\",\n       \"minimum\": 1,\n       \"type\": \"integer\"\n      },\n      \"fromBackup\": {\n       \"description\": \"Initialize the cluster data by restoring an existing backup. If not used, cluster will be initialized empty. Set to the UID of an existing [SGBackup](https://stackgres.io/doc/latest/04-postgres-cluster-management/04-backups/) from which to restore the data. The backup needs to be in the same namespace.\\n\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"scripts\": {\n     \"description\": \"A list of SQL scripts that will be executed in sequence, exactly once, when the database is bootstrap and/or after restore is completed.\\n\",\n     \"items\": {\n      \"description\": \"Scripts are executed in auto-commit mode with the user `postgres` in the specified database (or in database `postgres` if not specified).\\n\\nFields `script` and `scriptFrom` are mutually exclusive and only one of them is required.\\n\",\n      \"properties\": {\n       \"database\": {\n        \"description\": \"The database where the script will be executed. Defaults to the `postgres` database, if not specified.\\n\",\n        \"type\": \"string\"\n       },\n       \"name\": {\n        \"description\": \"The name of the script. Must be unique across this SGCluster.\\n\",\n        \"type\": \"string\"\n       },\n       \"script\": {\n        \"description\": \"The raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.\\n\",\n        \"type\": \"string\"\n       },\n       \"scriptFrom\": {\n        \"description\": \"Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.\\n\\nFields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.\\n\",\n        \"properties\": {\n         \"configMapKeyRef\": {\n          \"description\": \"A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.\\n\",\n          \"properties\": {\n           \"key\": {\n            \"description\": \"The key name within the ConfigMap that contains the SQL script to execute.\\n\",\n            \"type\": \"string\"\n           },\n           \"name\": {\n            \"description\": \"The name of the ConfigMap that contains the SQL script to execute.\\n\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"secretKeyRef\": {\n          \"description\": \"A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.\\n\",\n          \"properties\": {\n           \"key\": {\n            \"description\": \"The key of the secret to select from. Must be a valid secret key.\",\n            \"type\": \"string\"\n           },\n           \"name\": {\n            \"description\": \"Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"instances\": {\n   \"description\": \"Number of StackGres instances to be created. Each instance will contain one Postgres server. Out of all of the Postgres servers, one will be elected as the master, the rest will remain as read-only replicas.\\n\",\n   \"maximum\": 16,\n   \"minimum\": 1,\n   \"type\": \"integer\"\n  },\n  \"metadata\": {\n   \"description\": \"StackGres cluster created resources metadata information.\",\n   \"properties\": {\n    \"annotations\": {\n     \"description\": \"Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to resources created and managed by StackGres.\",\n     \"properties\": {\n      \"allResources\": {\n       \"description\": \"Annotations to attach to any resource created or managed by StackGres.\",\n       \"type\": \"object\"\n      },\n      \"pods\": {\n       \"description\": \"Annotations to attach to pods created or managed by StackGres.\",\n       \"type\": \"object\"\n      },\n      \"services\": {\n       \"description\": \"Annotations to attach to services created or managed by StackGres.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"nonProductionOptions\": {\n   \"properties\": {\n    \"disableClusterPodAntiAffinity\": {\n     \"description\": \"It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.\\n\\nThe same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres pod on a given K8s node. Set this property to true to allow more than one StackGres pod per node.\\n\",\n     \"type\": \"boolean\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"pods\": {\n   \"description\": \"Cluster pod's configuration\",\n   \"properties\": {\n    \"disableConnectionPooling\": {\n     \"description\": \"Set to `false` to avoid creating a connection pooling (using [PgBouncer](https://www.pgbouncer.org/)) sidecar.\",\n     \"type\": \"boolean\"\n    },\n    \"disableMetricsExporter\": {\n     \"description\": \"Set to `false` to avoid creating the Prometheus exporter sidecar. Recommended if you don't intent to use Prometheus for monitoring.\",\n     \"type\": \"boolean\"\n    },\n    \"disablePostgresUtil\": {\n     \"description\": \"Set to `false` to avoid creating the `postgres-util` sidecar. This sidecar contains usual Postgres administration utilities *that are not present in the main (`patroni`) container*, like `psql`. Only disable if you know what you are doing.\",\n     \"type\": \"boolean\"\n    },\n    \"metadata\": {\n     \"description\": \"Pod custom metadata information\",\n     \"properties\": {\n      \"labels\": {\n       \"description\": \"Additional labels for StackGres Pods to have\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"persistentVolume\": {\n     \"description\": \"Pod's persistent volume configuration\",\n     \"properties\": {\n      \"size\": {\n       \"description\": \"Size of the PersistentVolume to be created for each instance of the cluster. Size must be specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).\\n\",\n       \"pattern\": \"^[0-9]+(\\\\.[0-9]+)?(Mi|Gi|Ti)$\",\n       \"type\": \"string\"\n      },\n      \"storageClass\": {\n       \"description\": \"Name of an existing StorageClass in the K8s cluster, that will be used to create the PersistentVolumes for the instances of this cluster.\\n\",\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"size\"\n     ],\n     \"type\": \"object\"\n    },\n    \"scheduling\": {\n     \"description\": \"Pod custom scheduling configuration\",\n     \"properties\": {\n      \"nodeSelector\": {\n       \"description\": \"Pod custom node selector\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"persistentVolume\"\n   ],\n   \"type\": \"object\"\n  },\n  \"postgresServices\": {\n   \"description\": \"Kubernetes [services](https://kubernetes.io/docs/concepts/services-networking/service/) created or managed by StackGres.\",\n   \"properties\": {\n    \"primary\": {\n     \"description\": \"Configuration for the `-primary` service. It provides a stable connection (regardless of primary failures or switchovers) to the read-write Postgres server of the cluster.\",\n     \"properties\": {\n      \"annotations\": {\n       \"description\": \"Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to the `-primary` service.\",\n       \"type\": \"object\"\n      },\n      \"enabled\": {\n       \"description\": \"Specify if the `-primary` service should be created or not.\",\n       \"type\": \"boolean\"\n      },\n      \"type\": {\n       \"description\": \"Specify the type of K8s service to create.\",\n       \"enum\": [\n        \"ClusterIP\",\n        \"LoadBalancer\",\n        \"NodePort\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"replicas\": {\n     \"description\": \"Configuration for the `-replicas` service. It provides a stable connection (regardless of replica node failures) to any read-only Postgres server of the cluster. Read-only servers are load-balanced via this service.\",\n     \"properties\": {\n      \"annotations\": {\n       \"description\": \"Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to the `-replicas` service.\",\n       \"type\": \"object\"\n      },\n      \"enabled\": {\n       \"description\": \"SSpecify if the `-replicas` service should be created or not.\",\n       \"type\": \"boolean\"\n      },\n      \"type\": {\n       \"description\": \"Specify the type of K8s service to create.\",\n       \"enum\": [\n        \"ClusterIP\",\n        \"LoadBalancer\",\n        \"NodePort\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"postgresVersion\": {\n   \"description\": \"Postgres version to use for the new cluster. It can be either of:\\n*  The string 'latest', which will automatically select the latest major.minor Postgres version.\\n*  A major version, like '12' or '11', which will select that major version and the latest minor version.\\n*  A specific major.minor version, like '12.2'.\\n\",\n   \"type\": \"string\"\n  },\n  \"prometheusAutobind\": {\n   \"description\": \"If enabled, a ServiceMonitor will be created for each Prometheus instance found in order to collect metrics.\\n\",\n   \"type\": \"boolean\"\n  },\n  \"sgInstanceProfile\": {\n   \"description\": \"Name of the [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-resource-profiles/) to use. A SGInstanceProfile defines CPU and memory limits. Must exist before creating the cluster. If you don't select a profile, a default (currently: 1 core, 2 GiB RAM) one will be used.\\n\",\n   \"type\": \"string\"\n  }\n },\n \"required\": [\n  \"instances\",\n  \"postgresVersion\",\n  \"pods\"\n ],\n \"title\": \"SG Cluster\",\n \"type\": \"object\"\n}"}