{"kind":"ImageUpdateAutomation","apiVersion":"image.toolkit.fluxcd.io/v1beta1","displayName":"Image Update Automation","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"isNamespaced":true},"model":{"name":"uffizzi-app","version":"1.2.1","displayName":"uffizzi-app","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"","metadata":null},"metadata":{"source_uri":"https://github.com/UffizziCloud/uffizzi/releases/download/uffizzi-app-1.3.0/uffizzi-app-1.3.0.tgz"}},"schema":"{\n \"description\": \"ImageUpdateAutomation is the Schema for the imageupdateautomations API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation\",\n   \"properties\": {\n    \"git\": {\n     \"description\": \"GitSpec contains all the git-specific definitions. This is technically optional, but in practice mandatory until there are other kinds of source allowed.\",\n     \"properties\": {\n      \"checkout\": {\n       \"description\": \"Checkout gives the parameters for cloning the git repository, ready to make changes. If not present, the `spec.ref` field from the referenced `GitRepository` or its default will be used.\",\n       \"properties\": {\n        \"ref\": {\n         \"description\": \"Reference gives a branch, tag or commit to clone from the Git repository.\",\n         \"properties\": {\n          \"branch\": {\n           \"description\": \"Branch to check out, defaults to 'master' if no other field is defined.\",\n           \"type\": \"string\"\n          },\n          \"commit\": {\n           \"description\": \"Commit SHA to check out, takes precedence over all reference fields. \\n This can be combined with Branch to shallow clone the branch, in which the commit is expected to exist.\",\n           \"type\": \"string\"\n          },\n          \"name\": {\n           \"description\": \"Name of the reference to check out; takes precedence over Branch, Tag and SemVer. \\n It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description Examples: \\\"refs/heads/main\\\", \\\"refs/tags/v0.1.0\\\", \\\"refs/pull/420/head\\\", \\\"refs/merge-requests/1/head\\\"\",\n           \"type\": \"string\"\n          },\n          \"semver\": {\n           \"description\": \"SemVer tag expression to check out, takes precedence over Tag.\",\n           \"type\": \"string\"\n          },\n          \"tag\": {\n           \"description\": \"Tag to check out, takes precedence over Branch.\",\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"ref\"\n       ],\n       \"type\": \"object\"\n      },\n      \"commit\": {\n       \"description\": \"Commit specifies how to commit to the git repository.\",\n       \"properties\": {\n        \"author\": {\n         \"description\": \"Author gives the email and optionally the name to use as the author of commits.\",\n         \"properties\": {\n          \"email\": {\n           \"description\": \"Email gives the email to provide when making a commit.\",\n           \"type\": \"string\"\n          },\n          \"name\": {\n           \"description\": \"Name gives the name to provide when making a commit.\",\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"email\"\n         ],\n         \"type\": \"object\"\n        },\n        \"messageTemplate\": {\n         \"description\": \"MessageTemplate provides a template for the commit message, into which will be interpolated the details of the change made.\",\n         \"type\": \"string\"\n        },\n        \"signingKey\": {\n         \"description\": \"SigningKey provides the option to sign commits with a GPG key\",\n         \"properties\": {\n          \"secretRef\": {\n           \"description\": \"SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation.\",\n           \"properties\": {\n            \"name\": {\n             \"description\": \"Name of the referent.\",\n             \"type\": \"string\"\n            }\n           },\n           \"required\": [\n            \"name\"\n           ],\n           \"type\": \"object\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"author\"\n       ],\n       \"type\": \"object\"\n      },\n      \"push\": {\n       \"description\": \"Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch` or its default.\",\n       \"properties\": {\n        \"branch\": {\n         \"description\": \"Branch specifies that commits should be pushed to the branch named. The branch is created using `.spec.checkout.branch` as the starting point, if it doesn't already exist.\",\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"branch\"\n       ],\n       \"type\": \"object\"\n      }\n     },\n     \"required\": [\n      \"commit\"\n     ],\n     \"type\": \"object\"\n    },\n    \"interval\": {\n     \"description\": \"Interval gives an lower bound for how often the automation run should be attempted.\",\n     \"pattern\": \"^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))+$\",\n     \"type\": \"string\"\n    },\n    \"sourceRef\": {\n     \"description\": \"SourceRef refers to the resource giving access details to a git repository.\",\n     \"properties\": {\n      \"apiVersion\": {\n       \"description\": \"API version of the referent.\",\n       \"type\": \"string\"\n      },\n      \"kind\": {\n       \"default\": \"GitRepository\",\n       \"description\": \"Kind of the referent.\",\n       \"enum\": [\n        \"GitRepository\"\n       ],\n       \"type\": \"string\"\n      },\n      \"name\": {\n       \"description\": \"Name of the referent.\",\n       \"type\": \"string\"\n      },\n      \"namespace\": {\n       \"description\": \"Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.\",\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"kind\",\n      \"name\"\n     ],\n     \"type\": \"object\"\n    },\n    \"suspend\": {\n     \"description\": \"Suspend tells the controller to not run this automation, until it is unset (or set to false). Defaults to false.\",\n     \"type\": \"boolean\"\n    },\n    \"update\": {\n     \"default\": {\n      \"strategy\": \"Setters\"\n     },\n     \"description\": \"Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value.\",\n     \"properties\": {\n      \"path\": {\n       \"description\": \"Path to the directory containing the manifests to be updated. Defaults to 'None', which translates to the root path of the GitRepositoryRef.\",\n       \"type\": \"string\"\n      },\n      \"strategy\": {\n       \"default\": \"Setters\",\n       \"description\": \"Strategy names the strategy to be used.\",\n       \"enum\": [\n        \"Setters\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"strategy\"\n     ],\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"interval\",\n    \"sourceRef\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Image Update Automation\",\n \"type\": \"object\"\n}"}