{
  "capabilities": null,
  "component": {
   "kind": "JWTAuthenticator",
   "schema": "{\n \"description\": \"JWTAuthenticator describes the configuration of a JWT authenticator.\\n\\n\\nUpon receiving a signed JWT, a JWTAuthenticator will performs some validation on it (e.g., valid\\nsignature, existence of claims, etc.) and extract the username and groups from the token.\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Spec for configuring the authenticator.\",\n   \"properties\": {\n    \"audience\": {\n     \"description\": \"Audience is the required value of the \\\"aud\\\" JWT claim.\",\n     \"minLength\": 1,\n     \"type\": \"string\"\n    },\n    \"claims\": {\n     \"description\": \"Claims allows customization of the claims that will be mapped to user identity\\nfor Kubernetes access.\",\n     \"properties\": {\n      \"groups\": {\n       \"description\": \"Groups is the name of the claim which should be read to extract the user's\\ngroup membership from the JWT token. When not specified, it will default to \\\"groups\\\".\",\n       \"type\": \"string\"\n      },\n      \"username\": {\n       \"description\": \"Username is the name of the claim which should be read to extract the\\nusername from the JWT token. When not specified, it will default to \\\"username\\\".\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"issuer\": {\n     \"description\": \"Issuer is the OIDC issuer URL that will be used to discover public signing keys. Issuer is\\nalso used to validate the \\\"iss\\\" JWT claim.\",\n     \"minLength\": 1,\n     \"pattern\": \"^https://\",\n     \"type\": \"string\"\n    },\n    \"tls\": {\n     \"description\": \"TLS configuration for communicating with the OIDC provider.\",\n     \"properties\": {\n      \"certificateAuthorityData\": {\n       \"description\": \"X.509 Certificate Authority (base64-encoded PEM bundle). If omitted, a default set of system roots will be trusted.\",\n       \"type\": \"string\"\n      },\n      \"certificateAuthorityDataSource\": {\n       \"description\": \"Reference to a CA bundle in a secret or a configmap.\\nAny changes to the CA bundle in the secret or configmap will be dynamically reloaded.\",\n       \"properties\": {\n        \"key\": {\n         \"description\": \"Key is the key name within the secret or configmap from which to read the CA bundle.\\nThe value found at this key in the secret or configmap must not be empty, and must be a valid PEM-encoded\\ncertificate bundle.\",\n         \"minLength\": 1,\n         \"type\": \"string\"\n        },\n        \"kind\": {\n         \"description\": \"Kind configures whether the CA bundle is being sourced from a Kubernetes secret or a configmap.\\nAllowed values are \\\"Secret\\\" or \\\"ConfigMap\\\".\\n\\\"ConfigMap\\\" uses a Kubernetes configmap to source CA Bundles.\\n\\\"Secret\\\" uses Kubernetes secrets of type kubernetes.io/tls or Opaque to source CA Bundles.\",\n         \"enum\": [\n          \"Secret\",\n          \"ConfigMap\"\n         ],\n         \"type\": \"string\"\n        },\n        \"name\": {\n         \"description\": \"Name is the resource name of the secret or configmap from which to read the CA bundle.\\nThe referenced secret or configmap must be created in the same namespace where Pinniped Concierge is installed.\",\n         \"minLength\": 1,\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"key\",\n        \"kind\",\n        \"name\"\n       ],\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"audience\",\n    \"issuer\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"JWT Authenticator\",\n \"type\": \"object\"\n}",
   "version": "authentication.concierge.pinniped.dev/v1alpha1"
  },
  "configuration": null,
  "description": "",
  "displayName": "JWT Authenticator",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "defaultData": "",
   "genealogy": "",
   "isAnnotation": false,
   "published": false,
   "shapePolygonPoints": "",
   "styleOverrides": "",
   "styles": ""
  },
  "model": {
   "category": {
    "name": "Security \u0026 Compliance"
   },
   "displayName": "Pinniped",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "defaultData": "",
    "isAnnotation": false,
    "primaryColor": "#00B39F",
    "secondaryColor": "#00D3A9",
    "shape": "circle",
    "shapePolygonPoints": "",
    "styleOverrides": "",
    "styles": "",
    "svgColor": "",
    "svgComplete": "",
    "svgWhite": ""
   },
   "model": {
    "version": "2.2.15"
   },
   "name": "pinniped",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "subCategory": "Key Management",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "ignored",
  "styles": {
   "primaryColor": "#00B39F",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "",
   "svgWhite": ""
  },
  "version": "v1.0.0"
 }