{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "ServiceLevelObjective",
   "schema": "{\n \"description\": \"ServiceLevelObjective is the Schema for the ServiceLevelObjectives API.\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"ServiceLevelObjectiveSpec defines the desired state of ServiceLevelObjective.\",\n   \"properties\": {\n    \"alerting\": {\n     \"description\": \"Alerting customizes the alerting rules generated by Pyrra.\",\n     \"properties\": {\n      \"absent\": {\n       \"default\": true,\n       \"type\": \"boolean\"\n      },\n      \"burnrates\": {\n       \"default\": true,\n       \"type\": \"boolean\"\n      },\n      \"disabled\": {\n       \"description\": \"Disabled is used to disable the generation of alerts. Recording rules are still generated.\",\n       \"type\": \"boolean\"\n      },\n      \"name\": {\n       \"description\": \"Name is used as the name of the alert generated by Pyrra. Defaults to \\\"ErrorBudgetBurn\\\".\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"description\": {\n     \"description\": \"Description describes the ServiceLevelObjective in more detail and gives extra context for engineers that might not directly work on the service.\",\n     \"type\": \"string\"\n    },\n    \"indicator\": {\n     \"description\": \"ServiceLevelIndicator is the underlying data source that indicates how the service is doing. This will be a Prometheus metric with specific selectors for your service.\",\n     \"properties\": {\n      \"bool_gauge\": {\n       \"description\": \"BoolGauge is the indicator that measures whether a boolean gauge is successful.\",\n       \"properties\": {\n        \"grouping\": {\n         \"description\": \"Total is the metric that returns how many requests there are in total.\",\n         \"items\": {\n          \"type\": \"string\"\n         },\n         \"type\": \"array\"\n        },\n        \"metric\": {\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"metric\"\n       ],\n       \"type\": \"object\"\n      },\n      \"latency\": {\n       \"description\": \"Latency is the indicator that measures a certain percentage to be faster than the expected latency.\",\n       \"properties\": {\n        \"grouping\": {\n         \"description\": \"Grouping allows an SLO to be defined for many SLI at once, like HTTP handlers for example.\",\n         \"items\": {\n          \"type\": \"string\"\n         },\n         \"type\": \"array\"\n        },\n        \"success\": {\n         \"description\": \"Success is the metric that returns how many errors there are.\",\n         \"properties\": {\n          \"metric\": {\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"metric\"\n         ],\n         \"type\": \"object\"\n        },\n        \"total\": {\n         \"description\": \"Total is the metric that returns how many requests there are in total.\",\n         \"properties\": {\n          \"metric\": {\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"metric\"\n         ],\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"success\",\n        \"total\"\n       ],\n       \"type\": \"object\"\n      },\n      \"latencyNative\": {\n       \"description\": \"LatencyNative is the indicator that measures a certain percentage to be faster than the expected latency. This uses the new native histograms in Prometheus.\",\n       \"properties\": {\n        \"grouping\": {\n         \"description\": \"Grouping allows an SLO to be defined for many SLI at once, like HTTP handlers for example.\",\n         \"items\": {\n          \"type\": \"string\"\n         },\n         \"type\": \"array\"\n        },\n        \"latency\": {\n         \"description\": \"Latency the requests should be faster than.\",\n         \"type\": \"string\"\n        },\n        \"total\": {\n         \"description\": \"Total is the metric that returns how many requests there are in total.\",\n         \"properties\": {\n          \"metric\": {\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"metric\"\n         ],\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"latency\",\n        \"total\"\n       ],\n       \"type\": \"object\"\n      },\n      \"ratio\": {\n       \"description\": \"Ratio is the indicator that measures against errors / total events.\",\n       \"properties\": {\n        \"errors\": {\n         \"description\": \"Errors is the metric that returns how many errors there are.\",\n         \"properties\": {\n          \"metric\": {\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"metric\"\n         ],\n         \"type\": \"object\"\n        },\n        \"grouping\": {\n         \"description\": \"Grouping allows an SLO to be defined for many SLI at once, like HTTP handlers for example.\",\n         \"items\": {\n          \"type\": \"string\"\n         },\n         \"type\": \"array\"\n        },\n        \"total\": {\n         \"description\": \"Total is the metric that returns how many requests there are in total.\",\n         \"properties\": {\n          \"metric\": {\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"metric\"\n         ],\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"errors\",\n        \"total\"\n       ],\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"target\": {\n     \"description\": \"Target is a string that's casted to a float64 between 0 - 100. It represents the desired availability of the service in the given window. float64 are not supported: https://github.com/kubernetes-sigs/controller-tools/issues/245\",\n     \"type\": \"string\"\n    },\n    \"window\": {\n     \"description\": \"Window within which the Target is supposed to be kept. Usually something like 1d, 7d or 28d.\",\n     \"type\": \"string\"\n    }\n   },\n   \"required\": [\n    \"indicator\",\n    \"target\",\n    \"window\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Service Level Objective\",\n \"type\": \"object\"\n}",
   "version": "pyrra.dev/v1alpha1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Service Level Objective",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false
  },
  "model": {
   "category": {
    "name": "Uncategorized"
   },
   "displayName": "Pyrra",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "source_uri": "https://github.com/rlex/helm-charts/releases/download/pyrra-0.11.0/pyrra-0.11.0.tgz",
    "svgColor": "",
    "svgWhite": ""
   },
   "model": {
    "version": "0.6.0"
   },
   "name": "pyrra",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#00B39F",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "",
   "svgWhite": ""
  },
  "version": "v1.0.0"
 }