{"kind":"Trickster","apiVersion":"trickstercache.org/v1alpha1","displayName":"Trickster","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"ace","modelDisplayName":"Appscode Container Engine","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Runtime","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"ace","version":"2022.6.14","displayName":"Appscode Container Engine","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Platform","metadata":null},"metadata":{"source_uri":"https://charts.appscode.com/stable/ace/ace-v2023.12.5.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"Trickster is the Schema for the tricksters API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"TricksterSpec defines the desired state of Trickster\",\n   \"properties\": {\n    \"backend_selector\": {\n     \"description\": \"Backends is a map of BackendOptionss Backends map[string]*bo.Options `json:\\\"backends,omitempty\\\"`\",\n     \"properties\": {\n      \"matchExpressions\": {\n       \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"matchLabels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"cache_selector\": {\n     \"description\": \"Caches is a map of CacheConfigs Caches map[string]*cache.Options `json:\\\"caches,omitempty\\\"`\",\n     \"properties\": {\n      \"matchExpressions\": {\n       \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"matchLabels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"frontend\": {\n     \"description\": \"ProxyServer is provides configurations about the Proxy Front End\",\n     \"properties\": {\n      \"connections_limit\": {\n       \"description\": \"ConnectionsLimit indicates how many concurrent front end connections trickster will handle at any time\",\n       \"type\": \"integer\"\n      },\n      \"listen_address\": {\n       \"description\": \"ListenAddress is IP address for the main http listener for the application\",\n       \"type\": \"string\"\n      },\n      \"listen_port\": {\n       \"description\": \"ListenPort is TCP Port for the main http listener for the application\",\n       \"type\": \"integer\"\n      },\n      \"tls_listen_address\": {\n       \"description\": \"TLSListenAddress is IP address for the tls  http listener for the application\",\n       \"type\": \"string\"\n      },\n      \"tls_listen_port\": {\n       \"description\": \"TLSListenPort is the TCP Port for the tls http listener for the application\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"logging\": {\n     \"description\": \"Logging provides configurations that affect logging behavior\",\n     \"properties\": {\n      \"log_file\": {\n       \"description\": \"LogFile provides the filepath to the instances's logfile. Set as empty string to Log to Console\",\n       \"type\": \"string\"\n      },\n      \"log_level\": {\n       \"description\": \"LogLevel provides the most granular level (e.g., DEBUG, INFO, ERROR) to log\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"main\": {\n     \"description\": \"Main is the primary MainConfig section\",\n     \"properties\": {\n      \"config_handler_path\": {\n       \"description\": \"ConfigHandlerPath provides the path to register the Config Handler for outputting the running configuration\",\n       \"type\": \"string\"\n      },\n      \"health_handler_path\": {\n       \"description\": \"HeatlHandlerPath provides the base Health Check Handler path\",\n       \"type\": \"string\"\n      },\n      \"instance_id\": {\n       \"description\": \"InstanceID represents a unique ID for the current instance, when multiple instances on the same host\",\n       \"type\": \"integer\"\n      },\n      \"ping_handler_path\": {\n       \"description\": \"PingHandlerPath provides the path to register the Ping Handler for checking that Trickster is running\",\n       \"type\": \"string\"\n      },\n      \"pprof_server\": {\n       \"description\": \"PprofServer provides the name of the http listener that will host the pprof debugging routes Options are: \\\"metrics\\\", \\\"reload\\\", \\\"both\\\", or \\\"off\\\"; default is both\",\n       \"type\": \"string\"\n      },\n      \"reload_handler_path\": {\n       \"description\": \"ReloadHandlerPath provides the path to register the Config Reload Handler\",\n       \"type\": \"string\"\n      },\n      \"server_name\": {\n       \"description\": \"ServerName represents the server name that is conveyed in Via headers to upstream origins defaults to os.Hostname\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"metrics\": {\n     \"description\": \"Metrics provides configurations for collecting Metrics about the application\",\n     \"properties\": {\n      \"listen_address\": {\n       \"description\": \"ListenAddress is IP address from which the Application Metrics are available for pulling at /metrics\",\n       \"type\": \"string\"\n      },\n      \"listen_port\": {\n       \"description\": \"ListenPort is TCP Port from which the Application Metrics are available for pulling at /metrics\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"nats\": {\n     \"description\": \"Nats is provides for transport via NATS.io\",\n     \"properties\": {\n      \"address\": {\n       \"type\": \"string\"\n      },\n      \"credPath\": {\n       \"type\": \"string\"\n      },\n      \"passwordPath\": {\n       \"type\": \"string\"\n      },\n      \"username\": {\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"address\"\n     ],\n     \"type\": \"object\"\n    },\n    \"negative_caches\": {\n     \"additionalProperties\": {\n      \"additionalProperties\": {\n       \"type\": \"integer\"\n      },\n      \"description\": \"Config is a collection of response codes and their TTLs in milliseconds\",\n      \"type\": \"object\"\n     },\n     \"description\": \"NegativeCacheConfigs is a map of NegativeCacheConfigs\",\n     \"type\": \"object\"\n    },\n    \"reloading\": {\n     \"description\": \"ReloadConfig provides configurations for in-process config reloading\",\n     \"properties\": {\n      \"drain_timeout_ms\": {\n       \"description\": \"DrainTimeoutMS provides the duration to wait for all sessions to drain before closing old resources following a reload\",\n       \"type\": \"integer\"\n      },\n      \"handler_path\": {\n       \"description\": \"ReloadHandlerPath provides the path to register the Config Reload Handler\",\n       \"type\": \"string\"\n      },\n      \"listen_address\": {\n       \"description\": \"ListenAddress is IP address from which the Reload API is available at ReloadHandlerPath\",\n       \"type\": \"string\"\n      },\n      \"listen_port\": {\n       \"description\": \"ListenPort is TCP Port from which the Reload API is available at ReloadHandlerPath\",\n       \"type\": \"integer\"\n      },\n      \"rate_limit_ms\": {\n       \"description\": \"RateLimitMS limits the # of handled config reload HTTP requests to 1 per CheckRateMS if multiple HTTP requests are received in the rate limit window, only the first is handled This prevents a bad actor from stating the config file with millions of concurrent requests The rate limit does not apply to SIGHUP-based reload requests\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"request_rewriter_selector\": {\n     \"description\": \"RequestRewriters is a map of the Rewriters RequestRewriters map[string]*rwopts.Options `json:\\\"request_rewriters,omitempty\\\"`\",\n     \"properties\": {\n      \"matchExpressions\": {\n       \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"matchLabels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"rule_selector\": {\n     \"description\": \"Rules is a map of the Rules Rules map[string]*rule.Options `json:\\\"rules,omitempty\\\"`\",\n     \"properties\": {\n      \"matchExpressions\": {\n       \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"matchLabels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"secret\": {\n     \"description\": \"secret information about the secret data to project\",\n     \"properties\": {\n      \"items\": {\n       \"description\": \"items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\",\n       \"items\": {\n        \"description\": \"Maps a string key to a path within a volume.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the key to project.\",\n          \"type\": \"string\"\n         },\n         \"mode\": {\n          \"description\": \"mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n         },\n         \"path\": {\n          \"description\": \"path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\",\n          \"type\": \"string\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"path\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"name\": {\n       \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\",\n       \"type\": \"string\"\n      },\n      \"optional\": {\n       \"description\": \"optional field specify whether the Secret or its key must be defined\",\n       \"type\": \"boolean\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"tracing_config_selector\": {\n     \"description\": \"TracingConfigs provides the distributed tracing configuration TracingConfigs map[string]*tracing.Options `json:\\\"tracing,omitempty\\\"`\",\n     \"properties\": {\n      \"matchExpressions\": {\n       \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"matchLabels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Trickster\",\n \"type\": \"object\"\n}"}