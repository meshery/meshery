{"kind":"TricksterBackend","apiVersion":"trickstercache.org/v1alpha1","displayName":"Trickster Backend","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"ace","modelDisplayName":"Appscode Container Engine","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Runtime","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"ace","version":"2022.6.14","displayName":"Appscode Container Engine","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Platform","metadata":null},"metadata":{"source_uri":"https://charts.appscode.com/stable/ace/ace-v2023.12.5.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"TricksterBackend is the Schema for the tricksterbackends API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"TricksterBackendSpec defines the desired state of TricksterBackend\",\n   \"properties\": {\n    \"alb\": {\n     \"description\": \"ALBOptions holds the options for ALBs\",\n     \"properties\": {\n      \"fgr_status_codes\": {\n       \"description\": \"FGRStatusCodes provides an explicit list of status codes considered \\\"good\\\" when using the First Good Response (fgr) methodology. By default, any code \\u003c 400 is good.\",\n       \"items\": {\n        \"type\": \"integer\"\n       },\n       \"type\": \"array\"\n      },\n      \"healthy_floor\": {\n       \"description\": \"HealthyFloor is the minimum health check status value to be considered Available in the pool -1 : all pool members are Available regardless of health check status 0 (default) : pool members with status of unknown (0) or healthy (1) are Available 1 : only pool members with status of healthy (1) are Available unknown means the first hc hasn't returned yet, or (more likely) HealthCheck Interval on target backend is not set\",\n       \"type\": \"integer\"\n      },\n      \"mechanism\": {\n       \"description\": \"MechanismName indicates the name of the load balancing mechanism\",\n       \"type\": \"string\"\n      },\n      \"output_format\": {\n       \"description\": \"OutputFormat accompanies the tsmerge Mechanism to indicate the provider output format options include any valid time seres backend like prometheus, influxdb or clickhouse\",\n       \"type\": \"string\"\n      },\n      \"pool\": {\n       \"description\": \"Pool provides the list of backend names to be used by the load balancer\",\n       \"items\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"array\"\n      }\n     },\n     \"required\": [\n      \"fgr_status_codes\"\n     ],\n     \"type\": \"object\"\n    },\n    \"backfill_tolerance_ms\": {\n     \"description\": \"BackfillToleranceMS prevents values with timestamps newer than the provided number of milliseconds from being cached. this allows propagation of upstream backfill operations that modify recently-cached data\",\n     \"format\": \"int64\",\n     \"type\": \"integer\"\n    },\n    \"backfill_tolerance_points\": {\n     \"description\": \"BackfillTolerancePoints is similar to the MS version, except that it's final value is dependent on the query step value to determine the relative duration of backfill tolerance per-query When both are set, the higher of the two values is used\",\n     \"type\": \"integer\"\n    },\n    \"cache_key_prefix\": {\n     \"description\": \"CacheKeyPrefix defines the cache key prefix the backend will use when writing objects to the cache\",\n     \"type\": \"string\"\n    },\n    \"cache_name\": {\n     \"description\": \"CacheName provides the name of the configured cache where the backend client will store it's cache data\",\n     \"type\": \"string\"\n    },\n    \"compressible_types\": {\n     \"description\": \"CompressibleTypeList specifies the HTTP Object Content Types that will be compressed internally when stored in the Trickster cache or served to clients with a compatible 'Accept-Encoding' header\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"dearticulate_upstream_ranges\": {\n     \"description\": \"DearticulateUpstreamRanges, when true, indicates that when Trickster requests multiple ranges from the backend, that they be requested as individual upstream requests instead of a single request that expects a multipart response\\t// this optimizes Trickster to request as few bytes as possible when fronting backends that only support single range requests\",\n     \"type\": \"boolean\"\n    },\n    \"fast_forward_disable\": {\n     \"description\": \"FastForwardDisable indicates whether the FastForward feature should be disabled for this backend\",\n     \"type\": \"boolean\"\n    },\n    \"fastforward_ttl_ms\": {\n     \"description\": \"TimeseriesTTLMS specifies the cache TTL of fast forward data\",\n     \"type\": \"integer\"\n    },\n    \"forwarded_headers\": {\n     \"description\": \"ForwardedHeaders indicates the class of 'Forwarded' header to attach to upstream requests\",\n     \"type\": \"string\"\n    },\n    \"healthcheck\": {\n     \"description\": \"HealthCheck is the health check options reference for this backend\",\n     \"properties\": {\n      \"body\": {\n       \"description\": \"Body provides a body to apply when making an upstream health check request\",\n       \"type\": \"string\"\n      },\n      \"expected_body\": {\n       \"description\": \"ExpectedBody is the body expected in the response to be considered Healthy status\",\n       \"type\": \"string\"\n      },\n      \"expected_codes\": {\n       \"description\": \"Target Probe Response Options ExpectedCodes is the list of Status Codes that positively indicate a Healthy status\",\n       \"items\": {\n        \"type\": \"integer\"\n       },\n       \"type\": \"array\"\n      },\n      \"expected_headers\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"ExpectedHeaders is a list of Headers (name and value) expected in the response in order to be considered Healthy status\",\n       \"type\": \"object\"\n      },\n      \"failure_threshold\": {\n       \"description\": \"FailureThreshold indicates the number of consecutive failed probes required to mark an available target as unavailable\",\n       \"type\": \"integer\"\n      },\n      \"headers\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Headers provides the HTTP Headers to apply when making an upstream health check\",\n       \"type\": \"object\"\n      },\n      \"host\": {\n       \"description\": \"Host is the Host name header to use when making an upstream health check\",\n       \"type\": \"string\"\n      },\n      \"interval_ms\": {\n       \"description\": \"IntervalMS defines the interval in milliseconds at which the target will be probed\",\n       \"type\": \"integer\"\n      },\n      \"path\": {\n       \"description\": \"Path provides the URL path for the upstream health check\",\n       \"type\": \"string\"\n      },\n      \"query\": {\n       \"description\": \"Query provides the HTTP query parameters to use when making an upstream health check\",\n       \"type\": \"string\"\n      },\n      \"recovery_threshold\": {\n       \"description\": \"RecoveryThreshold indicates the number of consecutive successful probes required to mark an unavailable target as available\",\n       \"type\": \"integer\"\n      },\n      \"scheme\": {\n       \"description\": \"Scheme is the scheme to use when making an upstream health check (http or https)\",\n       \"type\": \"string\"\n      },\n      \"timeout_ms\": {\n       \"description\": \"TimeoutMS is the amount of time a health check probe should wait for a response before timing out\",\n       \"type\": \"integer\"\n      },\n      \"verb\": {\n       \"description\": \"Target Outbound Request Options Verb provides the HTTP verb to use when making an upstream health check\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"hosts\": {\n     \"description\": \"HTTP and Proxy Configurations \\n Hosts identifies the frontend hostnames this backend should handle (virtual hosting)\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"is_default\": {\n     \"description\": \"IsDefault indicates if this is the d.Default backend for any request not matching a configured route\",\n     \"type\": \"boolean\"\n    },\n    \"keep_alive_timeout_ms\": {\n     \"description\": \"KeepAliveTimeoutMS defines how long an open keep-alive HTTP connection remains idle before closing\",\n     \"format\": \"int64\",\n     \"type\": \"integer\"\n    },\n    \"latency_max_ms\": {\n     \"description\": \"LatencyMax is the maximum amount of simulated latency to apply to each incoming request\",\n     \"type\": \"integer\"\n    },\n    \"latency_min_ms\": {\n     \"description\": \"Simulated Latency When LatencyMinMS \\u003e 0 and LatencyMaxMS \\u003c LatencyMinMS (e.g., 0), then LatencyMinMS of latency are applied to the request. When LatencyMaxMS \\u003e LatencyMinMS, then a random amount of latency between the two values will be applied to the request \\n LatencyMin is the minimum amount of simulated latency to apply to each incoming request\",\n     \"type\": \"integer\"\n    },\n    \"max_idle_conns\": {\n     \"description\": \"MaxIdleConns defines maximum number of open keep-alive connections to maintain\",\n     \"type\": \"integer\"\n    },\n    \"max_object_size_bytes\": {\n     \"description\": \"MaxObjectSizeBytes specifies the max objectsize to be accepted for any given cache object\",\n     \"type\": \"integer\"\n    },\n    \"max_ttl_ms\": {\n     \"description\": \"MaxTTLMS specifies the maximum allowed TTL for any cache object\",\n     \"type\": \"integer\"\n    },\n    \"multipart_ranges_disabled\": {\n     \"description\": \"MultipartRangesDisabled, when true, indicates that if a downstream client requests multiple ranges in a single request, Trickster will instead request and return a 200 OK with the full object body\",\n     \"type\": \"boolean\"\n    },\n    \"negative_cache_name\": {\n     \"description\": \"NegativeCacheName provides the name of the Negative Cache Config to be used by this Backend\",\n     \"type\": \"string\"\n    },\n    \"origin_url\": {\n     \"description\": \"OriginURL provides the base upstream URL for all proxied requests to this Backend. it can be as simple as http://example.com or as complex as https://example.com:8443/path/prefix\",\n     \"type\": \"string\"\n    },\n    \"path_routing_disabled\": {\n     \"description\": \"PathRoutingDisabled, when true, will bypass /backendName/path route registrations\",\n     \"type\": \"boolean\"\n    },\n    \"paths\": {\n     \"additionalProperties\": {\n      \"description\": \"Options defines a URL Path that is associated with an HTTP Handler\",\n      \"properties\": {\n       \"cache_key_form_fields\": {\n        \"description\": \"CacheKeyFormFields provides the list of http request body fields to be included in the hash for each request's cache key\",\n        \"items\": {\n         \"type\": \"string\"\n        },\n        \"type\": \"array\"\n       },\n       \"cache_key_headers\": {\n        \"description\": \"CacheKeyHeaders provides the list of http request headers to be included in the hash for each request's cache key\",\n        \"items\": {\n         \"type\": \"string\"\n        },\n        \"type\": \"array\"\n       },\n       \"cache_key_params\": {\n        \"description\": \"CacheKeyParams provides the list of http request query parameters to be included in the hash for each request's cache key\",\n        \"items\": {\n         \"type\": \"string\"\n        },\n        \"type\": \"array\"\n       },\n       \"collapsed_forwarding\": {\n        \"description\": \"CollapsedForwardingName indicates 'basic' or 'progressive' Collapsed Forwarding to be used by this path.\",\n        \"type\": \"string\"\n       },\n       \"handler\": {\n        \"description\": \"HandlerName provides the name of the HTTP handler to use\",\n        \"type\": \"string\"\n       },\n       \"match_type\": {\n        \"description\": \"MatchTypeName indicates the type of path match the router will apply to the path ('exact' or 'prefix')\",\n        \"type\": \"string\"\n       },\n       \"methods\": {\n        \"description\": \"Methods provides the list of permitted HTTP request methods for this Path\",\n        \"items\": {\n         \"type\": \"string\"\n        },\n        \"type\": \"array\"\n       },\n       \"no_metrics\": {\n        \"description\": \"NoMetrics, when set to true, disables metrics decoration for the path\",\n        \"type\": \"boolean\"\n       },\n       \"path\": {\n        \"description\": \"Path indicates the HTTP Request's URL PATH to which this configuration applies\",\n        \"type\": \"string\"\n       },\n       \"req_rewriter_name\": {\n        \"description\": \"ReqRewriterName is the name of a configured Rewriter that will modify the request prior to processing by the backend client\",\n        \"type\": \"string\"\n       },\n       \"request_headers\": {\n        \"additionalProperties\": {\n         \"type\": \"string\"\n        },\n        \"description\": \"RequestHeaders is a map of headers that will be added to requests to the upstream Origin for this path\",\n        \"type\": \"object\"\n       },\n       \"request_params\": {\n        \"additionalProperties\": {\n         \"type\": \"string\"\n        },\n        \"description\": \"RequestParams is a map of headers that will be added to requests to the upstream Origin for this path\",\n        \"type\": \"object\"\n       },\n       \"response_body\": {\n        \"description\": \"ResponseBody sets a custom response body to be sent to the donstream client for this path.\",\n        \"type\": \"string\"\n       },\n       \"response_code\": {\n        \"description\": \"ResponseCode sets a custom response code to be sent to downstream clients for this path.\",\n        \"type\": \"integer\"\n       },\n       \"response_headers\": {\n        \"additionalProperties\": {\n         \"type\": \"string\"\n        },\n        \"description\": \"ResponseHeaders is a map of http headers that will be added to responses to the downstream client\",\n        \"type\": \"object\"\n       }\n      },\n      \"required\": [\n       \"no_metrics\"\n      ],\n      \"type\": \"object\"\n     },\n     \"description\": \"PathList is a list of Path Options that control the behavior of the given paths when requested\",\n     \"type\": \"object\"\n    },\n    \"prometheus\": {\n     \"description\": \"Prometheus holds options specific to prometheus backends\",\n     \"properties\": {\n      \"instant_round_ms\": {\n       \"type\": \"integer\"\n      },\n      \"labels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"provider\": {\n     \"description\": \"Provider describes the type of backend (e.g., 'prometheus')\",\n     \"type\": \"string\"\n    },\n    \"req_rewriter_name\": {\n     \"description\": \"ReqRewriterName is the name of a configured Rewriter that will modify the request prior to processing by the backend client\",\n     \"type\": \"string\"\n    },\n    \"require_tls\": {\n     \"description\": \"RequireTLS, when true, indicates this Backend Config's paths must only be registered with the TLS Router\",\n     \"type\": \"boolean\"\n    },\n    \"revalidation_factor\": {\n     \"description\": \"RevalidationFactor specifies how many times to multiply the object freshness lifetime by to calculate an absolute cache TTL\",\n     \"type\": \"number\"\n    },\n    \"rule_name\": {\n     \"description\": \"RuleName provides the name of the rule config to be used by this backend. This is only effective if the Backend provider is 'rule'\",\n     \"type\": \"string\"\n    },\n    \"secret\": {\n     \"description\": \"secret information about the secret data to project\",\n     \"properties\": {\n      \"items\": {\n       \"description\": \"items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\",\n       \"items\": {\n        \"description\": \"Maps a string key to a path within a volume.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the key to project.\",\n          \"type\": \"string\"\n         },\n         \"mode\": {\n          \"description\": \"mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n         },\n         \"path\": {\n          \"description\": \"path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\",\n          \"type\": \"string\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"path\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"name\": {\n       \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\",\n       \"type\": \"string\"\n      },\n      \"optional\": {\n       \"description\": \"optional field specify whether the Secret or its key must be defined\",\n       \"type\": \"boolean\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"shard_max_size_ms\": {\n     \"description\": \"MaxShardSizeMS defines the max size of a timeseries request in milliseconds, before sharding into multiple requests of this denomination and reconsitituting the results. If MaxShardSizePoints and MaxShardSizeMS are both \\u003e 0, the configuration is invalid\",\n     \"type\": \"integer\"\n    },\n    \"shard_max_size_points\": {\n     \"description\": \"MaxShardSizePoints defines the maximum size of a timeseries request in unique timestamps, before sharding into multiple requests of this denomination and reconsitituting the results. If MaxShardSizePoints and MaxShardSizeMS are both \\u003e 0, the configuration is invalid\",\n     \"type\": \"integer\"\n    },\n    \"shard_step_ms\": {\n     \"description\": \"ShardStepMS defines the epoch-aligned cadence to use when creating shards. When set to 0, shards are not aligned to the epoch at a specific step. MaxShardSizeMS must be perfectly divisible by ShardStepMS when both are \\u003e 0, or the configuration is invalid\",\n     \"type\": \"integer\"\n    },\n    \"timeout_ms\": {\n     \"description\": \"TimeoutMS defines how long the HTTP request will wait for a response before timing out\",\n     \"format\": \"int64\",\n     \"type\": \"integer\"\n    },\n    \"timeseries_eviction_method\": {\n     \"description\": \"TimeseriesEvictionMethodName specifies which methodology (\\\"oldest\\\", \\\"lru\\\") is used to identify timeseries to evict from a full cache object\",\n     \"type\": \"string\"\n    },\n    \"timeseries_retention_factor\": {\n     \"description\": \"Object Proxy Cache and Delta Proxy Cache Configurations TimeseriesRetentionFactor limits the maximum the number of chronological timestamps worth of data to store in cache for each query\",\n     \"type\": \"integer\"\n    },\n    \"timeseries_ttl_ms\": {\n     \"description\": \"TimeseriesTTLMS specifies the cache TTL of timeseries objects\",\n     \"type\": \"integer\"\n    },\n    \"tls\": {\n     \"description\": \"TLS is the TLS Configuration for the Frontend and Backend\",\n     \"properties\": {\n      \"certificate_authority_paths\": {\n       \"description\": \"CertificateAuthorities provides a list of custom Certificate Authorities for the upstream origin which are considered in addition to any system CA's by the Trickster HTTPS Client\",\n       \"items\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"array\"\n      },\n      \"client_cert_path\": {\n       \"description\": \"ClientCertPath provides the path to the Client Certificate when using Mutual Authorization\",\n       \"type\": \"string\"\n      },\n      \"client_key_path\": {\n       \"description\": \"ClientKeyPath provides the path to the Client Key when using Mutual Authorization\",\n       \"type\": \"string\"\n      },\n      \"full_chain_cert_path\": {\n       \"description\": \"FullChainCertPath specifies the path of the file containing the concatenated server certification and the intermediate certification for the tls endpoint\",\n       \"type\": \"string\"\n      },\n      \"insecure_skip_verify\": {\n       \"description\": \"InsecureSkipVerify indicates that the HTTPS Client in Trickster should bypass hostname verification for the origin's certificate when proxying requests\",\n       \"type\": \"boolean\"\n      },\n      \"private_key_path\": {\n       \"description\": \"PrivateKeyPath specifies the path of the private key file for the tls endpoint\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"tracing_name\": {\n     \"description\": \"TracingConfigName provides the name of the Tracing Config to be used by this Backend\",\n     \"type\": \"string\"\n    },\n    \"transport\": {\n     \"description\": \"Transport is the transport configuration for the Backend\",\n     \"properties\": {\n      \"crossAccount\": {\n       \"type\": \"boolean\"\n      },\n      \"linkID\": {\n       \"type\": \"string\"\n      },\n      \"type\": {\n       \"default\": \"Direct\",\n       \"enum\": [\n        \"Direct\",\n        \"NATS\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"type\"\n     ],\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Trickster Backend\",\n \"type\": \"object\"\n}"}