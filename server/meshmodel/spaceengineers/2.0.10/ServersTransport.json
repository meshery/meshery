{"kind":"ServersTransport","apiVersion":"traefik.containo.us/v1alpha1","displayName":"Servers Transport","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"https://layer5.io/company/brand","model":"spaceengineers","modelDisplayName":"spaceengineers","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"spaceengineers","version":"2.0.10","displayName":"spaceengineers","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Uncategorized","metadata":null},"metadata":{"isAnnotation":false,"source_uri":"https://github.com/truecharts/helm-staging/releases/download/spaceengineers-2.0.10/spaceengineers-2.0.10.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"ServersTransport is the CRD implementation of a ServersTransport. If no serversTransport is specified, the default@internal will be used. The default@internal serversTransport is created from the static configuration. More info: https://doc.traefik.io/traefik/v2.9/routing/services/#serverstransport_1\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"ServersTransportSpec defines the desired state of a ServersTransport.\",\n   \"properties\": {\n    \"certificatesSecrets\": {\n     \"description\": \"CertificatesSecrets defines a list of secret storing client certificates for mTLS.\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"disableHTTP2\": {\n     \"description\": \"DisableHTTP2 disables HTTP/2 for connections with backend servers.\",\n     \"type\": \"boolean\"\n    },\n    \"forwardingTimeouts\": {\n     \"description\": \"ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.\",\n     \"properties\": {\n      \"dialTimeout\": {\n       \"anyOf\": [\n        {\n         \"type\": \"integer\"\n        },\n        {\n         \"type\": \"string\"\n        }\n       ],\n       \"description\": \"DialTimeout is the amount of time to wait until a connection to a backend server can be established.\",\n       \"x-kubernetes-int-or-string\": true\n      },\n      \"idleConnTimeout\": {\n       \"anyOf\": [\n        {\n         \"type\": \"integer\"\n        },\n        {\n         \"type\": \"string\"\n        }\n       ],\n       \"description\": \"IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.\",\n       \"x-kubernetes-int-or-string\": true\n      },\n      \"pingTimeout\": {\n       \"anyOf\": [\n        {\n         \"type\": \"integer\"\n        },\n        {\n         \"type\": \"string\"\n        }\n       ],\n       \"description\": \"PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.\",\n       \"x-kubernetes-int-or-string\": true\n      },\n      \"readIdleTimeout\": {\n       \"anyOf\": [\n        {\n         \"type\": \"integer\"\n        },\n        {\n         \"type\": \"string\"\n        }\n       ],\n       \"description\": \"ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.\",\n       \"x-kubernetes-int-or-string\": true\n      },\n      \"responseHeaderTimeout\": {\n       \"anyOf\": [\n        {\n         \"type\": \"integer\"\n        },\n        {\n         \"type\": \"string\"\n        }\n       ],\n       \"description\": \"ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).\",\n       \"x-kubernetes-int-or-string\": true\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"insecureSkipVerify\": {\n     \"description\": \"InsecureSkipVerify disables SSL certificate verification.\",\n     \"type\": \"boolean\"\n    },\n    \"maxIdleConnsPerHost\": {\n     \"description\": \"MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.\",\n     \"type\": \"integer\"\n    },\n    \"peerCertURI\": {\n     \"description\": \"PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.\",\n     \"type\": \"string\"\n    },\n    \"rootCAsSecrets\": {\n     \"description\": \"RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"serverName\": {\n     \"description\": \"ServerName defines the server name used to contact the server.\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"metadata\",\n  \"spec\"\n ],\n \"title\": \"Servers Transport\",\n \"type\": \"object\"\n}"}