{"kind":"ClusterInstance","apiVersion":"cosmo-workspace.github.io/v1alpha1","displayName":"Cluster Instance","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":false,"logoURL":"","model":"cosmo-controller-manager","modelDisplayName":"Cosmo Controller Manager","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"cosmo-controller-manager","version":"0.7.0","displayName":"Cosmo Controller Manager","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Uncategorized","metadata":null},"metadata":{"source_uri":"https://github.com/cosmo-workspace/charts/releases/download/cosmo-controller-manager-0.9.0/cosmo-controller-manager-0.9.0.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"ClusterInstance is the Schema for the instances API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"InstanceSpec defines the desired state of Instance\",\n   \"properties\": {\n    \"override\": {\n     \"description\": \"OverrideSpec defines overrides to transform built objects\",\n     \"properties\": {\n      \"network\": {\n       \"description\": \"NetworkOverrideSpec defines overrides to transform network resources\",\n       \"properties\": {\n        \"ingress\": {\n         \"items\": {\n          \"description\": \"IngressOverrideSpec defines overrides to transform Ingress resources\",\n          \"properties\": {\n           \"annotations\": {\n            \"additionalProperties\": {\n             \"type\": \"string\"\n            },\n            \"type\": \"object\"\n           },\n           \"rules\": {\n            \"items\": {\n             \"description\": \"IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.\",\n             \"properties\": {\n              \"host\": {\n               \"description\": \"Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \\\"host\\\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. \\n Host can be \\\"precise\\\" which is a domain name without the terminating dot of a network host (e.g. \\\"foo.bar.com\\\") or \\\"wildcard\\\", which is a domain name prefixed with a single wildcard label (e.g. \\\"*.foo.com\\\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \\\"*\\\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.\",\n               \"type\": \"string\"\n              },\n              \"http\": {\n               \"description\": \"HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\\u003chost\\u003e/\\u003cpath\\u003e?\\u003csearchpart\\u003e -\\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.\",\n               \"properties\": {\n                \"paths\": {\n                 \"description\": \"A collection of paths that map requests to backends.\",\n                 \"items\": {\n                  \"description\": \"HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.\",\n                  \"properties\": {\n                   \"backend\": {\n                    \"description\": \"Backend defines the referenced service endpoint to which the traffic will be forwarded to.\",\n                    \"properties\": {\n                     \"resource\": {\n                      \"description\": \"Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \\\"Service\\\".\",\n                      \"properties\": {\n                       \"apiGroup\": {\n                        \"description\": \"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.\",\n                        \"type\": \"string\"\n                       },\n                       \"kind\": {\n                        \"description\": \"Kind is the type of resource being referenced\",\n                        \"type\": \"string\"\n                       },\n                       \"name\": {\n                        \"description\": \"Name is the name of resource being referenced\",\n                        \"type\": \"string\"\n                       }\n                      },\n                      \"required\": [\n                       \"kind\",\n                       \"name\"\n                      ],\n                      \"type\": \"object\",\n                      \"x-kubernetes-map-type\": \"atomic\"\n                     },\n                     \"service\": {\n                      \"description\": \"Service references a Service as a Backend. This is a mutually exclusive setting with \\\"Resource\\\".\",\n                      \"properties\": {\n                       \"name\": {\n                        \"description\": \"Name is the referenced service. The service must exist in the same namespace as the Ingress object.\",\n                        \"type\": \"string\"\n                       },\n                       \"port\": {\n                        \"description\": \"Port of the referenced service. A port name or port number is required for a IngressServiceBackend.\",\n                        \"properties\": {\n                         \"name\": {\n                          \"description\": \"Name is the name of the port on the Service. This is a mutually exclusive setting with \\\"Number\\\".\",\n                          \"type\": \"string\"\n                         },\n                         \"number\": {\n                          \"description\": \"Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \\\"Name\\\".\",\n                          \"format\": \"int32\",\n                          \"type\": \"integer\"\n                         }\n                        },\n                        \"type\": \"object\"\n                       }\n                      },\n                      \"required\": [\n                       \"name\"\n                      ],\n                      \"type\": \"object\"\n                     }\n                    },\n                    \"type\": \"object\"\n                   },\n                   \"path\": {\n                    \"description\": \"Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \\\"Exact\\\" or \\\"Prefix\\\".\",\n                    \"type\": \"string\"\n                   },\n                   \"pathType\": {\n                    \"description\": \"PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.\",\n                    \"type\": \"string\"\n                   }\n                  },\n                  \"required\": [\n                   \"backend\",\n                   \"pathType\"\n                  ],\n                  \"type\": \"object\"\n                 },\n                 \"type\": \"array\",\n                 \"x-kubernetes-list-type\": \"atomic\"\n                }\n               },\n               \"required\": [\n                \"paths\"\n               ],\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"targetName\": {\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"type\": \"array\"\n        },\n        \"service\": {\n         \"items\": {\n          \"description\": \"ServiceOverrideSpec defines overrides to transform Service resources\",\n          \"properties\": {\n           \"ports\": {\n            \"items\": {\n             \"description\": \"ServicePort contains information on service's port.\",\n             \"properties\": {\n              \"appProtocol\": {\n               \"description\": \"The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.\",\n               \"type\": \"string\"\n              },\n              \"name\": {\n               \"description\": \"The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.\",\n               \"type\": \"string\"\n              },\n              \"nodePort\": {\n               \"description\": \"The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\",\n               \"format\": \"int32\",\n               \"type\": \"integer\"\n              },\n              \"port\": {\n               \"description\": \"The port that will be exposed by this service.\",\n               \"format\": \"int32\",\n               \"type\": \"integer\"\n              },\n              \"protocol\": {\n               \"default\": \"TCP\",\n               \"description\": \"The IP protocol for this port. Supports \\\"TCP\\\", \\\"UDP\\\", and \\\"SCTP\\\". Default is TCP.\",\n               \"type\": \"string\"\n              },\n              \"targetPort\": {\n               \"anyOf\": [\n                {\n                 \"type\": \"integer\"\n                },\n                {\n                 \"type\": \"string\"\n                }\n               ],\n               \"description\": \"Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\",\n               \"x-kubernetes-int-or-string\": true\n              }\n             },\n             \"required\": [\n              \"port\"\n             ],\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"targetName\": {\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"type\": \"array\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"patchesJson6902\": {\n       \"items\": {\n        \"description\": \"Json6902 defines JSONPatch specs.\",\n        \"properties\": {\n         \"patch\": {\n          \"type\": \"string\"\n         },\n         \"target\": {\n          \"description\": \"ObjectRef is a reference of resource which is created by the Instance\",\n          \"properties\": {\n           \"apiVersion\": {\n            \"description\": \"API version of the referent.\",\n            \"type\": \"string\"\n           },\n           \"creationTimestamp\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n           },\n           \"fieldPath\": {\n            \"description\": \"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\",\n            \"type\": \"string\"\n           },\n           \"kind\": {\n            \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\n            \"type\": \"string\"\n           },\n           \"name\": {\n            \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n            \"type\": \"string\"\n           },\n           \"namespace\": {\n            \"description\": \"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n            \"type\": \"string\"\n           },\n           \"resourceVersion\": {\n            \"description\": \"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\",\n            \"type\": \"string\"\n           },\n           \"uid\": {\n            \"description\": \"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\",\n          \"x-kubernetes-map-type\": \"atomic\"\n         }\n        },\n        \"required\": [\n         \"target\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"scale\": {\n       \"items\": {\n        \"description\": \"ScalingOverrideSpec defines workload scales.\",\n        \"properties\": {\n         \"replicas\": {\n          \"format\": \"int64\",\n          \"type\": \"integer\"\n         },\n         \"target\": {\n          \"description\": \"ObjectRef is a reference of resource which is created by the Instance\",\n          \"properties\": {\n           \"apiVersion\": {\n            \"description\": \"API version of the referent.\",\n            \"type\": \"string\"\n           },\n           \"creationTimestamp\": {\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n           },\n           \"fieldPath\": {\n            \"description\": \"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\",\n            \"type\": \"string\"\n           },\n           \"kind\": {\n            \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\n            \"type\": \"string\"\n           },\n           \"name\": {\n            \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n            \"type\": \"string\"\n           },\n           \"namespace\": {\n            \"description\": \"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n            \"type\": \"string\"\n           },\n           \"resourceVersion\": {\n            \"description\": \"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\",\n            \"type\": \"string\"\n           },\n           \"uid\": {\n            \"description\": \"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\",\n          \"x-kubernetes-map-type\": \"atomic\"\n         }\n        },\n        \"required\": [\n         \"replicas\",\n         \"target\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"template\": {\n     \"description\": \"TemplateRef defines template to use in Instance creation\",\n     \"properties\": {\n      \"name\": {\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"name\"\n     ],\n     \"type\": \"object\"\n    },\n    \"vars\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"template\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Cluster Instance\",\n \"type\": \"object\"\n}"}