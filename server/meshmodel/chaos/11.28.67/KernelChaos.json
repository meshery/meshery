{
  "id": "00000000-0000-0000-0000-000000000000",
  "kind": "KernelChaos",
  "apiVersion": "chaos-mesh.org/v1alpha1",
  "displayName": "Kernel Chaos",
  "format": "JSON",
  "hostID": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "capabilities": "",
   "defaultData": "",
   "genealogy": "",
   "isAnnotation": false,
   "isModelAnnotation": "FALSE",
   "isNamespaced": true,
   "logoURL": "",
   "model": "chaos",
   "modelDisplayName": "Chaos",
   "primaryColor": "#00B39F",
   "published": false,
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "shapePolygonPoints": "",
   "styleOverrides": "",
   "styles": "",
   "subCategory": "",
   "svgColor": "",
   "svgComplete": "",
   "svgWhite": ""
  },
  "model": {
   "id": "00000000-0000-0000-0000-000000000000",
   "name": "chaos",
   "version": "11.28.67",
   "displayName": "Chaos",
   "hostID": "00000000-0000-0000-0000-000000000000",
   "category": {
    "name": "App Definition and Development",
    "metadata": null
   },
   "metadata": {
    "source_uri": "https://startxfr.github.io/helm-repository/packages/chaos-14.6.75.tgz"
   },
   "components": null,
   "relationships": null
  },
  "schema": "{\n \"description\": \"KernelChaos is the Schema for the kernelchaos API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Spec defines the behavior of a kernel chaos experiment\",\n   \"properties\": {\n    \"duration\": {\n     \"description\": \"Duration represents the duration of the chaos action\",\n     \"type\": \"string\"\n    },\n    \"failKernRequest\": {\n     \"description\": \"FailKernRequest defines the request of kernel injection\",\n     \"properties\": {\n      \"callchain\": {\n       \"description\": \"Callchain indicate a special call chain, such as:     ext4_mount       -\\u003e mount_subtree          -\\u003e ...             -\\u003e should_failslab With an optional set of predicates and an optional set of parameters, which used with predicates. You can read call chan and predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples to learn more. If no special call chain, just keep Callchain empty, which means it will fail at any call chain with slab alloc (eg: kmalloc).\",\n       \"items\": {\n        \"description\": \"Frame defines the function signature and predicate in function's body\",\n        \"properties\": {\n         \"funcname\": {\n          \"description\": \"Funcname can be find from kernel source or `/proc/kallsyms`, such as `ext4_mount`\",\n          \"type\": \"string\"\n         },\n         \"parameters\": {\n          \"description\": \"Parameters is used with predicate, for example, if you want to inject slab error in `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` with a special name `bananas`, you need to set it to `struct dentry *parent, const struct qstr *name` otherwise omit it.\",\n          \"type\": \"string\"\n         },\n         \"predicate\": {\n          \"description\": \"Predicate will access the arguments of this Frame, example with Parameters's, you can set it to `STRNCMP(name-\\u003ename, \\\"bananas\\\", 8)` to make inject only with it, or omit it to inject for all d_alloc_parallel call chain.\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"failtype\": {\n       \"description\": \"FailType indicates what to fail, can be set to '0' / '1' / '2' If `0`, indicates slab to fail (should_failslab) If `1`, indicates alloc_page to fail (should_fail_alloc_page) If `2`, indicates bio to fail (should_fail_bio) You can read:   1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html   2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt to learn more\",\n       \"format\": \"int32\",\n       \"maximum\": 2,\n       \"minimum\": 0,\n       \"type\": \"integer\"\n      },\n      \"headers\": {\n       \"description\": \"Headers indicates the appropriate kernel headers you need. Eg: \\\"linux/mmzone.h\\\", \\\"linux/blkdev.h\\\" and so on\",\n       \"items\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"array\"\n      },\n      \"probability\": {\n       \"description\": \"Probability indicates the fails with probability. If you want 1%, please set this field with 1.\",\n       \"format\": \"int32\",\n       \"maximum\": 100,\n       \"minimum\": 0,\n       \"type\": \"integer\"\n      },\n      \"times\": {\n       \"description\": \"Times indicates the max times of fails.\",\n       \"format\": \"int32\",\n       \"minimum\": 0,\n       \"type\": \"integer\"\n      }\n     },\n     \"required\": [\n      \"failtype\"\n     ],\n     \"type\": \"object\"\n    },\n    \"mode\": {\n     \"description\": \"Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent\",\n     \"enum\": [\n      \"one\",\n      \"all\",\n      \"fixed\",\n      \"fixed-percent\",\n      \"random-max-percent\"\n     ],\n     \"type\": \"string\"\n    },\n    \"selector\": {\n     \"description\": \"Selector is used to select pods that are used to inject chaos action.\",\n     \"properties\": {\n      \"annotationSelectors\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Map of string keys and values that can be used to select objects. A selector based on annotations.\",\n       \"type\": \"object\"\n      },\n      \"expressionSelectors\": {\n       \"description\": \"a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"fieldSelectors\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Map of string keys and values that can be used to select objects. A selector based on fields.\",\n       \"type\": \"object\"\n      },\n      \"labelSelectors\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Map of string keys and values that can be used to select objects. A selector based on labels.\",\n       \"type\": \"object\"\n      },\n      \"namespaces\": {\n       \"description\": \"Namespaces is a set of namespace to which objects belong.\",\n       \"items\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"array\"\n      },\n      \"nodeSelectors\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.\",\n       \"type\": \"object\"\n      },\n      \"nodes\": {\n       \"description\": \"Nodes is a set of node name and objects must belong to these nodes.\",\n       \"items\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"array\"\n      },\n      \"podPhaseSelectors\": {\n       \"description\": \"PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown\",\n       \"items\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"array\"\n      },\n      \"pods\": {\n       \"additionalProperties\": {\n        \"items\": {\n         \"type\": \"string\"\n        },\n        \"type\": \"array\"\n       },\n       \"description\": \"Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"value\": {\n     \"description\": \"Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action\",\n     \"type\": \"string\"\n    }\n   },\n   \"required\": [\n    \"failKernRequest\",\n    \"mode\",\n    \"selector\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"Kernel Chaos\",\n \"type\": \"object\"\n}"
 }