{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "ExternalSecret",
   "schema": "{\n \"properties\": {\n  \"spec\": {\n   \"anyOf\": [\n    {\n     \"required\": [\n      \"data\"\n     ]\n    },\n    {\n     \"required\": [\n      \"dataFrom\"\n     ]\n    },\n    {\n     \"required\": [\n      \"dataFromWithOptions\"\n     ]\n    }\n   ],\n   \"oneOf\": [\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"secretsManager\",\n        \"systemManager\"\n       ]\n      }\n     }\n    },\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"vault\"\n       ]\n      }\n     }\n    },\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"azureKeyVault\"\n       ]\n      }\n     },\n     \"required\": [\n      \"keyVaultName\"\n     ]\n    },\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"gcpSecretsManager\"\n       ]\n      }\n     }\n    },\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"alicloudSecretsManager\"\n       ]\n      }\n     }\n    },\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"ibmcloudSecretsManager\"\n       ]\n      }\n     }\n    },\n    {\n     \"properties\": {\n      \"backendType\": {\n       \"enum\": [\n        \"akeyless\"\n       ]\n      }\n     }\n    }\n   ],\n   \"properties\": {\n    \"backendType\": {\n     \"description\": \"Determines which backend to use for fetching secrets\",\n     \"enum\": [\n      \"secretsManager\",\n      \"systemManager\",\n      \"vault\",\n      \"azureKeyVault\",\n      \"gcpSecretsManager\",\n      \"alicloudSecretsManager\",\n      \"ibmcloudSecretsManager\",\n      \"akeyless\"\n     ],\n     \"type\": \"string\"\n    },\n    \"controllerId\": {\n     \"description\": \"The ID of controller instance that manages this ExternalSecret. This is needed in case there is more than a KES controller instances within the cluster.\",\n     \"type\": \"string\"\n    },\n    \"data\": {\n     \"items\": {\n      \"oneOf\": [\n       {\n        \"required\": [\n         \"key\",\n         \"name\"\n        ]\n       },\n       {\n        \"required\": [\n         \"path\"\n        ]\n       }\n      ],\n      \"properties\": {\n       \"isBinary\": {\n        \"description\": \"Whether the backend secret shall be treated as binary data represented by a base64-encoded string. You must set this to true for any base64-encoded binary data in the backend - to ensure it is not encoded in base64 again. Default is false.\",\n        \"type\": \"boolean\"\n       },\n       \"key\": {\n        \"description\": \"Secret key in backend\",\n        \"type\": \"string\"\n       },\n       \"name\": {\n        \"description\": \"Name set for this key in the generated secret\",\n        \"type\": \"string\"\n       },\n       \"path\": {\n        \"description\": \"Path from SSM to scrape secrets This will fetch all secrets and use the key from the secret as variable name\",\n        \"type\": \"string\"\n       },\n       \"property\": {\n        \"description\": \"Property to extract if secret in backend is a JSON object\",\n        \"type\": \"string\"\n       },\n       \"recursive\": {\n        \"description\": \"Allow to recurse thru all child keys on a given path, default false\",\n        \"type\": \"boolean\"\n       },\n       \"secretType\": {\n        \"description\": \"Used by: ibmcloudSecretsManager Type of secret - one of username_password, iam_credentials or arbitrary\",\n        \"type\": \"string\"\n       },\n       \"version\": {\n        \"description\": \"Used by: gcpSecretsManager\",\n        \"type\": \"string\",\n        \"x-kubernetes-int-or-string\": true\n       },\n       \"versionId\": {\n        \"description\": \"Used by: secretsManager\",\n        \"type\": \"string\"\n       },\n       \"versionStage\": {\n        \"description\": \"Used by: alicloudSecretsManager, secretsManager\",\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"dataFrom\": {\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"dataFromWithOptions\": {\n     \"items\": {\n      \"properties\": {\n       \"isBinary\": {\n        \"description\": \"Whether the backend secret shall be treated as binary data represented by a base64-encoded string. You must set this to true for any base64-encoded binary data in the backend - to ensure it is not encoded in base64 again. Default is false.\",\n        \"type\": \"boolean\"\n       },\n       \"key\": {\n        \"description\": \"Secret key in backend\",\n        \"type\": \"string\"\n       },\n       \"versionId\": {\n        \"description\": \"Used by: secretsManager\",\n        \"type\": \"string\"\n       },\n       \"versionStage\": {\n        \"description\": \"Used by: alicloudSecretsManager, secretsManager\",\n        \"type\": \"string\"\n       }\n      },\n      \"required\": [\n       \"key\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"keyByName\": {\n     \"description\": \"Whether to interpret the key as a secret name (if true) or ID (the default). Used by: ibmcloudSecretsManager\",\n     \"type\": \"boolean\"\n    },\n    \"keyVaultName\": {\n     \"description\": \"Used by: azureKeyVault\",\n     \"type\": \"string\"\n    },\n    \"kvVersion\": {\n     \"description\": \"Vault K/V version either 1 or 2, default = 2\",\n     \"maximum\": 2,\n     \"minimum\": 1,\n     \"type\": \"integer\"\n    },\n    \"projectId\": {\n     \"description\": \"Used by: gcpSecretsManager\",\n     \"type\": \"string\"\n    },\n    \"region\": {\n     \"description\": \"Used by: secretsManager, systemManager\",\n     \"type\": \"string\"\n    },\n    \"roleArn\": {\n     \"description\": \"Used by: alicloudSecretsManager, secretsManager, systemManager\",\n     \"type\": \"string\"\n    },\n    \"template\": {\n     \"description\": \"Template which will be deep merged without mutating any existing fields. into generated secret, can be used to set for example annotations or type on the generated secret\",\n     \"format\": \"textarea\",\n     \"type\": \"string\"\n    },\n    \"type\": {\n     \"description\": \"DEPRECATED: Use spec.template.type\",\n     \"type\": \"string\"\n    },\n    \"vaultMountPoint\": {\n     \"description\": \"Used by: vault\",\n     \"type\": \"string\"\n    },\n    \"vaultRole\": {\n     \"description\": \"Used by: vault\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"External Secret\",\n \"type\": \"object\"\n}",
   "version": "kubernetes-client.io/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "External Secret",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false
  },
  "model": {
   "category": {
    "name": "Security \u0026 Compliance"
   },
   "displayName": "Kubernetes External Secrets",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "source_uri": "https://external-secrets.github.io/kubernetes-external-secrets/kubernetes-external-secrets-8.5.5.tgz",
    "svgColor": "",
    "svgWhite": ""
   },
   "model": {
    "version": "8.5.5"
   },
   "name": "kubernetes-external-secrets",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "ignored",
  "styles": {
   "primaryColor": "#00B39F",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "",
   "svgWhite": ""
  },
  "version": "v1.0.0"
 }