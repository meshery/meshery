{"kind":"ClickHouseInstallation","apiVersion":"clickhouse.altinity.com/v1","displayName":"Click House Installation","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"theia","modelDisplayName":"Theia","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"","svgComplete":"","svgWhite":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" viewBox=\"20.55 -3.95 390.16 439.66\" height=\"20\" width=\"20\"\u003e\u003cstyle xmlns=\"http://www.w3.org/2000/svg\"\u003esvg {enable-background:new 0 0 432 432}\u003c/style\u003e\u003cstyle xmlns=\"http://www.w3.org/2000/svg\"\u003e.st2{fill:#fff}\u003c/style\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M215.7 327.8c-1.5 0-3-.6-4.1-1.9-1.9-2.2-1.6-5.6.6-7.5l177.1-151.2c2-5.8 2.3-10.9 2.3-11.5 0-33.1-21.9-61.4-22.2-61.7-.1-.1-.2-.3-.3-.4-30.3-47.3-72.9-62.4-93.4-69.6-11.6-4.1-54.1-16.4-112.1-2.1-47.1 11.6-87.5 43.3-110.8 86.8-11.1 20.8-13.2 36.1-13 45.4 0 1.9.2 3.5.4 5 9.3-9.9 28-24.6 56.2-23.3 2.7.1 37.9 1.5 58.2 34.4 7.8-12.3 25.6-32.5 59.3-34.5 1.2-.1 12.2-.7 25.8 4 11.3 3.9 26.3 12.3 37.8 30.2 7.6-12.2 24.8-32.3 57.6-34.2 2.9-.2 5.5 2.1 5.6 5 .2 2.9-2.1 5.5-5 5.6-39.4 2.2-52.5 35.2-53 36.6-.8 2-2.6 3.3-4.8 3.4-2.1.1-4.1-1.1-5-3-19.5-39.9-57.8-37.2-58.2-37.1h-.1c-40.8 2.4-54.4 35.8-55 37.2-.8 2-2.7 3.3-4.8 3.4-2.2 0-4.1-1.2-5-3.1-16.4-36.3-53.2-37.3-53.6-37.3H96c-35.2-1.8-53.4 26.6-53.6 26.9-1 1.6-2.8 2.6-4.7 2.5-1.9-.1-3.6-1.1-4.5-2.8-.6-1-13.4-25.4 10.3-69.6 24.6-46 67.5-79.6 117.6-91.9 60.9-15 105.8-1.9 118.2 2.4 19.9 7 66.5 23.5 98.7 73.7 2.3 3 24.3 32.5 24.3 68.2 0 .4-.2 8-3.4 16.5-.3.8-.8 1.6-1.5 2.2l-178.2 152c-1 .9-2.3 1.3-3.5 1.3z\" class=\"st2\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M214.8 326.9c-1.2 0-2.5-.4-3.5-1.3l-176.9-151c-2.2-1.9-2.5-5.3-.6-7.5s5.3-2.5 7.5-.6l176.9 151c2.2 1.9 2.5 5.3.6 7.5-1 1.3-2.5 1.9-4 1.9z\" class=\"st2\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M215.3 326.9c-2.1 0-4-1.2-4.9-3.2l-60.7-139.9c-1.2-2.7.1-5.9 2.8-7 2.7-1.2 5.9.1 7 2.8l60.7 139.9c1.2 2.7-.1 5.9-2.8 7-.7.3-1.4.4-2.1.4z\" class=\"st2\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M215.7 327.8c-.7 0-1.4-.1-2.1-.5-2.7-1.2-3.9-4.3-2.7-7l62-141.2c1.2-2.7 4.3-3.9 7-2.7 2.7 1.2 3.9 4.3 2.7 7l-62 141.2c-.9 2-2.8 3.2-4.9 3.2z\" class=\"st2\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M278.1 427.5H151.8c-3 0-5.3-2.4-5.3-5.3v-99.4c0-3 2.4-5.3 5.3-5.3h31.4c3 0 5.3 2.4 5.3 5.3 0 3-2.4 5.3-5.3 5.3h-26v88.8h115.6V328h-56.3c-3 0-5.3-2.4-5.3-5.3 0-3 2.4-5.3 5.3-5.3h61.6c3 0 5.3 2.4 5.3 5.3v99.4c0 3-2.4 5.4-5.3 5.4z\" class=\"st2\"\u003e\u003c/path\u003e\u003ccircle xmlns=\"http://www.w3.org/2000/svg\" cx=\"180.4\" cy=\"322.7\" r=\"12.1\" class=\"st2\"\u003e\u003c/circle\u003e\u003ccircle xmlns=\"http://www.w3.org/2000/svg\" cx=\"337.1\" cy=\"141\" r=\"12.1\" class=\"st2\"\u003e\u003c/circle\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M252.7 404.8c-3 0-5.3-2.4-5.3-5.3v-54.6c0-2.2 1.3-4.1 3.3-4.9 2-.8 4.3-.4 5.8 1.2l11.7 11.7c2.1 2.1 2.1 5.5 0 7.6-2.1 2.1-5.5 2.1-7.6 0l-2.6-2.6v41.7c0 2.8-2.4 5.2-5.3 5.2z\" class=\"st2\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M241 361.9c-1.4 0-2.7-.5-3.8-1.6-2.1-2.1-2.1-5.5 0-7.6l11.7-11.7c2.1-2.1 5.5-2.1 7.6 0 2.1 2.1 2.1 5.5 0 7.6l-11.7 11.7c-1.1 1-2.4 1.6-3.8 1.6z\" class=\"st2\"\u003e\u003c/path\u003e\u003c/svg\u003e"},"model":{"name":"theia","version":"0.5.0","displayName":"Theia","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Uncategorized","metadata":null},"metadata":{"source_uri":"https://github.com/antrea-io/theia/releases/download/v0.8.0/theia-chart.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more ClickHouse clusters\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Specification of the desired behavior of one or more ClickHouse clusters\\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md\\n\",\n   \"properties\": {\n    \"configuration\": {\n     \"description\": \"allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource\",\n     \"properties\": {\n      \"clusters\": {\n       \"description\": \"describes ClickHouse clusters layout and allows change settings on cluster-level, shard-level and replica-level\\nevery cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`\\nall Pods will rendered in \\u003cremote_server\\u003e part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`\\nClusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\nIf `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables\\n\",\n       \"items\": {\n        \"properties\": {\n         \"files\": {\n          \"description\": \"optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files`\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"insecure\": {\n          \"description\": \"optional, open insecure ports for cluster, defaults to \\\"yes\\\"\",\n          \"enum\": [\n           \"\",\n           \"0\",\n           \"1\",\n           \"False\",\n           \"false\",\n           \"True\",\n           \"true\",\n           \"No\",\n           \"no\",\n           \"Yes\",\n           \"yes\",\n           \"Off\",\n           \"off\",\n           \"On\",\n           \"on\",\n           \"Disable\",\n           \"disable\",\n           \"Enable\",\n           \"enable\",\n           \"Disabled\",\n           \"disabled\",\n           \"Enabled\",\n           \"enabled\"\n          ],\n          \"type\": \"string\"\n         },\n         \"layout\": {\n          \"description\": \"describe current cluster layout, how much shards in cluster, how much replica in shard\\nallows override settings on each shard and replica separately\\n\",\n          \"properties\": {\n           \"replicas\": {\n            \"description\": \"optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do\",\n            \"items\": {\n             \"properties\": {\n              \"files\": {\n               \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"name\": {\n               \"description\": \"optional, by default replica name is generated, but you can override it and setup custom name\",\n               \"maxLength\": 15,\n               \"minLength\": 1,\n               \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n               \"type\": \"string\"\n              },\n              \"settings\": {\n               \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"shards\": {\n               \"description\": \"optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\",\n               \"items\": {\n                \"properties\": {\n                 \"files\": {\n                  \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"httpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`\\nallows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"httpsPort\": {\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"insecure\": {\n                  \"description\": \"optional, open insecure ports for cluster, defaults to \\\"yes\\\"\\n\",\n                  \"enum\": [\n                   \"\",\n                   \"0\",\n                   \"1\",\n                   \"False\",\n                   \"false\",\n                   \"True\",\n                   \"true\",\n                   \"No\",\n                   \"no\",\n                   \"Yes\",\n                   \"yes\",\n                   \"Off\",\n                   \"off\",\n                   \"On\",\n                   \"on\",\n                   \"Disable\",\n                   \"disable\",\n                   \"Enable\",\n                   \"enable\",\n                   \"Disabled\",\n                   \"disabled\",\n                   \"Enabled\",\n                   \"enabled\"\n                  ],\n                  \"type\": \"string\"\n                 },\n                 \"interserverHTTPPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`\\nallows connect between replicas inside same shard during fetch replicated data parts HTTP protocol\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"name\": {\n                  \"description\": \"optional, by default shard name is generated, but you can override it and setup custom name\",\n                  \"maxLength\": 15,\n                  \"minLength\": 1,\n                  \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n                  \"type\": \"string\"\n                 },\n                 \"secure\": {\n                  \"description\": \"optional, open secure ports\\n\",\n                  \"enum\": [\n                   \"\",\n                   \"0\",\n                   \"1\",\n                   \"False\",\n                   \"false\",\n                   \"True\",\n                   \"true\",\n                   \"No\",\n                   \"no\",\n                   \"Yes\",\n                   \"yes\",\n                   \"Off\",\n                   \"off\",\n                   \"On\",\n                   \"on\",\n                   \"Disable\",\n                   \"disable\",\n                   \"Enable\",\n                   \"enable\",\n                   \"Disabled\",\n                   \"disabled\",\n                   \"Enabled\",\n                   \"enabled\"\n                  ],\n                  \"type\": \"string\"\n                 },\n                 \"settings\": {\n                  \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"tcpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`\\nallows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"templates\": {\n                  \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`\\n\",\n                  \"properties\": {\n                   \"clusterServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"dataVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"hostTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n                    \"type\": \"string\"\n                   },\n                   \"logVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"podTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"replicaServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"serviceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n                    \"type\": \"string\"\n                   },\n                   \"shardServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"volumeClaimTemplate\": {\n                    \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                    \"type\": \"string\"\n                   }\n                  },\n                  \"type\": \"object\"\n                 },\n                 \"tlsPort\": {\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 }\n                },\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              },\n              \"shardsCount\": {\n               \"description\": \"optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`\",\n               \"minimum\": 1,\n               \"type\": \"integer\"\n              },\n              \"templates\": {\n               \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`\\n\",\n               \"properties\": {\n                \"clusterServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"dataVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"hostTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n                 \"type\": \"string\"\n                },\n                \"logVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"podTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"replicaServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"serviceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n                 \"type\": \"string\"\n                },\n                \"shardServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"volumeClaimTemplate\": {\n                 \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                 \"type\": \"string\"\n                }\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"replicasCount\": {\n            \"description\": \"how much replicas in each shards for current ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance, every shard contains 1 replica by default\",\n            \"type\": \"integer\"\n           },\n           \"shards\": {\n            \"description\": \"optional, allows override top-level `chi.spec.configuration`, cluster-level `chi.spec.configuration.clusters` settings for each shard separately, use it only if you fully understand what you do\",\n            \"items\": {\n             \"properties\": {\n              \"definitionType\": {\n               \"description\": \"DEPRECATED - to be removed soon\",\n               \"type\": \"string\"\n              },\n              \"files\": {\n               \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"internalReplication\": {\n               \"description\": \"optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` \\u003e 1 and 0 otherwise\\nallows setup \\u003cinternal_replication\\u003e setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,\\nwill apply in \\u003cremote_servers\\u003e inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml\\nMore details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\n\",\n               \"enum\": [\n                \"\",\n                \"0\",\n                \"1\",\n                \"False\",\n                \"false\",\n                \"True\",\n                \"true\",\n                \"No\",\n                \"no\",\n                \"Yes\",\n                \"yes\",\n                \"Off\",\n                \"off\",\n                \"On\",\n                \"on\",\n                \"Disable\",\n                \"disable\",\n                \"Enable\",\n                \"enable\",\n                \"Disabled\",\n                \"disabled\",\n                \"Enabled\",\n                \"enabled\"\n               ],\n               \"type\": \"string\"\n              },\n              \"name\": {\n               \"description\": \"optional, by default shard name is generated, but you can override it and setup custom name\",\n               \"maxLength\": 15,\n               \"minLength\": 1,\n               \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n               \"type\": \"string\"\n              },\n              \"replicas\": {\n               \"description\": \"optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`\\n\",\n               \"items\": {\n                \"properties\": {\n                 \"files\": {\n                  \"description\": \"optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"httpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`\\nallows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"httpsPort\": {\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"insecure\": {\n                  \"description\": \"optional, open insecure ports for cluster, defaults to \\\"yes\\\"\\n\",\n                  \"enum\": [\n                   \"\",\n                   \"0\",\n                   \"1\",\n                   \"False\",\n                   \"false\",\n                   \"True\",\n                   \"true\",\n                   \"No\",\n                   \"no\",\n                   \"Yes\",\n                   \"yes\",\n                   \"Off\",\n                   \"off\",\n                   \"On\",\n                   \"on\",\n                   \"Disable\",\n                   \"disable\",\n                   \"Enable\",\n                   \"enable\",\n                   \"Disabled\",\n                   \"disabled\",\n                   \"Enabled\",\n                   \"enabled\"\n                  ],\n                  \"type\": \"string\"\n                 },\n                 \"interserverHTTPPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`\\nallows connect between replicas inside same shard during fetch replicated data parts HTTP protocol\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"name\": {\n                  \"description\": \"optional, by default replica name is generated, but you can override it and setup custom name\",\n                  \"maxLength\": 15,\n                  \"minLength\": 1,\n                  \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n                  \"type\": \"string\"\n                 },\n                 \"secure\": {\n                  \"description\": \"optional, open secure ports\\n\",\n                  \"enum\": [\n                   \"\",\n                   \"0\",\n                   \"1\",\n                   \"False\",\n                   \"false\",\n                   \"True\",\n                   \"true\",\n                   \"No\",\n                   \"no\",\n                   \"Yes\",\n                   \"yes\",\n                   \"Off\",\n                   \"off\",\n                   \"On\",\n                   \"on\",\n                   \"Disable\",\n                   \"disable\",\n                   \"Enable\",\n                   \"enable\",\n                   \"Disabled\",\n                   \"disabled\",\n                   \"Enabled\",\n                   \"enabled\"\n                  ],\n                  \"type\": \"string\"\n                 },\n                 \"settings\": {\n                  \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"tcpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`\\nallows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"templates\": {\n                  \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`\\n\",\n                  \"properties\": {\n                   \"clusterServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"dataVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"hostTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n                    \"type\": \"string\"\n                   },\n                   \"logVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"podTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"replicaServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"serviceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n                    \"type\": \"string\"\n                   },\n                   \"shardServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                    \"type\": \"string\"\n                   },\n                   \"volumeClaimTemplate\": {\n                    \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                    \"type\": \"string\"\n                   }\n                  },\n                  \"type\": \"object\"\n                 },\n                 \"tlsPort\": {\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 }\n                },\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              },\n              \"replicasCount\": {\n               \"description\": \"optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,\\nshard contains 1 replica by default\\noverride cluster-level `chi.spec.configuration.clusters.layout.replicasCount`\\n\",\n               \"minimum\": 1,\n               \"type\": \"integer\"\n              },\n              \"settings\": {\n               \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"templates\": {\n               \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard\\noverride top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`\\n\",\n               \"properties\": {\n                \"clusterServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"dataVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"hostTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n                 \"type\": \"string\"\n                },\n                \"logVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"podTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"replicaServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"serviceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n                 \"type\": \"string\"\n                },\n                \"shardServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n                 \"type\": \"string\"\n                },\n                \"volumeClaimTemplate\": {\n                 \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                 \"type\": \"string\"\n                }\n               },\n               \"type\": \"object\"\n              },\n              \"weight\": {\n               \"description\": \"optional, 1 by default, allows setup shard \\u003cweight\\u003e setting which will use during insert into tables with `Distributed` engine,\\nwill apply in \\u003cremote_servers\\u003e inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml\\nMore details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\n\",\n               \"type\": \"integer\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"shardsCount\": {\n            \"description\": \"how much shards for current ClickHouse cluster will run in Kubernetes, each shard contains shared-nothing part of data and contains set of replicas, cluster contains 1 shard by default\",\n            \"type\": \"integer\"\n           },\n           \"type\": {\n            \"description\": \"DEPRECATED - to be removed soon\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"name\": {\n          \"description\": \"cluster name, used to identify set of ClickHouse servers and wide used during generate names of related Kubernetes resources\",\n          \"maxLength\": 15,\n          \"minLength\": 1,\n          \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n          \"type\": \"string\"\n         },\n         \"schemaPolicy\": {\n          \"description\": \"describes how schema is propagated within replicas and shards\\n\",\n          \"properties\": {\n           \"replica\": {\n            \"description\": \"how schema is propagated within a replica\",\n            \"enum\": [\n             \"None\",\n             \"All\"\n            ],\n            \"type\": \"string\"\n           },\n           \"shard\": {\n            \"description\": \"how schema is propagated between shards\",\n            \"enum\": [\n             \"None\",\n             \"All\",\n             \"DistributedTablesOnly\"\n            ],\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"secret\": {\n          \"description\": \"optional, shared secret value to secure cluster communications\",\n          \"properties\": {\n           \"auto\": {\n            \"description\": \"Auto-generate shared secret value to secure cluster communications\",\n            \"enum\": [\n             \"\",\n             \"0\",\n             \"1\",\n             \"False\",\n             \"false\",\n             \"True\",\n             \"true\",\n             \"No\",\n             \"no\",\n             \"Yes\",\n             \"yes\",\n             \"Off\",\n             \"off\",\n             \"On\",\n             \"on\",\n             \"Disable\",\n             \"disable\",\n             \"Enable\",\n             \"enable\",\n             \"Disabled\",\n             \"disabled\",\n             \"Enabled\",\n             \"enabled\"\n            ],\n            \"type\": \"string\"\n           },\n           \"value\": {\n            \"description\": \"Cluster shared secret value in plain text\",\n            \"type\": \"string\"\n           },\n           \"valueFrom\": {\n            \"description\": \"Cluster shared secret source\",\n            \"properties\": {\n             \"secretKeyRef\": {\n              \"description\": \"Selects a key of a secret in the clickhouse installation namespace.\\nShould not be used if value is not empty.\\n\",\n              \"properties\": {\n               \"key\": {\n                \"description\": \"The key of the secret to select from. Must be a valid secret key.\",\n                \"type\": \"string\"\n               },\n               \"name\": {\n                \"description\": \"Name of the referent. More info:\\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\n\",\n                \"type\": \"string\"\n               },\n               \"optional\": {\n                \"description\": \"Specify whether the Secret or its key must be defined\",\n                \"type\": \"boolean\"\n               }\n              },\n              \"required\": [\n               \"name\",\n               \"key\"\n              ],\n              \"type\": \"object\"\n             }\n            },\n            \"type\": \"object\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"secure\": {\n          \"description\": \"optional, open secure ports for cluster\",\n          \"enum\": [\n           \"\",\n           \"0\",\n           \"1\",\n           \"False\",\n           \"false\",\n           \"True\",\n           \"true\",\n           \"No\",\n           \"no\",\n           \"Yes\",\n           \"yes\",\n           \"Off\",\n           \"off\",\n           \"On\",\n           \"on\",\n           \"Disable\",\n           \"disable\",\n           \"Enable\",\n           \"enable\",\n           \"Disabled\",\n           \"disabled\",\n           \"Enabled\",\n           \"enabled\"\n          ],\n          \"type\": \"string\"\n         },\n         \"settings\": {\n          \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"templates\": {\n          \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster\\noverride top-level `chi.spec.configuration.templates`\\n\",\n          \"properties\": {\n           \"clusterServiceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n            \"type\": \"string\"\n           },\n           \"dataVolumeClaimTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n            \"type\": \"string\"\n           },\n           \"hostTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n            \"type\": \"string\"\n           },\n           \"logVolumeClaimTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n            \"type\": \"string\"\n           },\n           \"podTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n            \"type\": \"string\"\n           },\n           \"replicaServiceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n            \"type\": \"string\"\n           },\n           \"serviceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n            \"type\": \"string\"\n           },\n           \"shardServiceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n            \"type\": \"string\"\n           },\n           \"volumeClaimTemplate\": {\n            \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"zookeeper\": {\n          \"description\": \"optional, allows configure \\u003cyandex\\u003e\\u003czookeeper\\u003e..\\u003c/zookeeper\\u003e\\u003c/yandex\\u003e section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.zookeeper` settings\\n\",\n          \"properties\": {\n           \"identity\": {\n            \"description\": \"optional access credentials string with `user:password` format used when use digest authorization in Zookeeper\",\n            \"type\": \"string\"\n           },\n           \"nodes\": {\n            \"description\": \"describe every available zookeeper cluster node for interaction\",\n            \"items\": {\n             \"properties\": {\n              \"host\": {\n               \"description\": \"dns name or ip address for Zookeeper node\",\n               \"type\": \"string\"\n              },\n              \"port\": {\n               \"description\": \"TCP port which used to connect to Zookeeper node\",\n               \"maximum\": 65535,\n               \"minimum\": 0,\n               \"type\": \"integer\"\n              },\n              \"secure\": {\n               \"description\": \"if a secure connection to Zookeeper is required\",\n               \"enum\": [\n                \"\",\n                \"0\",\n                \"1\",\n                \"False\",\n                \"false\",\n                \"True\",\n                \"true\",\n                \"No\",\n                \"no\",\n                \"Yes\",\n                \"yes\",\n                \"Off\",\n                \"off\",\n                \"On\",\n                \"on\",\n                \"Disable\",\n                \"disable\",\n                \"Enable\",\n                \"enable\",\n                \"Disabled\",\n                \"disabled\",\n                \"Enabled\",\n                \"enabled\"\n               ],\n               \"type\": \"string\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"operation_timeout_ms\": {\n            \"description\": \"one operation timeout during Zookeeper transactions\",\n            \"type\": \"integer\"\n           },\n           \"root\": {\n            \"description\": \"optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)\",\n            \"type\": \"string\"\n           },\n           \"session_timeout_ms\": {\n            \"description\": \"session timeout during connect to Zookeeper\",\n            \"type\": \"integer\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"files\": {\n       \"description\": \"allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\nevery key in this object is the file name\\nevery value in this object is the file content\\nyou can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html\\neach key could contains prefix like USERS, COMMON, HOST or config.d, users.d, cond.d, wrong prefixes will ignored, subfolders also will ignored\\nMore details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"profiles\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003cprofiles\\u003e..\\u003c/profiles\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure any aspect of settings profile\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"quotas\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003cquotas\\u003e..\\u003c/quotas\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure any aspect of resource quotas\\nMore details: https://clickhouse.tech/docs/en/operations/quotas/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"settings\": {\n       \"description\": \"allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"users\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003cusers\\u003e..\\u003c/users\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure password hashed, authorization restrictions, database level security row filters etc.\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings-users/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"zookeeper\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003czookeeper\\u003e..\\u003c/zookeeper\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`\\n`clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separately look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/\\ncurrently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`\\nMore details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper\\n\",\n       \"properties\": {\n        \"identity\": {\n         \"description\": \"optional access credentials string with `user:password` format used when use digest authorization in Zookeeper\",\n         \"type\": \"string\"\n        },\n        \"nodes\": {\n         \"description\": \"describe every available zookeeper cluster node for interaction\",\n         \"items\": {\n          \"properties\": {\n           \"host\": {\n            \"description\": \"dns name or ip address for Zookeeper node\",\n            \"type\": \"string\"\n           },\n           \"port\": {\n            \"description\": \"TCP port which used to connect to Zookeeper node\",\n            \"maximum\": 65535,\n            \"minimum\": 0,\n            \"type\": \"integer\"\n           },\n           \"secure\": {\n            \"description\": \"if a secure connection to Zookeeper is required\",\n            \"enum\": [\n             \"\",\n             \"0\",\n             \"1\",\n             \"False\",\n             \"false\",\n             \"True\",\n             \"true\",\n             \"No\",\n             \"no\",\n             \"Yes\",\n             \"yes\",\n             \"Off\",\n             \"off\",\n             \"On\",\n             \"on\",\n             \"Disable\",\n             \"disable\",\n             \"Enable\",\n             \"enable\",\n             \"Disabled\",\n             \"disabled\",\n             \"Enabled\",\n             \"enabled\"\n            ],\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"type\": \"array\"\n        },\n        \"operation_timeout_ms\": {\n         \"description\": \"one operation timeout during Zookeeper transactions\",\n         \"type\": \"integer\"\n        },\n        \"root\": {\n         \"description\": \"optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)\",\n         \"type\": \"string\"\n        },\n        \"session_timeout_ms\": {\n         \"description\": \"session timeout during connect to Zookeeper\",\n         \"type\": \"integer\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"defaults\": {\n     \"description\": \"define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level\\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults\\n\",\n     \"properties\": {\n      \"distributedDDL\": {\n       \"description\": \"allows change `\\u003cyandex\\u003e\\u003cdistributed_ddl\\u003e\\u003c/distributed_ddl\\u003e\\u003c/yandex\\u003e` settings\\nMore info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl\\n\",\n       \"properties\": {\n        \"profile\": {\n         \"description\": \"Settings from this profile will be used to execute DDL queries\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"replicasUseFQDN\": {\n       \"description\": \"define should replicas be specified by FQDN in `\\u003chost\\u003e\\u003c/host\\u003e`.\\nIn case of \\\"no\\\" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup\\n\\\"yes\\\" by default\\n\",\n       \"enum\": [\n        \"\",\n        \"0\",\n        \"1\",\n        \"False\",\n        \"false\",\n        \"True\",\n        \"true\",\n        \"No\",\n        \"no\",\n        \"Yes\",\n        \"yes\",\n        \"Off\",\n        \"off\",\n        \"On\",\n        \"on\",\n        \"Disable\",\n        \"disable\",\n        \"Enable\",\n        \"enable\",\n        \"Disabled\",\n        \"disabled\",\n        \"Enabled\",\n        \"enabled\"\n       ],\n       \"type\": \"string\"\n      },\n      \"storageManagement\": {\n       \"description\": \"default storage management options\",\n       \"properties\": {\n        \"provisioner\": {\n         \"description\": \"defines `PVC` provisioner - be it StatefulSet or the Operator\",\n         \"enum\": [\n          \"\",\n          \"StatefulSet\",\n          \"Operator\"\n         ],\n         \"type\": \"string\"\n        },\n        \"reclaimPolicy\": {\n         \"description\": \"defines behavior of `PVC` deletion.\\n`Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet\\n\",\n         \"enum\": [\n          \"\",\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"templates\": {\n       \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource\",\n       \"properties\": {\n        \"clusterServiceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"dataVolumeClaimTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"hostTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n         \"type\": \"string\"\n        },\n        \"logVolumeClaimTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"podTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"replicaServiceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"serviceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n         \"type\": \"string\"\n        },\n        \"shardServiceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"volumeClaimTemplate\": {\n         \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"namespaceDomainPattern\": {\n     \"description\": \"custom domain suffix which will add to end of `Service` or `Pod` name, use it when you use custom cluster domain in your Kubernetes cluster\",\n     \"type\": \"string\"\n    },\n    \"reconciling\": {\n     \"description\": \"optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side\",\n     \"properties\": {\n      \"cleanup\": {\n       \"description\": \"optional, define behavior for cleanup Kubernetes resources during reconcile cycle\",\n       \"properties\": {\n        \"reconcileFailedObjects\": {\n         \"description\": \"what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`\",\n         \"properties\": {\n          \"configMap\": {\n           \"description\": \"behavior policy for failed ConfigMap reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"pvc\": {\n           \"description\": \"behavior policy for failed PVC reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"service\": {\n           \"description\": \"behavior policy for failed Service reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"statefulSet\": {\n           \"description\": \"behavior policy for failed StatefulSet reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"unknownObjects\": {\n         \"description\": \"what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`\",\n         \"properties\": {\n          \"configMap\": {\n           \"description\": \"behavior policy for unknown ConfigMap, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"pvc\": {\n           \"description\": \"behavior policy for unknown PVC, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"service\": {\n           \"description\": \"behavior policy for unknown Service, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"statefulSet\": {\n           \"description\": \"behavior policy for unknown StatefulSet, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"configMapPropagationTimeout\": {\n       \"description\": \"timeout in seconds when `clickhouse-operator` will wait when applied `ConfigMap` during reconcile `ClickhouseInstallation` pods will updated from cache\\nsee details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically\\n\",\n       \"maximum\": 3600,\n       \"minimum\": 0,\n       \"type\": \"integer\"\n      },\n      \"policy\": {\n       \"description\": \"DEPRECATED\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"restart\": {\n     \"description\": \"This is a 'soft restart' button. When set to 'RollingUpdate' operator will restart ClickHouse pods in a graceful way. Remove it after the use in order to avoid unneeded restarts\",\n     \"enum\": [\n      \"\",\n      \"RollingUpdate\"\n     ],\n     \"type\": \"string\"\n    },\n    \"stop\": {\n     \"description\": \"Allow stop all ClickHouse clusters described in current chi.\\nStop mechanism works as follows:\\n - When `stop` is `1` then setup `Replicas: 0` in each related to current `chi` StatefulSet resource, all `Pods` and `Service` resources will desctroy, but PVCs still live\\n - When `stop` is `0` then `Pods` will created again and will attach retained PVCs and `Service` also will created again\\n\",\n     \"enum\": [\n      \"\",\n      \"0\",\n      \"1\",\n      \"False\",\n      \"false\",\n      \"True\",\n      \"true\",\n      \"No\",\n      \"no\",\n      \"Yes\",\n      \"yes\",\n      \"Off\",\n      \"off\",\n      \"On\",\n      \"on\",\n      \"Disable\",\n      \"disable\",\n      \"Enable\",\n      \"enable\",\n      \"Disabled\",\n      \"disabled\",\n      \"Enabled\",\n      \"enabled\"\n     ],\n     \"type\": \"string\"\n    },\n    \"taskID\": {\n     \"description\": \"Allows to define custom taskID for named update operation and watch status of this update execution in .status.taskIDs field.\\nBy default every update of chi manifest will generate random taskID\\n\",\n     \"type\": \"string\"\n    },\n    \"templates\": {\n     \"description\": \"allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it\",\n     \"properties\": {\n      \"hostTemplates\": {\n       \"description\": \"hostTemplate will use during apply to generate `clickhose-server` config files\",\n       \"items\": {\n        \"properties\": {\n         \"name\": {\n          \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`\",\n          \"type\": \"string\"\n         },\n         \"portDistribution\": {\n          \"description\": \"define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs\",\n          \"items\": {\n           \"properties\": {\n            \"type\": {\n             \"description\": \"type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network\",\n             \"enum\": [\n              \"\",\n              \"Unspecified\",\n              \"ClusterScopeIndex\"\n             ],\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"spec\": {\n          \"properties\": {\n           \"files\": {\n            \"description\": \"optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\n\",\n            \"format\": \"textarea\",\n            \"type\": \"string\"\n           },\n           \"httpPort\": {\n            \"description\": \"optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`\\nMore info: https://clickhouse.tech/docs/en/interfaces/http/\\n\",\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"httpsPort\": {\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"insecure\": {\n            \"description\": \"optional, open insecure ports for cluster, defaults to \\\"yes\\\"\\n\",\n            \"enum\": [\n             \"\",\n             \"0\",\n             \"1\",\n             \"False\",\n             \"false\",\n             \"True\",\n             \"true\",\n             \"No\",\n             \"no\",\n             \"Yes\",\n             \"yes\",\n             \"Off\",\n             \"off\",\n             \"On\",\n             \"on\",\n             \"Disable\",\n             \"disable\",\n             \"Enable\",\n             \"enable\",\n             \"Disabled\",\n             \"disabled\",\n             \"Enabled\",\n             \"enabled\"\n            ],\n            \"type\": \"string\"\n           },\n           \"interserverHTTPPort\": {\n            \"description\": \"optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`\\nMore info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port\\n\",\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"name\": {\n            \"description\": \"by default, hostname will generate, but this allows define custom name for each `clickhuse-server`\",\n            \"maxLength\": 15,\n            \"minLength\": 1,\n            \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n            \"type\": \"string\"\n           },\n           \"secure\": {\n            \"description\": \"optional, open secure ports\\n\",\n            \"enum\": [\n             \"\",\n             \"0\",\n             \"1\",\n             \"False\",\n             \"false\",\n             \"True\",\n             \"true\",\n             \"No\",\n             \"no\",\n             \"Yes\",\n             \"yes\",\n             \"Off\",\n             \"off\",\n             \"On\",\n             \"on\",\n             \"Disable\",\n             \"disable\",\n             \"Enable\",\n             \"enable\",\n             \"Disabled\",\n             \"disabled\",\n             \"Enabled\",\n             \"enabled\"\n            ],\n            \"type\": \"string\"\n           },\n           \"settings\": {\n            \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n            \"format\": \"textarea\",\n            \"type\": \"string\"\n           },\n           \"tcpPort\": {\n            \"description\": \"optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`\\nMore info: https://clickhouse.tech/docs/en/interfaces/tcp/\\n\",\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"templates\": {\n            \"description\": \"be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do\",\n            \"properties\": {\n             \"clusterServiceTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n              \"type\": \"string\"\n             },\n             \"dataVolumeClaimTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n              \"type\": \"string\"\n             },\n             \"hostTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n              \"type\": \"string\"\n             },\n             \"logVolumeClaimTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n              \"type\": \"string\"\n             },\n             \"podTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n              \"type\": \"string\"\n             },\n             \"replicaServiceTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n              \"type\": \"string\"\n             },\n             \"serviceTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n              \"type\": \"string\"\n             },\n             \"shardServiceTemplate\": {\n              \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n              \"type\": \"string\"\n             },\n             \"volumeClaimTemplate\": {\n              \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n              \"type\": \"string\"\n             }\n            },\n            \"type\": \"object\"\n           },\n           \"tlsPort\": {\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"podTemplates\": {\n       \"description\": \"podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone\\nMore information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates\\n\",\n       \"items\": {\n        \"properties\": {\n         \"distribution\": {\n          \"description\": \"DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`\",\n          \"enum\": [\n           \"\",\n           \"Unspecified\",\n           \"OnePerHost\"\n          ],\n          \"type\": \"string\"\n         },\n         \"generateName\": {\n          \"description\": \"allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables\",\n          \"type\": \"string\"\n         },\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to Pod\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`\",\n          \"type\": \"string\"\n         },\n         \"podDistribution\": {\n          \"description\": \"define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster\",\n          \"items\": {\n           \"properties\": {\n            \"number\": {\n             \"description\": \"define, how much ClickHouse Pods could be inside selected scope with selected distribution type\",\n             \"maximum\": 65535,\n             \"minimum\": 0,\n             \"type\": \"integer\"\n            },\n            \"scope\": {\n             \"description\": \"scope for apply each podDistribution\",\n             \"enum\": [\n              \"\",\n              \"Unspecified\",\n              \"Shard\",\n              \"Replica\",\n              \"Cluster\",\n              \"ClickHouseInstallation\",\n              \"Namespace\"\n             ],\n             \"type\": \"string\"\n            },\n            \"topologyKey\": {\n             \"description\": \"use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`, More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\",\n             \"type\": \"string\"\n            },\n            \"type\": {\n             \"description\": \"you can define multiple affinity policy types\",\n             \"enum\": [\n              \"\",\n              \"Unspecified\",\n              \"ClickHouseAntiAffinity\",\n              \"ShardAntiAffinity\",\n              \"ReplicaAntiAffinity\",\n              \"AnotherNamespaceAntiAffinity\",\n              \"AnotherClickHouseInstallationAntiAffinity\",\n              \"AnotherClusterAntiAffinity\",\n              \"MaxNumberPerNode\",\n              \"NamespaceAffinity\",\n              \"ClickHouseInstallationAffinity\",\n              \"ClusterAffinity\",\n              \"ShardAffinity\",\n              \"ReplicaAffinity\",\n              \"PreviousTailAffinity\",\n              \"CircularReplication\"\n             ],\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"spec\": {\n          \"description\": \"allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"zone\": {\n          \"description\": \"allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`\",\n          \"properties\": {\n           \"key\": {\n            \"description\": \"optional, if defined, allows select kubernetes nodes by label with `name` equal `key`\",\n            \"type\": \"string\"\n           },\n           \"values\": {\n            \"description\": \"optional, if defined, allows select kubernetes nodes by label with `value` in `values`\",\n            \"items\": {\n             \"type\": \"string\"\n            },\n            \"type\": \"array\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"serviceTemplates\": {\n       \"description\": \"allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level\\n\",\n       \"items\": {\n        \"properties\": {\n         \"generateName\": {\n          \"description\": \"allows define format for generated `Service` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables\",\n          \"type\": \"string\"\n         },\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to Service\\nCould be use for define specificly for Cloud Provider metadata which impact to behavior of service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside\\nchi-level `chi.spec.defaults.templates.serviceTemplate`\\ncluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`\\n\",\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"describe behavior of generated Service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"volumeClaimTemplates\": {\n       \"description\": \"allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else\",\n       \"items\": {\n        \"properties\": {\n         \"metadata\": {\n          \"description\": \"allows to pass standard object's metadata from template to PVC\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside\\ntop-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,\\ncluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`\\n\",\n          \"type\": \"string\"\n         },\n         \"provisioner\": {\n          \"description\": \"defines `PVC` provisioner - be it StatefulSet or the Operator\",\n          \"enum\": [\n           \"\",\n           \"StatefulSet\",\n           \"Operator\"\n          ],\n          \"type\": \"string\"\n         },\n         \"reclaimPolicy\": {\n          \"description\": \"defines behavior of `PVC` deletion.\\n`Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet\\n\",\n          \"enum\": [\n           \"\",\n           \"Retain\",\n           \"Delete\"\n          ],\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"allows define all aspects of `PVC` resource\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"templating\": {\n     \"description\": \"optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation\",\n     \"properties\": {\n      \"policy\": {\n       \"description\": \"when defined as `auto` inside ClickhouseInstallationTemplate, it will auto add into all ClickHouseInstallation, manual value is default\",\n       \"enum\": [\n        \"auto\",\n        \"manual\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"troubleshoot\": {\n     \"description\": \"allows troubleshoot Pods during CrashLoopBack state, when you apply wrong configuration, `clickhouse-server` wouldn't startup\",\n     \"enum\": [\n      \"\",\n      \"0\",\n      \"1\",\n      \"False\",\n      \"false\",\n      \"True\",\n      \"true\",\n      \"No\",\n      \"no\",\n      \"Yes\",\n      \"yes\",\n      \"Off\",\n      \"off\",\n      \"On\",\n      \"on\",\n      \"Disable\",\n      \"disable\",\n      \"Enable\",\n      \"enable\",\n      \"Disabled\",\n      \"disabled\",\n      \"Enabled\",\n      \"enabled\"\n     ],\n     \"type\": \"string\"\n    },\n    \"useTemplates\": {\n     \"description\": \"list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `Chi` manifest during render Kubernetes resources to create related ClickHouse clusters\",\n     \"items\": {\n      \"properties\": {\n       \"name\": {\n        \"description\": \"name of `ClickHouseInstallationTemplate` (chit) resource\",\n        \"type\": \"string\"\n       },\n       \"namespace\": {\n        \"description\": \"Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clichouse-operator`\",\n        \"type\": \"string\"\n       },\n       \"useType\": {\n        \"description\": \"optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`\",\n        \"enum\": [\n         \"\",\n         \"merge\"\n        ],\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"Click House Installation\",\n \"type\": \"object\"\n}"}