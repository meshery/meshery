{"kind":"KongIngress","apiVersion":"configuration.konghq.com/v1","displayName":"Kong Ingress","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"kong","modelDisplayName":"Kong API Gateway","primaryColor":"#003459","published":true,"secondaryColor":"","shape":"circle","styleOverrides":"","subCategory":"API Gateway","svgColor":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;\u0026#x9;L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;\u0026#x9;h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e","svgComplete":"","svgWhite":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;\u0026#x9;L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;\u0026#x9;h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"},"model":{"name":"kong","version":"4.6.0","displayName":"Kong API Gateway","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Cloud Native Network","metadata":null},"metadata":{"isAnnotation":false,"source_uri":"https://charts.wallarm.com/kong/kong-4.6.3.tgz","svgColor":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e","svgWhite":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;\u0026#x9;L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;\u0026#x9;h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"},"components":null,"relationships":null},"schema":"{\n \"description\": \"KongIngress is the Schema for the kongingresses API\",\n \"properties\": {\n  \"proxy\": {\n   \"description\": \"Proxy defines additional connection options for the routes to be configured in the Kong Gateway, e.g. `connection_timeout`, `retries`, e.t.c.\",\n   \"properties\": {\n    \"connect_timeout\": {\n     \"description\": \"The timeout in milliseconds for establishing a connection to the upstream server.\",\n     \"minimum\": 0,\n     \"type\": \"integer\"\n    },\n    \"path\": {\n     \"description\": \"The path to be used in requests to the upstream server.(optional)\",\n     \"pattern\": \"^/.*$\",\n     \"type\": \"string\"\n    },\n    \"protocol\": {\n     \"description\": \"The protocol used to communicate with the upstream.\",\n     \"enum\": [\n      \"http\",\n      \"https\",\n      \"grpc\",\n      \"grpcs\",\n      \"tcp\",\n      \"tls\",\n      \"udp\"\n     ],\n     \"type\": \"string\"\n    },\n    \"read_timeout\": {\n     \"description\": \"The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.\",\n     \"minimum\": 0,\n     \"type\": \"integer\"\n    },\n    \"retries\": {\n     \"description\": \"The number of retries to execute upon failure to proxy.\",\n     \"minimum\": 0,\n     \"type\": \"integer\"\n    },\n    \"write_timeout\": {\n     \"description\": \"The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.\",\n     \"minimum\": 0,\n     \"type\": \"integer\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"route\": {\n   \"description\": \"Route define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it.\",\n   \"properties\": {\n    \"headers\": {\n     \"additionalProperties\": {\n      \"items\": {\n       \"type\": \"string\"\n      },\n      \"type\": \"array\"\n     },\n     \"description\": \"Headers contains one or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute.\",\n     \"type\": \"object\"\n    },\n    \"https_redirect_status_code\": {\n     \"description\": \"HTTPSRedirectStatusCode is the status code Kong responds with when all properties of a Route match except the protocol.\",\n     \"type\": \"integer\"\n    },\n    \"methods\": {\n     \"description\": \"Methods is a list of HTTP methods that match this Route.\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"path_handling\": {\n     \"description\": \"PathHandling controls how the Service path, Route path and requested path are combined when sending a request to the upstream.\",\n     \"enum\": [\n      \"v0\",\n      \"v1\"\n     ],\n     \"type\": \"string\"\n    },\n    \"preserve_host\": {\n     \"description\": \"PreserveHost sets When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Serviceâ€™s host.\",\n     \"type\": \"boolean\"\n    },\n    \"protocols\": {\n     \"description\": \"Protocols is an array of the protocols this Route should allow.\",\n     \"items\": {\n      \"enum\": [\n       \"http\",\n       \"https\",\n       \"grpc\",\n       \"grpcs\",\n       \"tcp\",\n       \"tls\",\n       \"udp\"\n      ],\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"regex_priority\": {\n     \"description\": \"RegexPriority is a number used to choose which route resolves a given request when several routes match it using regexes simultaneously.\",\n     \"type\": \"integer\"\n    },\n    \"request_buffering\": {\n     \"description\": \"RequestBuffering sets whether to enable request body buffering or not.\",\n     \"type\": \"boolean\"\n    },\n    \"response_buffering\": {\n     \"description\": \"ResponseBuffering sets whether to enable response body buffering or not.\",\n     \"type\": \"boolean\"\n    },\n    \"snis\": {\n     \"description\": \"SNIs is a list of SNIs that match this Route when using stream routing.\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"strip_path\": {\n     \"description\": \"StripPath sets When matching a Route via one of the paths strip the matching prefix from the upstream request URL.\",\n     \"type\": \"boolean\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"upstream\": {\n   \"description\": \"Upstream represents a virtual hostname and can be used to loadbalance incoming requests over multiple targets (e.g. Kubernetes `Services` can be a target, OR `Endpoints` can be targets).\",\n   \"properties\": {\n    \"algorithm\": {\n     \"description\": \"Algorithm is the load balancing algorithm to use.\",\n     \"enum\": [\n      \"round-robin\",\n      \"consistent-hashing\",\n      \"least-connections\"\n     ],\n     \"type\": \"string\"\n    },\n    \"hash_fallback\": {\n     \"description\": \"HashFallback defines What to use as hashing input if the primary hash_on does not return a hash. Accepted values are: \\\"none\\\", \\\"consumer\\\", \\\"ip\\\", \\\"header\\\", \\\"cookie\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_fallback_header\": {\n     \"description\": \"HashFallbackHeader is the header name to take the value from as hash input. Only required when \\\"hash_fallback\\\" is set to \\\"header\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_fallback_query_arg\": {\n     \"description\": \"HashFallbackQueryArg is the \\\"hash_fallback\\\" version of HashOnQueryArg.\",\n     \"type\": \"string\"\n    },\n    \"hash_fallback_uri_capture\": {\n     \"description\": \"HashFallbackURICapture is the \\\"hash_fallback\\\" version of HashOnURICapture.\",\n     \"type\": \"string\"\n    },\n    \"hash_on\": {\n     \"description\": \"HashOn defines what to use as hashing input. Accepted values are: \\\"none\\\", \\\"consumer\\\", \\\"ip\\\", \\\"header\\\", \\\"cookie\\\", \\\"path\\\", \\\"query_arg\\\", \\\"uri_capture\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_on_cookie\": {\n     \"description\": \"The cookie name to take the value from as hash input. Only required when \\\"hash_on\\\" or \\\"hash_fallback\\\" is set to \\\"cookie\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_on_cookie_path\": {\n     \"description\": \"The cookie path to set in the response headers. Only required when \\\"hash_on\\\" or \\\"hash_fallback\\\" is set to \\\"cookie\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_on_header\": {\n     \"description\": \"HashOnHeader defines the header name to take the value from as hash input. Only required when \\\"hash_on\\\" is set to \\\"header\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_on_query_arg\": {\n     \"description\": \"HashOnQueryArg is the query string parameter whose value is the hash input when \\\"hash_on\\\" is set to \\\"query_arg\\\".\",\n     \"type\": \"string\"\n    },\n    \"hash_on_uri_capture\": {\n     \"description\": \"HashOnURICapture is the name of the capture group whose value is the hash input when \\\"hash_on\\\" is set to \\\"uri_capture\\\".\",\n     \"type\": \"string\"\n    },\n    \"healthchecks\": {\n     \"description\": \"Healthchecks defines the health check configurations in Kong.\",\n     \"properties\": {\n      \"active\": {\n       \"description\": \"ActiveHealthcheck configures active health check probing.\",\n       \"properties\": {\n        \"concurrency\": {\n         \"minimum\": 1,\n         \"type\": \"integer\"\n        },\n        \"healthy\": {\n         \"description\": \"Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.\",\n         \"properties\": {\n          \"http_statuses\": {\n           \"items\": {\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"successes\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"http_path\": {\n         \"pattern\": \"^/.*$\",\n         \"type\": \"string\"\n        },\n        \"https_sni\": {\n         \"type\": \"string\"\n        },\n        \"https_verify_certificate\": {\n         \"type\": \"boolean\"\n        },\n        \"timeout\": {\n         \"minimum\": 0,\n         \"type\": \"integer\"\n        },\n        \"type\": {\n         \"type\": \"string\"\n        },\n        \"unhealthy\": {\n         \"description\": \"Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.\",\n         \"properties\": {\n          \"http_failures\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"http_statuses\": {\n           \"items\": {\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"tcp_failures\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"timeouts\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"passive\": {\n       \"description\": \"PassiveHealthcheck configures passive checks around passive health checks.\",\n       \"properties\": {\n        \"healthy\": {\n         \"description\": \"Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.\",\n         \"properties\": {\n          \"http_statuses\": {\n           \"items\": {\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"successes\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": {\n         \"type\": \"string\"\n        },\n        \"unhealthy\": {\n         \"description\": \"Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.\",\n         \"properties\": {\n          \"http_failures\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"http_statuses\": {\n           \"items\": {\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"tcp_failures\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"timeouts\": {\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"threshold\": {\n       \"type\": \"number\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"host_header\": {\n     \"description\": \"HostHeader is The hostname to be used as Host header when proxying requests through Kong.\",\n     \"type\": \"string\"\n    },\n    \"slots\": {\n     \"description\": \"Slots is the number of slots in the load balancer algorithm.\",\n     \"minimum\": 10,\n     \"type\": \"integer\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Kong Ingress\",\n \"type\": \"object\"\n}"}