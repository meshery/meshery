{"kind":"KongUpstreamPolicy","apiVersion":"configuration.konghq.com/v1beta1","displayName":"Kong Upstream Policy","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"kong","modelDisplayName":"Kong API Gateway","primaryColor":"#003459","published":true,"secondaryColor":"","shape":"circle","styleOverrides":"","subCategory":"API Gateway","svgColor":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e","svgComplete":"","svgWhite":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"},"model":{"name":"kong","version":"2.17.0-rc.5","displayName":"Kong API Gateway","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Cloud Native Network","metadata":null},"metadata":{"isAnnotation":false,"source_uri":"https://github.com/Kong/charts/releases/download/kong-2.33.0/kong-2.33.0.tgz","svgColor":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e","svgWhite":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;\u0026#x9;L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;\u0026#x9;h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"},"components":null,"relationships":null},"schema":"{\n \"description\": \"KongUpstreamPolicy allows configuring algorithm that should be used for load balancing traffic between Kong Upstream's Targets. It also allows configuring health checks for Kong Upstream's Targets. \\n Its configuration is similar to Kong Upstream object (https://docs.konghq.com/gateway/latest/admin-api/#upstream-object), and it is applied to Kong Upstream objects created by the controller. \\n It can be attached to Services. To attach it to a Service, it has to be annotated with `konghq.com/upstream-policy: \\u003cname\\u003e`, where `\\u003cname\\u003e` is the name of the KongUpstreamPolicy object in the same namespace as the Service. \\n When attached to a Service, it will affect all Kong Upstreams created for the Service. \\n When attached to a Service used in a Gateway API *Route rule with multiple BackendRefs, all of its Services MUST be configured with the same KongUpstreamPolicy. Otherwise, the controller will *ignore* the KongUpstreamPolicy. \\n Note: KongUpstreamPolicy doesn't implement Gateway API's GEP-713 strictly. In particular, it doesn't use the TargetRef for attaching to Services and Gateway API *Routes - annotations are used instead. This is to allow reusing the same KongUpstreamPolicy for multiple Services and Gateway API *Routes.\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Spec contains the configuration of the Kong upstream.\",\n   \"properties\": {\n    \"algorithm\": {\n     \"description\": \"Algorithm is the load balancing algorithm to use. Accepted values are: \\\"round-robin\\\", \\\"consistent-hashing\\\", \\\"least-connections\\\", \\\"latency\\\".\",\n     \"enum\": [\n      \"round-robin\",\n      \"consistent-hashing\",\n      \"least-connections\",\n      \"latency\"\n     ],\n     \"type\": \"string\"\n    },\n    \"hashOn\": {\n     \"description\": \"HashOn defines how to calculate hash for consistent-hashing load balancing algorithm. Algorithm must be set to \\\"consistent-hashing\\\" for this field to have effect.\",\n     \"properties\": {\n      \"cookie\": {\n       \"description\": \"Cookie is the name of the cookie to use as hash input.\",\n       \"type\": \"string\"\n      },\n      \"cookiePath\": {\n       \"description\": \"CookiePath is cookie path to set in the response headers.\",\n       \"type\": \"string\"\n      },\n      \"header\": {\n       \"description\": \"Header is the name of the header to use as hash input.\",\n       \"type\": \"string\"\n      },\n      \"input\": {\n       \"description\": \"Input allows using one of the predefined inputs (ip, consumer, path). For other parametrized inputs, use one of the fields below.\",\n       \"enum\": [\n        \"ip\",\n        \"consumer\",\n        \"path\"\n       ],\n       \"type\": \"string\"\n      },\n      \"queryArg\": {\n       \"description\": \"QueryArg is the name of the query argument to use as hash input.\",\n       \"type\": \"string\"\n      },\n      \"uriCapture\": {\n       \"description\": \"URICapture is the name of the URI capture group to use as hash input.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"hashOnFallback\": {\n     \"description\": \"HashOnFallback defines how to calculate hash for consistent-hashing load balancing algorithm if the primary hash function fails. Algorithm must be set to \\\"consistent-hashing\\\" for this field to have effect.\",\n     \"properties\": {\n      \"cookie\": {\n       \"description\": \"Cookie is the name of the cookie to use as hash input.\",\n       \"type\": \"string\"\n      },\n      \"cookiePath\": {\n       \"description\": \"CookiePath is cookie path to set in the response headers.\",\n       \"type\": \"string\"\n      },\n      \"header\": {\n       \"description\": \"Header is the name of the header to use as hash input.\",\n       \"type\": \"string\"\n      },\n      \"input\": {\n       \"description\": \"Input allows using one of the predefined inputs (ip, consumer, path). For other parametrized inputs, use one of the fields below.\",\n       \"enum\": [\n        \"ip\",\n        \"consumer\",\n        \"path\"\n       ],\n       \"type\": \"string\"\n      },\n      \"queryArg\": {\n       \"description\": \"QueryArg is the name of the query argument to use as hash input.\",\n       \"type\": \"string\"\n      },\n      \"uriCapture\": {\n       \"description\": \"URICapture is the name of the URI capture group to use as hash input.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"healthchecks\": {\n     \"description\": \"Healthchecks defines the health check configurations in Kong.\",\n     \"properties\": {\n      \"active\": {\n       \"description\": \"Active configures active health check probing.\",\n       \"properties\": {\n        \"concurrency\": {\n         \"description\": \"Concurrency is the number of targets to check concurrently.\",\n         \"minimum\": 1,\n         \"type\": \"integer\"\n        },\n        \"headers\": {\n         \"additionalProperties\": {\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         },\n         \"description\": \"Headers is a list of HTTP headers to add to the probe request.\",\n         \"type\": \"object\"\n        },\n        \"healthy\": {\n         \"description\": \"Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.\",\n         \"properties\": {\n          \"httpStatuses\": {\n           \"description\": \"HTTPStatuses is a list of HTTP status codes that Kong considers a success.\",\n           \"items\": {\n            \"description\": \"HTTPStatus is an HTTP status code.\",\n            \"maximum\": 599,\n            \"minimum\": 100,\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"description\": \"Interval is the interval between active health checks for an upstream in seconds when in a healthy state.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"successes\": {\n           \"description\": \"Successes is the number of successes to consider a target healthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"httpPath\": {\n         \"description\": \"HTTPPath is the path to use in GET HTTP request to run as a probe.\",\n         \"pattern\": \"^/.*$\",\n         \"type\": \"string\"\n        },\n        \"httpsSni\": {\n         \"description\": \"HTTPSSNI is the SNI to use in GET HTTPS request to run as a probe.\",\n         \"type\": \"string\"\n        },\n        \"httpsVerifyCertificate\": {\n         \"description\": \"HTTPSVerifyCertificate is a boolean value that indicates if the certificate should be verified.\",\n         \"type\": \"boolean\"\n        },\n        \"timeout\": {\n         \"description\": \"Timeout is the probe timeout in seconds.\",\n         \"minimum\": 0,\n         \"type\": \"integer\"\n        },\n        \"type\": {\n         \"description\": \"Type determines whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are \\\"http\\\", \\\"https\\\", \\\"tcp\\\", \\\"grpc\\\", \\\"grpcs\\\".\",\n         \"enum\": [\n          \"http\",\n          \"https\",\n          \"tcp\",\n          \"grpc\",\n          \"grpcs\"\n         ],\n         \"type\": \"string\"\n        },\n        \"unhealthy\": {\n         \"description\": \"Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy for an upstream.\",\n         \"properties\": {\n          \"httpFailures\": {\n           \"description\": \"HTTPFailures is the number of failures to consider a target unhealthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"httpStatuses\": {\n           \"description\": \"HTTPStatuses is a list of HTTP status codes that Kong considers a failure.\",\n           \"items\": {\n            \"description\": \"HTTPStatus is an HTTP status code.\",\n            \"maximum\": 599,\n            \"minimum\": 100,\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"description\": \"Interval is the interval between active health checks for an upstream in seconds when in an unhealthy state.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"tcpFailures\": {\n           \"description\": \"TCPFailures is the number of TCP failures in a row to consider a target unhealthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"timeouts\": {\n           \"description\": \"Timeouts is the number of timeouts in a row to consider a target unhealthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"passive\": {\n       \"description\": \"Passive configures passive health check probing.\",\n       \"properties\": {\n        \"healthy\": {\n         \"description\": \"Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.\",\n         \"properties\": {\n          \"httpStatuses\": {\n           \"description\": \"HTTPStatuses is a list of HTTP status codes that Kong considers a success.\",\n           \"items\": {\n            \"description\": \"HTTPStatus is an HTTP status code.\",\n            \"maximum\": 599,\n            \"minimum\": 100,\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"description\": \"Interval is the interval between active health checks for an upstream in seconds when in a healthy state.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"successes\": {\n           \"description\": \"Successes is the number of successes to consider a target healthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": {\n         \"description\": \"Type determines whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. Accepted values are \\\"http\\\", \\\"https\\\", \\\"tcp\\\", \\\"grpc\\\", \\\"grpcs\\\".\",\n         \"enum\": [\n          \"http\",\n          \"https\",\n          \"tcp\",\n          \"grpc\",\n          \"grpcs\"\n         ],\n         \"type\": \"string\"\n        },\n        \"unhealthy\": {\n         \"description\": \"Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.\",\n         \"properties\": {\n          \"httpFailures\": {\n           \"description\": \"HTTPFailures is the number of failures to consider a target unhealthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"httpStatuses\": {\n           \"description\": \"HTTPStatuses is a list of HTTP status codes that Kong considers a failure.\",\n           \"items\": {\n            \"description\": \"HTTPStatus is an HTTP status code.\",\n            \"maximum\": 599,\n            \"minimum\": 100,\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"interval\": {\n           \"description\": \"Interval is the interval between active health checks for an upstream in seconds when in an unhealthy state.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"tcpFailures\": {\n           \"description\": \"TCPFailures is the number of TCP failures in a row to consider a target unhealthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"timeouts\": {\n           \"description\": \"Timeouts is the number of timeouts in a row to consider a target unhealthy.\",\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"threshold\": {\n       \"description\": \"Threshold is the minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy.\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"slots\": {\n     \"description\": \"Slots is the number of slots in the load balancer algorithm. If not set, the default value in Kong for the algorithm is used.\",\n     \"maximum\": 65536,\n     \"minimum\": 10,\n     \"type\": \"integer\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Kong Upstream Policy\",\n \"type\": \"object\",\n \"x-kubernetes-validations\": [\n  {\n   \"message\": \"Only one of spec.hashOn.(input|cookie|header|uriCapture|queryArg) can be set.\",\n   \"rule\": \"has(self.spec.hashOn) ? [has(self.spec.hashOn.input), has(self.spec.hashOn.cookie), has(self.spec.hashOn.header), has(self.spec.hashOn.uriCapture), has(self.spec.hashOn.queryArg)].filter(fieldSet, fieldSet == true).size() \\u003c= 1 : true\"\n  },\n  {\n   \"message\": \"When spec.hashOn.cookie is set, spec.hashOn.cookiePath is required.\",\n   \"rule\": \"has(self.spec.hashOn) \\u0026\\u0026 has(self.spec.hashOn.cookie) ? has(self.spec.hashOn.cookiePath) : true\"\n  },\n  {\n   \"message\": \"When spec.hashOn.cookiePath is set, spec.hashOn.cookie is required.\",\n   \"rule\": \"has(self.spec.hashOn) \\u0026\\u0026 has(self.spec.hashOn.cookiePath) ? has(self.spec.hashOn.cookie) : true\"\n  },\n  {\n   \"message\": \"spec.algorithm must be set to \\\"consistent-hashing\\\" when spec.hashOn is set.\",\n   \"rule\": \"has(self.spec.hashOn) ? has(self.spec.algorithm) \\u0026\\u0026 self.spec.algorithm == \\\"consistent-hashing\\\" : true\"\n  },\n  {\n   \"message\": \"Only one of spec.hashOnFallback.(input|header|uriCapture|queryArg) can be set.\",\n   \"rule\": \"has(self.spec.hashOnFallback) ? [has(self.spec.hashOnFallback.input), has(self.spec.hashOnFallback.header), has(self.spec.hashOnFallback.uriCapture), has(self.spec.hashOnFallback.queryArg)].filter(fieldSet, fieldSet == true).size() \\u003c= 1 : true\"\n  },\n  {\n   \"message\": \"spec.algorithm must be set to \\\"consistent-hashing\\\" when spec.hashOnFallback is set.\",\n   \"rule\": \"has(self.spec.hashOnFallback) ? has(self.spec.algorithm) \\u0026\\u0026 self.spec.algorithm == \\\"consistent-hashing\\\" : true\"\n  },\n  {\n   \"message\": \"spec.hashOnFallback.cookie must not be set.\",\n   \"rule\": \"has(self.spec.hashOnFallback) ? !has(self.spec.hashOnFallback.cookie) : true\"\n  },\n  {\n   \"message\": \"spec.hashOnFallback.cookiePath must not be set.\",\n   \"rule\": \"has(self.spec.hashOnFallback) ? !has(self.spec.hashOnFallback.cookiePath) : true\"\n  },\n  {\n   \"message\": \"spec.healthchecks.passive.healthy.interval must not be set.\",\n   \"rule\": \"has(self.spec.healthchecks) \\u0026\\u0026 has(self.spec.healthchecks.passive) \\u0026\\u0026 has(self.spec.healthchecks.passive.healthy) ? !has(self.spec.healthchecks.passive.healthy.interval) : true\"\n  },\n  {\n   \"message\": \"spec.healthchecks.passive.unhealthy.interval must not be set.\",\n   \"rule\": \"has(self.spec.healthchecks) \\u0026\\u0026 has(self.spec.healthchecks.passive) \\u0026\\u0026 has(self.spec.healthchecks.passive.unhealthy) ? !has(self.spec.healthchecks.passive.unhealthy.interval) : true\"\n  },\n  {\n   \"message\": \"spec.hashOnFallback must not be set when spec.hashOn.cookie is set.\",\n   \"rule\": \"has(self.spec.hashOn) \\u0026\\u0026 has(self.spec.hashOn.cookie) ? !has(self.spec.hashOnFallback) : true\"\n  }\n ]\n}"}