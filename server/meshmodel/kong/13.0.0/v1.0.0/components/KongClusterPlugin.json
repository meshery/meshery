{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "KongClusterPlugin",
   "schema": "{\n \"description\": \"KongClusterPlugin is the Schema for the kongclusterplugins API.\",\n \"properties\": {\n  \"config\": {\n   \"description\": \"Config contains the plugin configuration. It's a list of keys and values\\nrequired to configure the plugin.\\nPlease read the documentation of the plugin being configured to set values\\nin here. For any plugin in Kong, anything that goes in the `config` JSON\\nkey in the Admin API request, goes into this property.\\nOnly one of `config` or `configFrom` may be used in a KongClusterPlugin, not both at once.\",\n   \"format\": \"textarea\",\n   \"type\": \"string\"\n  },\n  \"configFrom\": {\n   \"description\": \"ConfigFrom references a secret containing the plugin configuration.\\nThis should be used when the plugin configuration contains sensitive information,\\nsuch as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin.\\nOnly one of `config` or `configFrom` may be used in a KongClusterPlugin, not both at once.\",\n   \"properties\": {\n    \"secretKeyRef\": {\n     \"description\": \"Specifies a name, a namespace, and a key of a secret to refer to.\",\n     \"properties\": {\n      \"key\": {\n       \"description\": \"The key containing the value.\",\n       \"type\": \"string\"\n      },\n      \"name\": {\n       \"description\": \"The secret containing the key.\",\n       \"type\": \"string\"\n      },\n      \"namespace\": {\n       \"description\": \"The namespace containing the secret.\",\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"key\",\n      \"name\",\n      \"namespace\"\n     ],\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"secretKeyRef\"\n   ],\n   \"type\": \"object\"\n  },\n  \"configPatches\": {\n   \"description\": \"ConfigPatches represents JSON patches to the configuration of the plugin.\\nEach item means a JSON patch to add something in the configuration,\\nwhere path is specified in `path` and value is in `valueFrom` referencing\\na key in a secret.\\nWhen Config is specified, patches will be applied to the configuration in Config.\\nOtherwise, patches will be applied to an empty object.\",\n   \"items\": {\n    \"description\": \"NamespacedConfigPatch is a JSON patch to add values from secrets to KongClusterPlugin\\nto the generated configuration of plugin in Kong.\",\n    \"properties\": {\n     \"path\": {\n      \"description\": \"Path is the JSON path to add the patch.\",\n      \"type\": \"string\"\n     },\n     \"valueFrom\": {\n      \"description\": \"ValueFrom is the reference to a key of a secret where the patched value comes from.\",\n      \"properties\": {\n       \"secretKeyRef\": {\n        \"description\": \"Specifies a name, a namespace, and a key of a secret to refer to.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"The key containing the value.\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"The secret containing the key.\",\n          \"type\": \"string\"\n         },\n         \"namespace\": {\n          \"description\": \"The namespace containing the secret.\",\n          \"type\": \"string\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"name\",\n         \"namespace\"\n        ],\n        \"type\": \"object\"\n       }\n      },\n      \"required\": [\n       \"secretKeyRef\"\n      ],\n      \"type\": \"object\"\n     }\n    },\n    \"required\": [\n     \"path\",\n     \"valueFrom\"\n    ],\n    \"type\": \"object\"\n   },\n   \"type\": \"array\"\n  },\n  \"consumerRef\": {\n   \"description\": \"ConsumerRef is a reference to a particular consumer.\",\n   \"type\": \"string\"\n  },\n  \"disabled\": {\n   \"description\": \"Disabled set if the plugin is disabled or not.\",\n   \"type\": \"boolean\"\n  },\n  \"instance_name\": {\n   \"description\": \"InstanceName is an optional custom name to identify an instance of the plugin. This is useful when running the\\nsame plugin in multiple contexts, for example, on multiple services.\",\n   \"type\": \"string\"\n  },\n  \"ordering\": {\n   \"description\": \"Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise.\\n`\\u003cphase\\u003e` is a request processing phase (for example, `access` or `body_filter`) and\\n`\\u003cplugin\\u003e` is the name of the plugin that will run before or after the KongPlugin.\\nFor example, a KongPlugin with `plugin: rate-limiting` and `before.access: [\\\"key-auth\\\"]`\\nwill create a rate limiting plugin that limits requests _before_ they are authenticated.\",\n   \"properties\": {\n    \"after\": {\n     \"additionalProperties\": {\n      \"items\": {\n       \"type\": \"string\"\n      },\n      \"type\": \"array\"\n     },\n     \"description\": \"PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order\",\n     \"type\": \"object\"\n    },\n    \"before\": {\n     \"additionalProperties\": {\n      \"items\": {\n       \"type\": \"string\"\n      },\n      \"type\": \"array\"\n     },\n     \"description\": \"PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order\",\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"plugin\": {\n   \"description\": \"PluginName is the name of the plugin to which to apply the config.\",\n   \"type\": \"string\"\n  },\n  \"protocols\": {\n   \"description\": \"Protocols configures plugin to run on requests received on specific\\nprotocols.\",\n   \"items\": {\n    \"description\": \"KongProtocol is a valid Kong protocol.\\nThis alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342\",\n    \"enum\": [\n     \"http\",\n     \"https\",\n     \"grpc\",\n     \"grpcs\",\n     \"tcp\",\n     \"tls\",\n     \"udp\"\n    ],\n    \"type\": \"string\"\n   },\n   \"type\": \"array\"\n  },\n  \"run_on\": {\n   \"description\": \"RunOn configures the plugin to run on the first or the second or both\\nnodes in case of a service mesh deployment.\",\n   \"enum\": [\n    \"first\",\n    \"second\",\n    \"all\"\n   ],\n   \"type\": \"string\"\n  }\n },\n \"required\": [\n  \"plugin\"\n ],\n \"title\": \"Kong Cluster Plugin\",\n \"type\": \"object\",\n \"x-kubernetes-validations\": [\n  {\n   \"message\": \"Using both config and configFrom fields is not allowed.\",\n   \"rule\": \"!(has(self.config) \\u0026\\u0026 has(self.configFrom))\"\n  },\n  {\n   \"message\": \"Using both configFrom and configPatches fields is not allowed.\",\n   \"rule\": \"!(has(self.configFrom) \\u0026\\u0026 has(self.configPatches))\"\n  },\n  {\n   \"message\": \"The plugin field is immutable\",\n   \"rule\": \"self.plugin == oldSelf.plugin\"\n  }\n ]\n}",
   "version": "configuration.konghq.com/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Kong Cluster Plugin",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": false,
   "published": false,
   "source_uri": "https://charts.bitnami.com/bitnami/kong-13.0.0.tgz"
  },
  "model": {
   "category": {
    "name": "Cloud Native Network"
   },
   "displayName": "Kong API Gateway",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "primaryColor": "#003459",
    "shape": "circle",
    "source_uri": "https://charts.bitnami.com/bitnami/kong-13.0.0.tgz",
    "styleOverrides": "",
    "svgColor": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e",
    "svgComplete": "",
    "svgWhite": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;\u0026#x9;L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;\u0026#x9;h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"
   },
   "model": {
    "version": "13.0.0"
   },
   "name": "kong",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "enabled",
   "subCategory": "API Gateway",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#003459",
   "shape": "circle",
   "svgColor": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n\t.st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\n\tL17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\n\th-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e\n\u003c/svg\u003e",
   "svgWhite": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n         viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" width='45.3' height='40.8'\u003e\n\u003cstyle type=\"text/css\"\u003e\n        .st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\n        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\n        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e\n\u003c/svg\u003e"
  },
  "version": "v1.0.0"
 }