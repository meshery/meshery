{
  "id": "00000000-0000-0000-0000-000000000000",
  "kind": "AccessEntry",
  "apiVersion": "eks.services.k8s.aws/v1alpha1",
  "displayName": "Access Entry",
  "format": "JSON",
  "hostID": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "isNamespaced": true
  },
  "model": {
   "id": "00000000-0000-0000-0000-000000000000",
   "name": "aws-eks-controller",
   "version": "v1.3.2",
   "displayName": "aws-eks-controller",
   "hostID": "00000000-0000-0000-0000-000000000000",
   "category": {
    "name": "",
    "metadata": null
   },
   "metadata": {
    "source_uri": "git://github.com/aws-controllers-k8s/eks-controller/main/helm"
   },
   "components": null,
   "relationships": null
  },
  "schema": "{\n \"description\": \"AccessEntry is the Schema for the AccessEntries API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"AccessEntrySpec defines the desired state of AccessEntry.\\n\\n\\nAn access entry allows an IAM principal (user or role) to access your cluster.\\nAccess entries can replace the need to maintain the aws-auth ConfigMap for\\nauthentication. For more information about access entries, see Access entries\\n(https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html) in\\nthe Amazon EKS User Guide.\",\n   \"properties\": {\n    \"accessPolicies\": {\n     \"items\": {\n      \"properties\": {\n       \"accessScope\": {\n        \"description\": \"The scope of an AccessPolicy that's associated to an AccessEntry.\",\n        \"properties\": {\n         \"namespaces\": {\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         },\n         \"type\": {\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"policyARN\": {\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"clusterName\": {\n     \"description\": \"The name of your cluster.\",\n     \"type\": \"string\"\n    },\n    \"clusterRef\": {\n     \"description\": \"AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\\ntype to provide more user friendly syntax for references using 'from' field\\nEx:\\nAPIIDRef:\\n\\n\\n\\tfrom:\\n\\t  name: my-api\",\n     \"properties\": {\n      \"from\": {\n       \"description\": \"AWSResourceReference provides all the values necessary to reference another\\nk8s resource for finding the identifier(Id/ARN/Name)\",\n       \"properties\": {\n        \"name\": {\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"kubernetesGroups\": {\n     \"description\": \"The value for name that you've specified for kind: Group as a subject in\\na Kubernetes RoleBinding or ClusterRoleBinding object. Amazon EKS doesn't\\nconfirm that the value for name exists in any bindings on your cluster. You\\ncan specify one or more names.\\n\\n\\nKubernetes authorizes the principalArn of the access entry to access any\\ncluster objects that you've specified in a Kubernetes Role or ClusterRole\\nobject that is also specified in a binding's roleRef. For more information\\nabout creating Kubernetes RoleBinding, ClusterRoleBinding, Role, or ClusterRole\\nobjects, see Using RBAC Authorization in the Kubernetes documentation (https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\\n\\n\\nIf you want Amazon EKS to authorize the principalArn (instead of, or in addition\\nto Kubernetes authorizing the principalArn), you can associate one or more\\naccess policies to the access entry using AssociateAccessPolicy. If you associate\\nany access policies, the principalARN has all permissions assigned in the\\nassociated access policies and all permissions in any Kubernetes Role or\\nClusterRole objects that the group names are bound to.\",\n     \"items\": {\n      \"type\": \"string\"\n     },\n     \"type\": \"array\"\n    },\n    \"principalARN\": {\n     \"description\": \"The ARN of the IAM principal for the AccessEntry. You can specify one ARN\\nfor each access entry. You can't specify the same ARN in more than one access\\nentry. This value can't be changed after access entry creation.\\n\\n\\nThe valid principals differ depending on the type of the access entry in\\nthe type field. The only valid ARN is IAM roles for the types of access entries\\nfor nodes: . You can use every IAM principal type for STANDARD access entries.\\nYou can't use the STS session principal type with access entries because\\nthis is a temporary principal for each session and not a permanent identity\\nthat can be assigned permissions.\\n\\n\\nIAM best practices (https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#bp-users-federation-idp)\\nrecommend using IAM roles with temporary credentials, rather than IAM users\\nwith long-term credentials.\",\n     \"type\": \"string\"\n    },\n    \"tags\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"description\": \"Metadata that assists with categorization and organization. Each tag consists\\nof a key and an optional value. You define both. Tags don't propagate to\\nany other cluster or Amazon Web Services resources.\",\n     \"type\": \"object\"\n    },\n    \"type\": {\n     \"description\": \"The type of the new access entry. Valid values are Standard, FARGATE_LINUX,\\nEC2_LINUX, and EC2_WINDOWS.\\n\\n\\nIf the principalArn is for an IAM role that's used for self-managed Amazon\\nEC2 nodes, specify EC2_LINUX or EC2_WINDOWS. Amazon EKS grants the necessary\\npermissions to the node for you. If the principalArn is for any other purpose,\\nspecify STANDARD. If you don't specify a value, Amazon EKS sets the value\\nto STANDARD. It's unnecessary to create access entries for IAM roles used\\nwith Fargate profiles or managed Amazon EC2 nodes, because Amazon EKS creates\\nentries in the aws-auth ConfigMap for the roles. You can't change this value\\nonce you've created the access entry.\\n\\n\\nIf you set the value to EC2_LINUX or EC2_WINDOWS, you can't specify values\\nfor kubernetesGroups, or associate an AccessPolicy to the access entry.\",\n     \"type\": \"string\"\n    },\n    \"username\": {\n     \"description\": \"The username to authenticate to Kubernetes with. We recommend not specifying\\na username and letting Amazon EKS specify it for you. For more information\\nabout the value Amazon EKS specifies for you, or constraints before specifying\\nyour own username, see Creating access entries (https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html#creating-access-entries)\\nin the Amazon EKS User Guide.\",\n     \"type\": \"string\"\n    }\n   },\n   \"required\": [\n    \"principalARN\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Access Entry\",\n \"type\": \"object\"\n}"
 }