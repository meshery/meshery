{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "ClickHouseInstallationTemplate",
   "schema": "{\n \"description\": \"define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more ClickHouse clusters\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Specification of the desired behavior of one or more ClickHouse clusters\\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md\\\"\\n\",\n   \"properties\": {\n    \"configuration\": {\n     \"description\": \"allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource\",\n     \"properties\": {\n      \"clusters\": {\n       \"description\": \"describes ClickHouse clusters layout and allows change settings on cluster-level, shard-level and replica-level\\nevery cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`\\nall Pods will rendered in \\u003cremote_server\\u003e part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`\\nClusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\nIf `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables\\n\",\n       \"items\": {\n        \"properties\": {\n         \"files\": {\n          \"description\": \"optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files`\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"layout\": {\n          \"description\": \"describe current cluster layout, how much shards in cluster, how much replica in shard\\nallows override settings on each shard and replica separatelly\\n\",\n          \"properties\": {\n           \"replicas\": {\n            \"description\": \"optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do\",\n            \"items\": {\n             \"properties\": {\n              \"files\": {\n               \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"name\": {\n               \"description\": \"optional, by default replica name is generated, but you can override it and setup custom name\",\n               \"maxLength\": 15,\n               \"minLength\": 1,\n               \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n               \"type\": \"string\"\n              },\n              \"settings\": {\n               \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"shards\": {\n               \"description\": \"optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\",\n               \"items\": {\n                \"properties\": {\n                 \"files\": {\n                  \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"httpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`\\nallows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"interserverHTTPPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`\\nallows connect between replicas inside same shard during fetch replicated data parts HTTP protocol\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"name\": {\n                  \"description\": \"optional, by default shard name is generated, but you can override it and setup custom name\",\n                  \"maxLength\": 15,\n                  \"minLength\": 1,\n                  \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n                  \"type\": \"string\"\n                 },\n                 \"settings\": {\n                  \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"tcpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`\\nallows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"templates\": {\n                  \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`\\n\",\n                  \"properties\": {\n                   \"clusterServiceTemplate\": {\n                    \"description\": \"optional, fully ignores for shard-level\",\n                    \"type\": \"string\"\n                   },\n                   \"dataVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"hostTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure each `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"logVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"podTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"replicaServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"serviceTemplate\": {\n                    \"description\": \"optional, fully ignores for shard-level\",\n                    \"type\": \"string\"\n                   },\n                   \"shardServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"volumeClaimTemplate\": {\n                    \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                    \"type\": \"string\"\n                   }\n                  },\n                  \"type\": \"object\"\n                 }\n                },\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              },\n              \"shardsCount\": {\n               \"description\": \"optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`\",\n               \"minimum\": 1,\n               \"type\": \"integer\"\n              },\n              \"templates\": {\n               \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`\\n\",\n               \"properties\": {\n                \"clusterServiceTemplate\": {\n                 \"description\": \"optional, fully ignores for replica-level\",\n                 \"type\": \"string\"\n                },\n                \"dataVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"hostTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one replica\",\n                 \"type\": \"string\"\n                },\n                \"logVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"podTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one replica\",\n                 \"type\": \"string\"\n                },\n                \"replicaServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one replica\",\n                 \"type\": \"string\"\n                },\n                \"serviceTemplate\": {\n                 \"description\": \"optional, fully ignores for replica-level\",\n                 \"type\": \"string\"\n                },\n                \"shardServiceTemplate\": {\n                 \"description\": \"optional, fully ignores for replica-level\",\n                 \"type\": \"string\"\n                },\n                \"volumeClaimTemplate\": {\n                 \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                 \"type\": \"string\"\n                }\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"replicasCount\": {\n            \"description\": \"how much replicas in each shards for current ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance, every shard contains 1 replica by default\",\n            \"type\": \"integer\"\n           },\n           \"shards\": {\n            \"description\": \"optional, allows override top-level `chi.spec.configuration`, cluster-level `chi.spec.configuration.clusters` settings for each shard separately, use it only if you fully understand what you do\",\n            \"items\": {\n             \"properties\": {\n              \"definitionType\": {\n               \"description\": \"DEPRECATED - to be removed soon\",\n               \"type\": \"string\"\n              },\n              \"files\": {\n               \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"internalReplication\": {\n               \"description\": \"optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` \\u003e 1 and 0 otherwise\\nallows setup \\u003cinternal_replication\\u003e setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,\\nwill apply in \\u003cremote_servers\\u003e inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml\\nMore details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\n\",\n               \"enum\": [\n                \"\",\n                \"0\",\n                \"1\",\n                \"False\",\n                \"false\",\n                \"True\",\n                \"true\",\n                \"No\",\n                \"no\",\n                \"Yes\",\n                \"yes\",\n                \"Off\",\n                \"off\",\n                \"On\",\n                \"on\",\n                \"Disable\",\n                \"disable\",\n                \"Enable\",\n                \"enable\",\n                \"Disabled\",\n                \"disabled\",\n                \"Enabled\",\n                \"enabled\"\n               ],\n               \"type\": \"string\"\n              },\n              \"name\": {\n               \"description\": \"optional, by default shard name is generated, but you can override it and setup custom name\",\n               \"maxLength\": 15,\n               \"minLength\": 1,\n               \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n               \"type\": \"string\"\n              },\n              \"replicas\": {\n               \"description\": \"optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`\\n\",\n               \"items\": {\n                \"properties\": {\n                 \"files\": {\n                  \"description\": \"optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"httpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`\\nallows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"interserverHTTPPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`\\nallows connect between replicas inside same shard during fetch replicated data parts HTTP protocol\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"name\": {\n                  \"description\": \"optional, by default replica name is generated, but you can override it and setup custom name\",\n                  \"maxLength\": 15,\n                  \"minLength\": 1,\n                  \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n                  \"type\": \"string\"\n                 },\n                 \"settings\": {\n                  \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"tcpPort\": {\n                  \"description\": \"optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`\\nallows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`\\n\",\n                  \"maximum\": 65535,\n                  \"minimum\": 1,\n                  \"type\": \"integer\"\n                 },\n                 \"templates\": {\n                  \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`\\n\",\n                  \"properties\": {\n                   \"clusterServiceTemplate\": {\n                    \"description\": \"optional, fully ignores for replica-level\",\n                    \"type\": \"string\"\n                   },\n                   \"dataVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"hostTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one replica\",\n                    \"type\": \"string\"\n                   },\n                   \"logVolumeClaimTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                    \"type\": \"string\"\n                   },\n                   \"podTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one replica\",\n                    \"type\": \"string\"\n                   },\n                   \"replicaServiceTemplate\": {\n                    \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one replica\",\n                    \"type\": \"string\"\n                   },\n                   \"serviceTemplate\": {\n                    \"description\": \"optional, fully ignores for replica-level\",\n                    \"type\": \"string\"\n                   },\n                   \"shardServiceTemplate\": {\n                    \"description\": \"optional, fully ignores for replica-level\",\n                    \"type\": \"string\"\n                   },\n                   \"volumeClaimTemplate\": {\n                    \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                    \"type\": \"string\"\n                   }\n                  },\n                  \"type\": \"object\"\n                 }\n                },\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              },\n              \"replicasCount\": {\n               \"description\": \"optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,\\nshard contains 1 replica by default\\noverride cluster-level `chi.spec.configuration.clusters.layout.replicasCount`\\n\",\n               \"minimum\": 1,\n               \"type\": \"integer\"\n              },\n              \"settings\": {\n               \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"templates\": {\n               \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard\\noverride top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`\\n\",\n               \"properties\": {\n                \"clusterServiceTemplate\": {\n                 \"description\": \"optional, fully ignores for shard-level\",\n                 \"type\": \"string\"\n                },\n                \"dataVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"hostTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure each `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"logVolumeClaimTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"podTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"replicaServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"serviceTemplate\": {\n                 \"description\": \"optional, fully ignores for shard-level\",\n                 \"type\": \"string\"\n                },\n                \"shardServiceTemplate\": {\n                 \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n                 \"type\": \"string\"\n                },\n                \"volumeClaimTemplate\": {\n                 \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                 \"type\": \"string\"\n                }\n               },\n               \"type\": \"object\"\n              },\n              \"weight\": {\n               \"description\": \"optional, 1 by default, allows setup shard \\u003cweight\\u003e setting which will use during insert into tables with `Distributed` engine,\\nwill apply in \\u003cremote_servers\\u003e inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml\\nMore details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\n\",\n               \"type\": \"integer\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"shardsCount\": {\n            \"description\": \"how much shards for current ClickHouse cluster will run in Kubernetes, each shard contains shared-nothing part of data and contains set of replicas, cluster contains 1 shard by default\",\n            \"type\": \"integer\"\n           },\n           \"type\": {\n            \"description\": \"DEPRECATED - to be removed soon\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"name\": {\n          \"description\": \"cluster name, used to identify set of ClickHouse servers and wide used during generate names of related Kubernetes resources\",\n          \"maxLength\": 15,\n          \"minLength\": 1,\n          \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n          \"type\": \"string\"\n         },\n         \"settings\": {\n          \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"templates\": {\n          \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster\\noverride top-level `chi.spec.configuration.templates`\\n\",\n          \"properties\": {\n           \"clusterServiceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"dataVolumeClaimTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"hostTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure each `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"logVolumeClaimTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"podTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"replicaServiceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"serviceTemplate\": {\n            \"description\": \"optional, fully ignores for cluster-level\",\n            \"type\": \"string\"\n           },\n           \"shardServiceTemplate\": {\n            \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one cluster\",\n            \"type\": \"string\"\n           },\n           \"volumeClaimTemplate\": {\n            \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"zookeeper\": {\n          \"description\": \"optional, allows configure \\u003cyandex\\u003e\\u003czookeeper\\u003e..\\u003c/zookeeper\\u003e\\u003c/yandex\\u003e section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.zookeeper` settings\\n\",\n          \"properties\": {\n           \"identity\": {\n            \"description\": \"optional access credentials string with `user:password` format used when use digest authorization in Zookeeper\",\n            \"type\": \"string\"\n           },\n           \"nodes\": {\n            \"description\": \"describe every available zookeeper cluster node for interaction\",\n            \"items\": {\n             \"properties\": {\n              \"host\": {\n               \"description\": \"dns name or ip address for Zookeeper node\",\n               \"type\": \"string\"\n              },\n              \"port\": {\n               \"description\": \"TCP port which used to connect to Zookeeper node\",\n               \"maximum\": 65535,\n               \"minimum\": 0,\n               \"type\": \"integer\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"operation_timeout_ms\": {\n            \"description\": \"one operation timeout during Zookeeper transactions\",\n            \"type\": \"integer\"\n           },\n           \"root\": {\n            \"description\": \"optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)\",\n            \"type\": \"string\"\n           },\n           \"session_timeout_ms\": {\n            \"description\": \"session timeout during connect to Zookeeper\",\n            \"type\": \"integer\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"files\": {\n       \"description\": \"allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\nevery key in this object is the file name\\nevery value in this object is the file content\\nyou can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html\\neach key could contains prefix like USERS, COMMON, HOST or config.d, users.d, cond.d, wrong prefixes will ignored, subfolders also will ignored\\nMore details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"profiles\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003cprofiles\\u003e..\\u003c/profiles\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure any aspect of settings profile\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"quotas\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003cquotas\\u003e..\\u003c/quotas\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure any aspect of resource quotas\\nMore details: https://clickhouse.tech/docs/en/operations/quotas/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"settings\": {\n       \"description\": \"allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"users\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003cusers\\u003e..\\u003c/users\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure password hashed, authorization restrictions, database level security row filters etc.\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings-users/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers\\n\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      },\n      \"zookeeper\": {\n       \"description\": \"allows configure \\u003cyandex\\u003e\\u003czookeeper\\u003e..\\u003c/zookeeper\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`\\n`clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/\\ncurrently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`\\nMore details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper\\n\",\n       \"properties\": {\n        \"identity\": {\n         \"description\": \"optional access credentials string with `user:password` format used when use digest authorization in Zookeeper\",\n         \"type\": \"string\"\n        },\n        \"nodes\": {\n         \"description\": \"describe every available zookeeper cluster node for interaction\",\n         \"items\": {\n          \"properties\": {\n           \"host\": {\n            \"description\": \"dns name or ip address for Zookeeper node\",\n            \"type\": \"string\"\n           },\n           \"port\": {\n            \"description\": \"TCP port which used to connect to Zookeeper node\",\n            \"maximum\": 65535,\n            \"minimum\": 0,\n            \"type\": \"integer\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"type\": \"array\"\n        },\n        \"operation_timeout_ms\": {\n         \"description\": \"one operation timeout during Zookeeper transactions\",\n         \"type\": \"integer\"\n        },\n        \"root\": {\n         \"description\": \"optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)\",\n         \"type\": \"string\"\n        },\n        \"session_timeout_ms\": {\n         \"description\": \"session timeout during connect to Zookeeper\",\n         \"type\": \"integer\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"defaults\": {\n     \"description\": \"define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level\\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults\\n\",\n     \"properties\": {\n      \"distributedDDL\": {\n       \"description\": \"allows change `\\u003cyandex\\u003e\\u003cdistributed_ddl\\u003e\\u003c/distributed_ddl\\u003e\\u003c/yandex\\u003e` settings\\nMore info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl\\n\",\n       \"properties\": {\n        \"profile\": {\n         \"description\": \"Settings from this profile will be used to execute DDL queries\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"replicasUseFQDN\": {\n       \"description\": \"define should replicas be specified by FQDN in `\\u003chost\\u003e\\u003c/host\\u003e`, then \\\"no\\\" then will use short hostname and clickhouse-server will use kubernetes default suffixes for properly DNS lookup\\n\\\"yes\\\" by default\\n\",\n       \"enum\": [\n        \"\",\n        \"0\",\n        \"1\",\n        \"False\",\n        \"false\",\n        \"True\",\n        \"true\",\n        \"No\",\n        \"no\",\n        \"Yes\",\n        \"yes\",\n        \"Off\",\n        \"off\",\n        \"On\",\n        \"on\",\n        \"Disable\",\n        \"disable\",\n        \"Enable\",\n        \"enable\",\n        \"Disabled\",\n        \"disabled\",\n        \"Enabled\",\n        \"enabled\"\n       ],\n       \"type\": \"string\"\n      },\n      \"templates\": {\n       \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource\",\n       \"properties\": {\n        \"clusterServiceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"dataVolumeClaimTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"hostTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n         \"type\": \"string\"\n        },\n        \"logVolumeClaimTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"podTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"replicaServiceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"serviceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n         \"type\": \"string\"\n        },\n        \"shardServiceTemplate\": {\n         \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n         \"type\": \"string\"\n        },\n        \"volumeClaimTemplate\": {\n         \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"namespaceDomainPattern\": {\n     \"description\": \"custom domain suffix which will add to end of `Service` or `Pod` name, use it when you use custom cluster domain in your Kubernetes cluster\",\n     \"type\": \"string\"\n    },\n    \"reconciling\": {\n     \"description\": \"optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side\",\n     \"properties\": {\n      \"cleanup\": {\n       \"description\": \"optional, define behavior for cleanup Kubernetes resources during reconcile cycle\",\n       \"properties\": {\n        \"reconcileFailedObjects\": {\n         \"description\": \"what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`\",\n         \"properties\": {\n          \"configMap\": {\n           \"description\": \"behavior policy for failed ConfigMap reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"pvc\": {\n           \"description\": \"behavior policy for failed PVC reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"service\": {\n           \"description\": \"behavior policy for failed Service reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"statefulSet\": {\n           \"description\": \"behavior policy for failed StatefulSet reconciling, Retain by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"unknownObjects\": {\n         \"description\": \"what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`\",\n         \"properties\": {\n          \"configMap\": {\n           \"description\": \"behavior policy for unknown ConfigMap, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"pvc\": {\n           \"description\": \"behavior policy for unknown PVC, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"service\": {\n           \"description\": \"behavior policy for unknown Service, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          },\n          \"statefulSet\": {\n           \"description\": \"behavior policy for unknown StatefulSet, Delete by default\",\n           \"enum\": [\n            \"Retain\",\n            \"Delete\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"configMapPropagationTimeout\": {\n       \"description\": \"timeout in seconds when `clickhouse-operator` will wait when applied `ConfigMap` during reconcile `ClickhouseInstallation` pods will updated from cache\\nsee details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically\\n\",\n       \"maximum\": 3600,\n       \"minimum\": 0,\n       \"type\": \"integer\"\n      },\n      \"policy\": {\n       \"description\": \"DEPRECATED\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"restart\": {\n     \"description\": \"This is a 'soft restart' button. When set to 'RollingUpdate' operator will restart ClickHouse pods in a graceful way. Remove it after the use in order to avoid unneeded restarts\",\n     \"enum\": [\n      \"\",\n      \"RollingUpdate\"\n     ],\n     \"type\": \"string\"\n    },\n    \"stop\": {\n     \"description\": \"Allow stop all ClickHouse clusters described in current chi.\\nStop mechanism works as follows:\\n - When `stop` is `1` then setup `Replicas: 0` in each related to current `chi` StatefulSet resource, all `Pods` and `Service` resources will desctroy, but PVCs still live\\n - When `stop` is `0` then `Pods` will created again and will attach retained PVCs and `Service` also will created again\\n\",\n     \"enum\": [\n      \"\",\n      \"0\",\n      \"1\",\n      \"False\",\n      \"false\",\n      \"True\",\n      \"true\",\n      \"No\",\n      \"no\",\n      \"Yes\",\n      \"yes\",\n      \"Off\",\n      \"off\",\n      \"On\",\n      \"on\",\n      \"Disable\",\n      \"disable\",\n      \"Enable\",\n      \"enable\",\n      \"Disabled\",\n      \"disabled\",\n      \"Enabled\",\n      \"enabled\"\n     ],\n     \"type\": \"string\"\n    },\n    \"taskID\": {\n     \"description\": \"Allow define custom taskID for named update and watch status of this update execution in .status.taskIDs field, by default every update of chi manifest will generate random taskID\",\n     \"type\": \"string\"\n    },\n    \"templates\": {\n     \"description\": \"allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it\",\n     \"properties\": {\n      \"hostTemplates\": {\n       \"description\": \"hostTemplate will use during apply to generate `clickhose-server` config files\",\n       \"items\": {\n        \"properties\": {\n         \"name\": {\n          \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`\",\n          \"type\": \"string\"\n         },\n         \"portDistribution\": {\n          \"description\": \"define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs\",\n          \"items\": {\n           \"properties\": {\n            \"type\": {\n             \"description\": \"type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network\",\n             \"enum\": [\n              \"\",\n              \"Unspecified\",\n              \"ClusterScopeIndex\"\n             ],\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"spec\": {\n          \"properties\": {\n           \"files\": {\n            \"description\": \"optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\n\",\n            \"format\": \"textarea\",\n            \"type\": \"string\"\n           },\n           \"httpPort\": {\n            \"description\": \"optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`\\nMore info: https://clickhouse.tech/docs/en/interfaces/http/\\n\",\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"interserverHTTPPort\": {\n            \"description\": \"optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`\\nMore info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port\\n\",\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"name\": {\n            \"description\": \"by default, hostname will generate, but this allows define custom name for each `clickhuse-server`\",\n            \"maxLength\": 15,\n            \"minLength\": 1,\n            \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n            \"type\": \"string\"\n           },\n           \"settings\": {\n            \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n            \"format\": \"textarea\",\n            \"type\": \"string\"\n           },\n           \"tcpPort\": {\n            \"description\": \"optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`\\nMore info: https://clickhouse.tech/docs/en/interfaces/tcp/\\n\",\n            \"maximum\": 65535,\n            \"minimum\": 1,\n            \"type\": \"integer\"\n           },\n           \"templates\": {\n            \"description\": \"be carefull, this part of CRD allows override template inside template, don't use it if you don't understand what you do\",\n            \"properties\": {\n             \"clusterServiceTemplate\": {\n              \"type\": \"string\"\n             },\n             \"dataVolumeClaimTemplate\": {\n              \"type\": \"string\"\n             },\n             \"hostTemplate\": {\n              \"type\": \"string\"\n             },\n             \"logVolumeClaimTemplate\": {\n              \"type\": \"string\"\n             },\n             \"podTemplate\": {\n              \"type\": \"string\"\n             },\n             \"replicaServiceTemplate\": {\n              \"type\": \"string\"\n             },\n             \"serviceTemplate\": {\n              \"type\": \"string\"\n             },\n             \"shardServiceTemplate\": {\n              \"type\": \"string\"\n             }\n            },\n            \"type\": \"object\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"podTemplates\": {\n       \"description\": \"podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone\\nMore information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates\\n\",\n       \"items\": {\n        \"properties\": {\n         \"distribution\": {\n          \"description\": \"DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`\",\n          \"enum\": [\n           \"\",\n           \"Unspecified\",\n           \"OnePerHost\"\n          ],\n          \"type\": \"string\"\n         },\n         \"generateName\": {\n          \"description\": \"allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables\",\n          \"type\": \"string\"\n         },\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to Pod\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`\",\n          \"type\": \"string\"\n         },\n         \"podDistribution\": {\n          \"description\": \"define ClickHouse Pod distibution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster\",\n          \"items\": {\n           \"properties\": {\n            \"number\": {\n             \"description\": \"define, how much ClickHouse Pods could be inside selected scope with selected distribution type\",\n             \"maximum\": 65535,\n             \"minimum\": 0,\n             \"type\": \"integer\"\n            },\n            \"scope\": {\n             \"description\": \"scope for apply each podDistribution\",\n             \"enum\": [\n              \"\",\n              \"Unspecified\",\n              \"Shard\",\n              \"Replica\",\n              \"Cluster\",\n              \"ClickHouseInstallation\",\n              \"Namespace\"\n             ],\n             \"type\": \"string\"\n            },\n            \"topologyKey\": {\n             \"description\": \"use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`, More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\",\n             \"type\": \"string\"\n            },\n            \"type\": {\n             \"description\": \"you can define multiple affinity policy types\",\n             \"enum\": [\n              \"\",\n              \"Unspecified\",\n              \"ClickHouseAntiAffinity\",\n              \"ShardAntiAffinity\",\n              \"ReplicaAntiAffinity\",\n              \"AnotherNamespaceAntiAffinity\",\n              \"AnotherClickHouseInstallationAntiAffinity\",\n              \"AnotherClusterAntiAffinity\",\n              \"MaxNumberPerNode\",\n              \"NamespaceAffinity\",\n              \"ClickHouseInstallationAffinity\",\n              \"ClusterAffinity\",\n              \"ShardAffinity\",\n              \"ReplicaAffinity\",\n              \"PreviousTailAffinity\",\n              \"CircularReplication\"\n             ],\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"spec\": {\n          \"description\": \"allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"zone\": {\n          \"description\": \"allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`\",\n          \"properties\": {\n           \"key\": {\n            \"description\": \"optional, if defined, allows select kubernetes nodes by label with `name` equal `key`\",\n            \"type\": \"string\"\n           },\n           \"values\": {\n            \"description\": \"optional, if defined, allows select kubernetes nodes by label with `value` in `values`\",\n            \"items\": {\n             \"type\": \"string\"\n            },\n            \"type\": \"array\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"serviceTemplates\": {\n       \"description\": \"allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level\\n\",\n       \"items\": {\n        \"properties\": {\n         \"generateName\": {\n          \"description\": \"allows define format for generated `Service` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables\",\n          \"type\": \"string\"\n         },\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to Service\\nCould be use for define specificly for Cloud Provider metadata which impact to behavior of service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside\\nchi-level `chi.spec.defaults.templates.serviceTemplate`\\ncluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`\\n\",\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"describe behavior of generated Service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"volumeClaimTemplates\": {\n       \"description\": \"allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else\",\n       \"items\": {\n        \"properties\": {\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to PVC\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside\\ntop-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,\\ncluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`\\n\",\n          \"type\": \"string\"\n         },\n         \"reclaimPolicy\": {\n          \"description\": \"define behavior of `PVC` deletion policy during delete `Pod`, `Delete` by default, when `Retain` then `PVC` still alive even `Pod` will deleted\",\n          \"enum\": [\n           \"\",\n           \"Retain\",\n           \"Delete\"\n          ],\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"allows define all aspects of `PVC` resource\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"templating\": {\n     \"description\": \"optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation\",\n     \"properties\": {\n      \"policy\": {\n       \"description\": \"when defined as `auto` inside ClickhouseInstallationTemplate, it will auto add into all ClickHouseInstallation, manual value is default\",\n       \"enum\": [\n        \"auto\",\n        \"manual\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"troubleshoot\": {\n     \"description\": \"allows troubleshoot Pods during CrashLoopBack state, when you apply wrong configuration, `clickhouse-server` wouldn't startup\",\n     \"enum\": [\n      \"\",\n      \"0\",\n      \"1\",\n      \"False\",\n      \"false\",\n      \"True\",\n      \"true\",\n      \"No\",\n      \"no\",\n      \"Yes\",\n      \"yes\",\n      \"Off\",\n      \"off\",\n      \"On\",\n      \"on\",\n      \"Disable\",\n      \"disable\",\n      \"Enable\",\n      \"enable\",\n      \"Disabled\",\n      \"disabled\",\n      \"Enabled\",\n      \"enabled\"\n     ],\n     \"type\": \"string\"\n    },\n    \"useTemplates\": {\n     \"description\": \"list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `Chi` manifest during render Kubernetes resources to create related ClickHouse clusters\",\n     \"items\": {\n      \"properties\": {\n       \"name\": {\n        \"description\": \"name of `ClickHouseInstallationTemplate` (chit) resource\",\n        \"type\": \"string\"\n       },\n       \"namespace\": {\n        \"description\": \"Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clichouse-operator`\",\n        \"type\": \"string\"\n       },\n       \"useType\": {\n        \"description\": \"optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`\",\n        \"enum\": [\n         \"\",\n         \"merge\"\n        ],\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"Click House Installation Template\",\n \"type\": \"object\"\n}",
   "version": "clickhouse.altinity.com/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Click House Installation Template",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false
  },
  "model": {
   "category": {
    "name": "App Definition and Development"
   },
   "displayName": "Posthog",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "primaryColor": "#336791",
    "secondaryColor": "#00D3A9",
    "shape": "circle",
    "source_uri": "https://github.com/zeet-dev/helm-charts/releases/download/posthog-0.23.2/posthog-0.23.2.tgz",
    "styleOverrides": "",
    "svgColor": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 432.071 445.383\" xml:space=\"preserve\"\u003e\n\u003cg xmlns=\"http://www.w3.org/2000/svg\" id=\"orginal\" style=\"fill-rule:nonzero;clip-rule:nonzero;stroke:#000000;stroke-miterlimit:4;\"\u003e\n        \u003c/g\u003e\n\u003cg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_x0020_3\" style=\"fill-rule:nonzero;clip-rule:nonzero;fill:none;stroke:#FFFFFF;stroke-width:12.4651;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;\"\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#000000;stroke:#000000;stroke-width:37.3953;stroke-linecap:butt;stroke-linejoin:miter;\" d=\"M323.205,324.227c2.833-23.601,1.984-27.062,19.563-23.239l4.463,0.392c13.517,0.615,31.199-2.174,41.587-7c22.362-10.376,35.622-27.7,13.572-23.148c-50.297,10.376-53.755-6.655-53.755-6.655c53.111-78.803,75.313-178.836,56.149-203.322    C352.514-5.534,262.036,26.049,260.522,26.869l-0.482,0.089c-9.938-2.062-21.06-3.294-33.554-3.496c-22.761-0.374-40.032,5.967-53.133,15.904c0,0-161.408-66.498-153.899,83.628c1.597,31.936,45.777,241.655,98.47,178.31    c19.259-23.163,37.871-42.748,37.871-42.748c9.242,6.14,20.307,9.272,31.912,8.147l0.897-0.765c-0.281,2.876-0.157,5.689,0.359,9.019c-13.572,15.167-9.584,17.83-36.723,23.416c-27.457,5.659-11.326,15.734-0.797,18.367c12.768,3.193,42.305,7.716,62.268-20.224    l-0.795,3.188c5.325,4.26,4.965,30.619,5.72,49.452c0.756,18.834,2.017,36.409,5.856,46.771c3.839,10.36,8.369,37.05,44.036,29.406c29.809-6.388,52.6-15.582,54.677-101.107\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#336791;stroke:none;\" d=\"M402.395,271.23c-50.302,10.376-53.76-6.655-53.76-6.655c53.111-78.808,75.313-178.843,56.153-203.326c-52.27-66.785-142.752-35.2-144.262-34.38l-0.486,0.087c-9.938-2.063-21.06-3.292-33.56-3.496c-22.761-0.373-40.026,5.967-53.127,15.902    c0,0-161.411-66.495-153.904,83.63c1.597,31.938,45.776,241.657,98.471,178.312c19.26-23.163,37.869-42.748,37.869-42.748c9.243,6.14,20.308,9.272,31.908,8.147l0.901-0.765c-0.28,2.876-0.152,5.689,0.361,9.019c-13.575,15.167-9.586,17.83-36.723,23.416    c-27.459,5.659-11.328,15.734-0.796,18.367c12.768,3.193,42.307,7.716,62.266-20.224l-0.796,3.188c5.319,4.26,9.054,27.711,8.428,48.969c-0.626,21.259-1.044,35.854,3.147,47.254c4.191,11.4,8.368,37.05,44.042,29.406c29.809-6.388,45.256-22.942,47.405-50.555    c1.525-19.631,4.976-16.729,5.194-34.28l2.768-8.309c3.192-26.611,0.507-35.196,18.872-31.203l4.463,0.392c13.517,0.615,31.208-2.174,41.591-7c22.358-10.376,35.618-27.7,13.573-23.148z\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M215.866,286.484c-1.385,49.516,0.348,99.377,5.193,111.495c4.848,12.118,15.223,35.688,50.9,28.045c29.806-6.39,40.651-18.756,45.357-46.051c3.466-20.082,10.148-75.854,11.005-87.281\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M173.104,38.256c0,0-161.521-66.016-154.012,84.109c1.597,31.938,45.779,241.664,98.473,178.316c19.256-23.166,36.671-41.335,36.671-41.335\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M260.349,26.207c-5.591,1.753,89.848-34.889,144.087,34.417c19.159,24.484-3.043,124.519-56.153,203.329\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" style=\"stroke-linejoin:bevel;\" d=\"M348.282,263.953c0,0,3.461,17.036,53.764,6.653c22.04-4.552,8.776,12.774-13.577,23.155c-18.345,8.514-59.474,10.696-60.146-1.069c-1.729-30.355,21.647-21.133,19.96-28.739c-1.525-6.85-11.979-13.573-18.894-30.338    c-6.037-14.633-82.796-126.849,21.287-110.183c3.813-0.789-27.146-99.002-124.553-100.599c-97.385-1.597-94.19,119.762-94.19,119.762\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M188.604,274.334c-13.577,15.166-9.584,17.829-36.723,23.417c-27.459,5.66-11.326,15.733-0.797,18.365c12.768,3.195,42.307,7.718,62.266-20.229c6.078-8.509-0.036-22.086-8.385-25.547c-4.034-1.671-9.428-3.765-16.361,3.994z\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M187.715,274.069c-1.368-8.917,2.93-19.528,7.536-31.942c6.922-18.626,22.893-37.255,10.117-96.339c-9.523-44.029-73.396-9.163-73.436-3.193c-0.039,5.968,2.889,30.26-1.067,58.548c-5.162,36.913,23.488,68.132,56.479,64.938\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#FFFFFF;stroke-width:4.155;stroke-linecap:butt;stroke-linejoin:miter;\" d=\"M172.517,141.7c-0.288,2.039,3.733,7.48,8.976,8.207c5.234,0.73,9.714-3.522,9.998-5.559c0.284-2.039-3.732-4.285-8.977-5.015c-5.237-0.731-9.719,0.333-9.996,2.367z\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#FFFFFF;stroke-width:2.0775;stroke-linecap:butt;stroke-linejoin:miter;\" d=\"M331.941,137.543c0.284,2.039-3.732,7.48-8.976,8.207c-5.238,0.73-9.718-3.522-10.005-5.559c-0.277-2.039,3.74-4.285,8.979-5.015c5.239-0.73,9.718,0.333,10.002,2.368z\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M350.676,123.432c0.863,15.994-3.445,26.888-3.988,43.914c-0.804,24.748,11.799,53.074-7.191,81.435\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" style=\"stroke-width:3;\" d=\"M0,60.232\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\u003c/svg\u003e",
    "svgComplete": "",
    "svgWhite": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 432.1 445.4\" style=\"enable-background:new 0 0 432.1 445.4;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill:none;stroke:#FFFFFF;stroke-width:12.4651;stroke-linecap:round;stroke-linejoin:round;}\n        .st1{fill:none;stroke:#FFFFFF;stroke-width:12.4651;stroke-linecap:round;stroke-linejoin:bevel;}\n        .st2{fill:#FFFFFF;stroke:#FFFFFF;stroke-width:4.155;}\n        .st3{fill:#FFFFFF;stroke:#FFFFFF;stroke-width:2.0775;}\n        .st4{fill:none;stroke:#FFFFFF;stroke-width:3;stroke-linecap:round;stroke-linejoin:round;}\n\u003c/style\u003e\n\u003cg xmlns=\"http://www.w3.org/2000/svg\" id=\"orginal\"\u003e\n\u003c/g\u003e\n\u003cg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_x0020_3\"\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M215.9,286.5c-1.4,49.5,0.3,99.4,5.2,111.5c4.8,12.1,15.2,35.7,50.9,28c29.8-6.4,40.7-18.8,45.4-46.1\u0026#xA;                c3.5-20.1,10.1-75.9,11-87.3\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M173.1,38.3c0,0-161.5-66-154,84.1c1.6,31.9,45.8,241.7,98.5,178.3c19.3-23.2,36.7-41.3,36.7-41.3\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M260.3,26.2c-5.6,1.8,89.8-34.9,144.1,34.4c19.2,24.5-3,124.5-56.2,203.3\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st1\" d=\"M348.3,264c0,0,3.5,17,53.8,6.7c22-4.6,8.8,12.8-13.6,23.2c-18.3,8.5-59.5,10.7-60.1-1.1\u0026#xA;                C326.6,262.3,350,271.6,348.3,264c-1.5-6.9-12-13.6-18.9-30.3c-6-14.6-82.8-126.8,21.3-110.2c3.8-0.8-27.1-99-124.6-100.6\u0026#xA;                c-97.4-1.6-94.2,119.8-94.2,119.8\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M188.6,274.3c-13.6,15.2-9.6,17.8-36.7,23.4c-27.5,5.7-11.3,15.7-0.8,18.4c12.8,3.2,42.3,7.7,62.3-20.2\u0026#xA;                c6.1-8.5,0-22.1-8.4-25.5C200.9,268.7,195.5,266.6,188.6,274.3L188.6,274.3z\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M187.7,274.1c-1.4-8.9,2.9-19.5,7.5-31.9c6.9-18.6,22.9-37.3,10.1-96.3c-9.5-44-73.4-9.2-73.4-3.2\u0026#xA;                c0,6,2.9,30.3-1.1,58.5c-5.2,36.9,23.5,68.1,56.5,64.9\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st2\" d=\"M172.5,141.7c-0.3,2,3.7,7.5,9,8.2c5.2,0.7,9.7-3.5,10-5.6c0.3-2-3.7-4.3-9-5\u0026#xA;                C177.3,138.6,172.8,139.7,172.5,141.7L172.5,141.7z\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st3\" d=\"M331.9,137.5c0.3,2-3.7,7.5-9,8.2c-5.2,0.7-9.7-3.5-10-5.6c-0.3-2,3.7-4.3,9-5S331.7,135.5,331.9,137.5\u0026#xA;                L331.9,137.5z\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M350.7,123.4c0.9,16-3.4,26.9-4,43.9c-0.8,24.7,11.8,53.1-7.2,81.4\"\u003e\u003c/path\u003e\n        \u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st4\" d=\"M0,60.2\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\u003c/svg\u003e"
   },
   "model": {
    "version": "0.23.2"
   },
   "name": "posthog",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "enabled",
   "subCategory": "Database",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#336791",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"432.071pt\" height=\"445.383pt\" viewBox=\"0 0 432.071 445.383\" xml:space=\"preserve\"\u003e\n\u003cg id=\"orginal\" style=\"fill-rule:nonzero;clip-rule:nonzero;stroke:#000000;stroke-miterlimit:4;\"\u003e\n        \u003c/g\u003e\n\u003cg id=\"Layer_x0020_3\" style=\"fill-rule:nonzero;clip-rule:nonzero;fill:none;stroke:#FFFFFF;stroke-width:12.4651;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;\"\u003e\n\u003cpath style=\"fill:#000000;stroke:#000000;stroke-width:37.3953;stroke-linecap:butt;stroke-linejoin:miter;\" d=\"M323.205,324.227c2.833-23.601,1.984-27.062,19.563-23.239l4.463,0.392c13.517,0.615,31.199-2.174,41.587-7c22.362-10.376,35.622-27.7,13.572-23.148c-50.297,10.376-53.755-6.655-53.755-6.655c53.111-78.803,75.313-178.836,56.149-203.322    C352.514-5.534,262.036,26.049,260.522,26.869l-0.482,0.089c-9.938-2.062-21.06-3.294-33.554-3.496c-22.761-0.374-40.032,5.967-53.133,15.904c0,0-161.408-66.498-153.899,83.628c1.597,31.936,45.777,241.655,98.47,178.31    c19.259-23.163,37.871-42.748,37.871-42.748c9.242,6.14,20.307,9.272,31.912,8.147l0.897-0.765c-0.281,2.876-0.157,5.689,0.359,9.019c-13.572,15.167-9.584,17.83-36.723,23.416c-27.457,5.659-11.326,15.734-0.797,18.367c12.768,3.193,42.305,7.716,62.268-20.224    l-0.795,3.188c5.325,4.26,4.965,30.619,5.72,49.452c0.756,18.834,2.017,36.409,5.856,46.771c3.839,10.36,8.369,37.05,44.036,29.406c29.809-6.388,52.6-15.582,54.677-101.107\"/\u003e\n\u003cpath style=\"fill:#336791;stroke:none;\" d=\"M402.395,271.23c-50.302,10.376-53.76-6.655-53.76-6.655c53.111-78.808,75.313-178.843,56.153-203.326c-52.27-66.785-142.752-35.2-144.262-34.38l-0.486,0.087c-9.938-2.063-21.06-3.292-33.56-3.496c-22.761-0.373-40.026,5.967-53.127,15.902    c0,0-161.411-66.495-153.904,83.63c1.597,31.938,45.776,241.657,98.471,178.312c19.26-23.163,37.869-42.748,37.869-42.748c9.243,6.14,20.308,9.272,31.908,8.147l0.901-0.765c-0.28,2.876-0.152,5.689,0.361,9.019c-13.575,15.167-9.586,17.83-36.723,23.416    c-27.459,5.659-11.328,15.734-0.796,18.367c12.768,3.193,42.307,7.716,62.266-20.224l-0.796,3.188c5.319,4.26,9.054,27.711,8.428,48.969c-0.626,21.259-1.044,35.854,3.147,47.254c4.191,11.4,8.368,37.05,44.042,29.406c29.809-6.388,45.256-22.942,47.405-50.555    c1.525-19.631,4.976-16.729,5.194-34.28l2.768-8.309c3.192-26.611,0.507-35.196,18.872-31.203l4.463,0.392c13.517,0.615,31.208-2.174,41.591-7c22.358-10.376,35.618-27.7,13.573-23.148z\"/\u003e\n\u003cpath d=\"M215.866,286.484c-1.385,49.516,0.348,99.377,5.193,111.495c4.848,12.118,15.223,35.688,50.9,28.045c29.806-6.39,40.651-18.756,45.357-46.051c3.466-20.082,10.148-75.854,11.005-87.281\"/\u003e\n\u003cpath d=\"M173.104,38.256c0,0-161.521-66.016-154.012,84.109c1.597,31.938,45.779,241.664,98.473,178.316c19.256-23.166,36.671-41.335,36.671-41.335\"/\u003e\n\u003cpath d=\"M260.349,26.207c-5.591,1.753,89.848-34.889,144.087,34.417c19.159,24.484-3.043,124.519-56.153,203.329\"/\u003e\n\u003cpath style=\"stroke-linejoin:bevel;\" d=\"M348.282,263.953c0,0,3.461,17.036,53.764,6.653c22.04-4.552,8.776,12.774-13.577,23.155c-18.345,8.514-59.474,10.696-60.146-1.069c-1.729-30.355,21.647-21.133,19.96-28.739c-1.525-6.85-11.979-13.573-18.894-30.338    c-6.037-14.633-82.796-126.849,21.287-110.183c3.813-0.789-27.146-99.002-124.553-100.599c-97.385-1.597-94.19,119.762-94.19,119.762\"/\u003e\n\u003cpath d=\"M188.604,274.334c-13.577,15.166-9.584,17.829-36.723,23.417c-27.459,5.66-11.326,15.733-0.797,18.365c12.768,3.195,42.307,7.718,62.266-20.229c6.078-8.509-0.036-22.086-8.385-25.547c-4.034-1.671-9.428-3.765-16.361,3.994z\"/\u003e\n\u003cpath d=\"M187.715,274.069c-1.368-8.917,2.93-19.528,7.536-31.942c6.922-18.626,22.893-37.255,10.117-96.339c-9.523-44.029-73.396-9.163-73.436-3.193c-0.039,5.968,2.889,30.26-1.067,58.548c-5.162,36.913,23.488,68.132,56.479,64.938\"/\u003e\n\u003cpath style=\"fill:#FFFFFF;stroke-width:4.155;stroke-linecap:butt;stroke-linejoin:miter;\" d=\"M172.517,141.7c-0.288,2.039,3.733,7.48,8.976,8.207c5.234,0.73,9.714-3.522,9.998-5.559c0.284-2.039-3.732-4.285-8.977-5.015c-5.237-0.731-9.719,0.333-9.996,2.367z\"/\u003e\n\u003cpath style=\"fill:#FFFFFF;stroke-width:2.0775;stroke-linecap:butt;stroke-linejoin:miter;\" d=\"M331.941,137.543c0.284,2.039-3.732,7.48-8.976,8.207c-5.238,0.73-9.718-3.522-10.005-5.559c-0.277-2.039,3.74-4.285,8.979-5.015c5.239-0.73,9.718,0.333,10.002,2.368z\"/\u003e\n\u003cpath d=\"M350.676,123.432c0.863,15.994-3.445,26.888-3.988,43.914c-0.804,24.748,11.799,53.074-7.191,81.435\"/\u003e\n\u003cpath style=\"stroke-width:3;\" d=\"M0,60.232\"/\u003e\n\u003c/g\u003e\n\u003c/svg\u003e",
   "svgWhite": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n         viewBox=\"0 0 432.1 445.4\" style=\"enable-background:new 0 0 432.1 445.4;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n        .st0{fill:none;stroke:#FFFFFF;stroke-width:12.4651;stroke-linecap:round;stroke-linejoin:round;}\n        .st1{fill:none;stroke:#FFFFFF;stroke-width:12.4651;stroke-linecap:round;stroke-linejoin:bevel;}\n        .st2{fill:#FFFFFF;stroke:#FFFFFF;stroke-width:4.155;}\n        .st3{fill:#FFFFFF;stroke:#FFFFFF;stroke-width:2.0775;}\n        .st4{fill:none;stroke:#FFFFFF;stroke-width:3;stroke-linecap:round;stroke-linejoin:round;}\n\u003c/style\u003e\n\u003cg id=\"orginal\"\u003e\n\u003c/g\u003e\n\u003cg id=\"Layer_x0020_3\"\u003e\n        \u003cpath class=\"st0\" d=\"M215.9,286.5c-1.4,49.5,0.3,99.4,5.2,111.5c4.8,12.1,15.2,35.7,50.9,28c29.8-6.4,40.7-18.8,45.4-46.1\n                c3.5-20.1,10.1-75.9,11-87.3\"/\u003e\n        \u003cpath class=\"st0\" d=\"M173.1,38.3c0,0-161.5-66-154,84.1c1.6,31.9,45.8,241.7,98.5,178.3c19.3-23.2,36.7-41.3,36.7-41.3\"/\u003e\n        \u003cpath class=\"st0\" d=\"M260.3,26.2c-5.6,1.8,89.8-34.9,144.1,34.4c19.2,24.5-3,124.5-56.2,203.3\"/\u003e\n        \u003cpath class=\"st1\" d=\"M348.3,264c0,0,3.5,17,53.8,6.7c22-4.6,8.8,12.8-13.6,23.2c-18.3,8.5-59.5,10.7-60.1-1.1\n                C326.6,262.3,350,271.6,348.3,264c-1.5-6.9-12-13.6-18.9-30.3c-6-14.6-82.8-126.8,21.3-110.2c3.8-0.8-27.1-99-124.6-100.6\n                c-97.4-1.6-94.2,119.8-94.2,119.8\"/\u003e\n        \u003cpath class=\"st0\" d=\"M188.6,274.3c-13.6,15.2-9.6,17.8-36.7,23.4c-27.5,5.7-11.3,15.7-0.8,18.4c12.8,3.2,42.3,7.7,62.3-20.2\n                c6.1-8.5,0-22.1-8.4-25.5C200.9,268.7,195.5,266.6,188.6,274.3L188.6,274.3z\"/\u003e\n        \u003cpath class=\"st0\" d=\"M187.7,274.1c-1.4-8.9,2.9-19.5,7.5-31.9c6.9-18.6,22.9-37.3,10.1-96.3c-9.5-44-73.4-9.2-73.4-3.2\n                c0,6,2.9,30.3-1.1,58.5c-5.2,36.9,23.5,68.1,56.5,64.9\"/\u003e\n        \u003cpath class=\"st2\" d=\"M172.5,141.7c-0.3,2,3.7,7.5,9,8.2c5.2,0.7,9.7-3.5,10-5.6c0.3-2-3.7-4.3-9-5\n                C177.3,138.6,172.8,139.7,172.5,141.7L172.5,141.7z\"/\u003e\n        \u003cpath class=\"st3\" d=\"M331.9,137.5c0.3,2-3.7,7.5-9,8.2c-5.2,0.7-9.7-3.5-10-5.6c-0.3-2,3.7-4.3,9-5S331.7,135.5,331.9,137.5\n                L331.9,137.5z\"/\u003e\n        \u003cpath class=\"st0\" d=\"M350.7,123.4c0.9,16-3.4,26.9-4,43.9c-0.8,24.7,11.8,53.1-7.2,81.4\"/\u003e\n        \u003cpath class=\"st4\" d=\"M0,60.2\"/\u003e\n\u003c/g\u003e\n\u003c/svg\u003e"
  },
  "version": "v1.0.0"
 }