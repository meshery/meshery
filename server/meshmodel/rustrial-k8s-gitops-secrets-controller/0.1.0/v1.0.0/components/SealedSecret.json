{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "SealedSecret",
   "schema": "{\n \"description\": \"SealedSecret is the Schema for the sealedsecrets API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"SealedSecretSpec defines the desired state of SealedSecret\",\n   \"properties\": {\n    \"data\": {\n     \"additionalProperties\": {\n      \"format\": \"byte\",\n      \"type\": \"string\"\n     },\n     \"description\": \"Data contains the secret data. Each key must consist of alphanumeric\\ncharacters, '-', '_' or '.'. The serialized form of the secret data is a\\nbase64 encoded string, representing the arbitrary (possibly non-string)\\ndata value here. Described in https://tools.ietf.org/html/rfc4648#section-4\",\n     \"type\": \"object\"\n    },\n    \"encryptedData\": {\n     \"additionalProperties\": {\n      \"description\": \"Envelopes array of Envelopes, which allows support for encrypting\\na single entry with multiple providers. During decryption, the controller will stop on the first\\nsuccessful provider and use the decrypted value it returns.\",\n      \"items\": {\n       \"description\": \"Envelope contains encrypted payload as well as key material and metadata needed to decrypt that payload.\\n\\nAs of now, we banned any public key cryptograhy (PKI) support, as all available PKI schemes are\\nnot quantum-safe.\",\n       \"properties\": {\n        \"awsKms\": {\n         \"description\": \"AwsKms provider.\",\n         \"properties\": {\n          \"encryptionAlgorithm\": {\n           \"description\": \"EncryptionAlgorithm specifies the encryption algorithm that will be used to decrypt.\\nhttps://docs.aws.amazon.com/kms/latest/APIReference/API_Decrypt.html\",\n           \"type\": \"string\"\n          },\n          \"nonce\": {\n           \"description\": \"Nonce of stream cipher\",\n           \"format\": \"byte\",\n           \"type\": \"string\"\n          },\n          \"version\": {\n           \"description\": \"Version of the provider spec\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          }\n         },\n         \"required\": [\n          \"version\"\n         ],\n         \"type\": \"object\"\n        },\n        \"cipherText\": {\n         \"description\": \"CipherText holds the encrypted payload, encrypted by the symmetric DataKey.\",\n         \"format\": \"byte\",\n         \"type\": \"string\"\n        },\n        \"dataEncryptionKey\": {\n         \"description\": \"DataEncryptionKey holds the encrypted symmetric data-key, needed to decrypt the CipherText.\\nThe data-key is either encrypted using envelope encryption provided by the Provider.\",\n         \"format\": \"byte\",\n         \"type\": \"string\"\n        },\n        \"keyEncryptionKeyId\": {\n         \"description\": \"KeyEncryptionKeyId is the provider specific unique ID of\\nthe Key Encryption Key (KEK) use to encrypt/decrypt the\\nData Encryption Key (DEK).\\n\\nThis ID must uniquely identify the KEK and provider and\\nis used in authorization rules to decide which namespaces\\ncan access which KEKs.\",\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"cipherText\",\n        \"keyEncryptionKeyId\"\n       ],\n       \"type\": \"object\"\n      },\n      \"type\": \"array\"\n     },\n     \"description\": \"EncryptedData contains the secret envelope encrypted secret data. Each key must consist of alphanumeric\\ncharacters, '-', '_' or '.'. The values are arrays of Envelopes, which allows support for encrypting\\na single entry with multiple providers. During decryption, the controller will stop on the first\\nsuccessful provider and use the decrypted value it returns.\",\n     \"type\": \"object\"\n    },\n    \"immutable\": {\n     \"description\": \"Immutable, if set to true, ensures that data stored in the Secret cannot\\nbe updated (only object metadata can be modified).\\nIf not set to true, the field can be modified at any time.\\nDefaulted to nil.\\nThis is a beta field enabled by ImmutableEphemeralVolumes feature gate.\",\n     \"type\": \"boolean\"\n    },\n    \"metadata\": {\n     \"description\": \"Metadata to use to create the Secret. For example to create it in with\\na different name or to add labes and annotations.\\n\\nNote, any namespace defined here will be ignored, an the corresponding\\nsecret will always be created in the namespace of the SealedSecret.\",\n     \"format\": \"textarea\",\n     \"type\": \"string\"\n    },\n    \"stringData\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"description\": \"StringData allows specifying non-binary secret data in string form.\\nIt is provided as a write-only convenience method.\\nAll keys and values are merged into the data field on write, overwriting any existing values.\\nIt is never output when reading from the API.\",\n     \"type\": \"object\"\n    },\n    \"type\": {\n     \"description\": \"Used to facilitate programmatic handling of secret data.\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Sealed Secret\",\n \"type\": \"object\"\n}",
   "version": "secrets.rustrial.org/v1beta1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Sealed Secret",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false,
   "source_uri": "https://github.com/rustrial/k8s-gitops-secrets/releases/download/rustrial-k8s-gitops-secrets-controller-0.1.0/rustrial-k8s-gitops-secrets-controller-0.1.0.tgz"
  },
  "model": {
   "category": {
    "name": "Uncategorized"
   },
   "displayName": "Rustrial K8S Gitops Secrets Controller",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "primaryColor": "#00B39F",
    "secondaryColor": "#00D3A9",
    "shape": "circle",
    "source_uri": "https://github.com/rustrial/k8s-gitops-secrets/releases/download/rustrial-k8s-gitops-secrets-controller-0.1.0/rustrial-k8s-gitops-secrets-controller-0.1.0.tgz",
    "styleOverrides": "",
    "svgColor": "",
    "svgComplete": "",
    "svgWhite": ""
   },
   "model": {
    "version": "0.1.0"
   },
   "name": "rustrial-k8s-gitops-secrets-controller",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "subCategory": "Uncategorized",
   "version": "v1.0.0",
   "components": null,
   "relationships": null,
   "components_count": 0,
   "relationships_count": 0
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#00B39F",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "",
   "svgWhite": ""
  },
  "version": "v1.0.0"
 }