{"kind":"SealedSecret","apiVersion":"secrets.rustrial.org/v1beta1","displayName":"Sealed Secret","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"rustrial-k8s-gitops-secrets-controller","modelDisplayName":"Rustrial K8S Gitops Secrets Controller","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"rustrial-k8s-gitops-secrets-controller","version":"0.0.7","displayName":"Rustrial K8S Gitops Secrets Controller","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Uncategorized","metadata":null},"metadata":{"source_uri":"https://github.com/rustrial/k8s-gitops-secrets/releases/download/rustrial-k8s-gitops-secrets-controller-0.0.8/rustrial-k8s-gitops-secrets-controller-0.0.8.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"SealedSecret is the Schema for the sealedsecrets API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"SealedSecretSpec defines the desired state of SealedSecret\",\n   \"properties\": {\n    \"data\": {\n     \"additionalProperties\": {\n      \"format\": \"byte\",\n      \"type\": \"string\"\n     },\n     \"description\": \"Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4\",\n     \"type\": \"object\"\n    },\n    \"encryptedData\": {\n     \"additionalProperties\": {\n      \"description\": \"Envelopes array of Envelopes, which allows support for encrypting a single entry with multiple providers. During decryption, the controller will stop on the first successful provider and use the decrypted value it returns.\",\n      \"items\": {\n       \"description\": \"Envelope contains encrypted payload as well as key material and metadata needed to decrypt that payload. \\n As of now, we banned any public key cryptograhy (PKI) support, as all available PKI schemes are not quantum-safe.\",\n       \"properties\": {\n        \"awsKms\": {\n         \"description\": \"AwsKms provider.\",\n         \"properties\": {\n          \"encryptionAlgorithm\": {\n           \"description\": \"EncryptionAlgorithm specifies the encryption algorithm that will be used to decrypt. https://docs.aws.amazon.com/kms/latest/APIReference/API_Decrypt.html\",\n           \"type\": \"string\"\n          },\n          \"nonce\": {\n           \"description\": \"Nonce of stream cipher\",\n           \"format\": \"byte\",\n           \"type\": \"string\"\n          },\n          \"version\": {\n           \"description\": \"Version of the provider spec\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"cipherText\": {\n         \"description\": \"CipherText holds the encrypted payload, encrypted by the symmetric DataKey.\",\n         \"format\": \"byte\",\n         \"type\": \"string\"\n        },\n        \"dataEncryptionKey\": {\n         \"description\": \"DataEncryptionKey holds the encrypted symmetric data-key, needed to decrypt the CipherText. The data-key is either encrypted using envelope encryption provided by the Provider.\",\n         \"format\": \"byte\",\n         \"type\": \"string\"\n        },\n        \"keyEncryptionKeyId\": {\n         \"description\": \"KeyEncryptionKeyId is the provider specific unique ID of the Key Encryption Key (KEK) use to encrypt/decrypt the Data Encryption Key (DEK). \\n This ID must uniquely identify the KEK and provider and is used in authorization rules to decide which namespaces can access which KEKs.\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"type\": \"array\"\n     },\n     \"description\": \"EncryptedData contains the secret envelope encrypted secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The values are arrays of Envelopes, which allows support for encrypting a single entry with multiple providers. During decryption, the controller will stop on the first successful provider and use the decrypted value it returns.\",\n     \"type\": \"object\"\n    },\n    \"immutable\": {\n     \"description\": \"Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is a beta field enabled by ImmutableEphemeralVolumes feature gate.\",\n     \"type\": \"boolean\"\n    },\n    \"metadata\": {\n     \"description\": \"Metadata to use to create the Secret. For example to create it in with a different name or to add labes and annotations. \\n Note, any namespace defined here will be ignored, an the corresponding secret will always be created in the namespace of the SealedSecret.\",\n     \"format\": \"textarea\",\n     \"type\": \"string\"\n    },\n    \"stringData\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"description\": \"StringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.\",\n     \"type\": \"object\"\n    },\n    \"type\": {\n     \"description\": \"Used to facilitate programmatic handling of secret data.\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Sealed Secret\",\n \"type\": \"object\"\n}"}