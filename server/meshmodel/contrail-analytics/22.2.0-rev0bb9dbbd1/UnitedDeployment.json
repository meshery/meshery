{"kind":"UnitedDeployment","apiVersion":"apps.kruise.io/v1alpha1","displayName":"United Deployment","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"contrail-analytics","modelDisplayName":"Contrail Analytics","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Not Found","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"contrail-analytics","version":"22.2.0-rev0bb9dbbd1","displayName":"Contrail Analytics","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Cloud Native Network","metadata":null},"metadata":{"source_uri":"https://jeffreymarshall.github.io/cn2-analytics-test/contrail-analytics-22.2.0.93.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"UnitedDeployment is the Schema for the uniteddeployments API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"UnitedDeploymentSpec defines the desired state of UnitedDeployment.\",\n   \"properties\": {\n    \"replicas\": {\n     \"description\": \"Replicas is the total desired replicas of all the subsets. If unspecified, defaults to 1.\",\n     \"format\": \"int32\",\n     \"type\": \"integer\"\n    },\n    \"revisionHistoryLimit\": {\n     \"description\": \"Indicates the number of histories to be conserved. If unspecified, defaults to 10.\",\n     \"format\": \"int32\",\n     \"type\": \"integer\"\n    },\n    \"selector\": {\n     \"description\": \"Selector is a label query over pods that should match the replica count. It must match the pod template's labels.\",\n     \"properties\": {\n      \"matchExpressions\": {\n       \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n       \"items\": {\n        \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"key is the label key that the selector applies to.\",\n          \"type\": \"string\"\n         },\n         \"operator\": {\n          \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"key\",\n         \"operator\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"matchLabels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"template\": {\n     \"description\": \"Template describes the subset that will be created.\",\n     \"properties\": {\n      \"advancedStatefulSetTemplate\": {\n       \"description\": \"AdvancedStatefulSet template\",\n       \"properties\": {\n        \"metadata\": {\n         \"format\": \"textarea\",\n         \"type\": \"string\"\n        },\n        \"spec\": {\n         \"description\": \"StatefulSetSpec defines the desired state of StatefulSet\",\n         \"properties\": {\n          \"lifecycle\": {\n           \"description\": \"Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.\",\n           \"properties\": {\n            \"inPlaceUpdate\": {\n             \"description\": \"InPlaceUpdate is the hook before Pod to update and after Pod has been updated.\",\n             \"properties\": {\n              \"finalizersHandler\": {\n               \"items\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"array\"\n              },\n              \"labelsHandler\": {\n               \"additionalProperties\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"preDelete\": {\n             \"description\": \"PreDelete is the hook before Pod to be deleted.\",\n             \"properties\": {\n              \"finalizersHandler\": {\n               \"items\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"array\"\n              },\n              \"labelsHandler\": {\n               \"additionalProperties\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"persistentVolumeClaimRetentionPolicy\": {\n           \"description\": \"PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.\",\n           \"properties\": {\n            \"whenDeleted\": {\n             \"description\": \"WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.\",\n             \"type\": \"string\"\n            },\n            \"whenScaled\": {\n             \"description\": \"WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.\",\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"podManagementPolicy\": {\n           \"description\": \"podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\",\n           \"type\": \"string\"\n          },\n          \"replicas\": {\n           \"description\": \"replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. TODO: Consider a rename of this field.\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          },\n          \"reserveOrdinals\": {\n           \"description\": \"reserveOrdinals controls the ordinal numbers that should be reserved, and the replicas will always be the expectation number of running Pods. For a sts with replicas=3 and its Pods in [0, 1, 2]: - If you want to migrate Pod-1 and reserve this ordinal, just set spec.reserveOrdinal to [1].   Then controller will delete Pod-1 and create Pod-3 (existing Pods will be [0, 2, 3]) - If you just want to delete Pod-1, you should set spec.reserveOrdinal to [1] and spec.replicas to 2.   Then controller will delete Pod-1 (existing Pods will be [0, 2])\",\n           \"items\": {\n            \"type\": \"integer\"\n           },\n           \"type\": \"array\"\n          },\n          \"revisionHistoryLimit\": {\n           \"description\": \"revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          },\n          \"scaleStrategy\": {\n           \"description\": \"scaleStrategy indicates the StatefulSetScaleStrategy that will be employed to scale Pods in the StatefulSet.\",\n           \"properties\": {\n            \"maxUnavailable\": {\n             \"anyOf\": [\n              {\n               \"type\": \"integer\"\n              },\n              {\n               \"type\": \"string\"\n              }\n             ],\n             \"description\": \"The maximum number of pods that can be unavailable during scaling. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. It can just be allowed to work with Parallel podManagementPolicy.\",\n             \"x-kubernetes-int-or-string\": true\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"selector\": {\n           \"description\": \"selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n           \"properties\": {\n            \"matchExpressions\": {\n             \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n             \"items\": {\n              \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n              \"properties\": {\n               \"key\": {\n                \"description\": \"key is the label key that the selector applies to.\",\n                \"type\": \"string\"\n               },\n               \"operator\": {\n                \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n                \"type\": \"string\"\n               },\n               \"values\": {\n                \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n                \"items\": {\n                 \"type\": \"string\"\n                },\n                \"type\": \"array\"\n               }\n              },\n              \"required\": [\n               \"key\",\n               \"operator\"\n              ],\n              \"type\": \"object\"\n             },\n             \"type\": \"array\"\n            },\n            \"matchLabels\": {\n             \"additionalProperties\": {\n              \"type\": \"string\"\n             },\n             \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"serviceName\": {\n           \"description\": \"serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \\\"pod-specific-string\\\" is managed by the StatefulSet controller.\",\n           \"type\": \"string\"\n          },\n          \"template\": {\n           \"description\": \"template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.\",\n           \"format\": \"textarea\",\n           \"type\": \"string\"\n          },\n          \"updateStrategy\": {\n           \"description\": \"updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.\",\n           \"properties\": {\n            \"rollingUpdate\": {\n             \"description\": \"RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\",\n             \"properties\": {\n              \"inPlaceUpdateStrategy\": {\n               \"description\": \"InPlaceUpdateStrategy contains strategies for in-place update.\",\n               \"properties\": {\n                \"gracePeriodSeconds\": {\n                 \"description\": \"GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.\",\n                 \"format\": \"int32\",\n                 \"type\": \"integer\"\n                }\n               },\n               \"type\": \"object\"\n              },\n              \"maxUnavailable\": {\n               \"anyOf\": [\n                {\n                 \"type\": \"integer\"\n                },\n                {\n                 \"type\": \"string\"\n                }\n               ],\n               \"description\": \"The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.\",\n               \"x-kubernetes-int-or-string\": true\n              },\n              \"minReadySeconds\": {\n               \"description\": \"MinReadySeconds indicates how long will the pod be considered ready after it's updated. MinReadySeconds works with both OrderedReady and Parallel podManagementPolicy. It affects the pod scale up speed when the podManagementPolicy is set to be OrderedReady. Combined with MaxUnavailable, it affects the pod update speed regardless of podManagementPolicy. Default value is 0, max is 300.\",\n               \"format\": \"int32\",\n               \"type\": \"integer\"\n              },\n              \"partition\": {\n               \"description\": \"Partition indicates the ordinal at which the StatefulSet should be partitioned by default. But if unorderedUpdate has been set:   - Partition indicates the number of pods with non-updated revisions when rolling update.   - It means controller will update $(replicas - partition) number of pod. Default value is 0.\",\n               \"format\": \"int32\",\n               \"type\": \"integer\"\n              },\n              \"paused\": {\n               \"description\": \"Paused indicates that the StatefulSet is paused. Default value is false\",\n               \"type\": \"boolean\"\n              },\n              \"podUpdatePolicy\": {\n               \"description\": \"PodUpdatePolicy indicates how pods should be updated Default value is \\\"ReCreate\\\"\",\n               \"type\": \"string\"\n              },\n              \"unorderedUpdate\": {\n               \"description\": \"UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy\",\n               \"properties\": {\n                \"priorityStrategy\": {\n                 \"description\": \"Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.\",\n                 \"properties\": {\n                  \"orderPriority\": {\n                   \"description\": \"Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.\",\n                   \"items\": {\n                    \"description\": \"UpdatePriorityOrder defines order priority.\",\n                    \"properties\": {\n                     \"orderedKey\": {\n                      \"description\": \"Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.\",\n                      \"type\": \"string\"\n                     }\n                    },\n                    \"required\": [\n                     \"orderedKey\"\n                    ],\n                    \"type\": \"object\"\n                   },\n                   \"type\": \"array\"\n                  },\n                  \"weightPriority\": {\n                   \"description\": \"Weight priority terms, pods will be sorted by the sum of all terms weight.\",\n                   \"items\": {\n                    \"description\": \"UpdatePriorityWeightTerm defines weight priority.\",\n                    \"properties\": {\n                     \"matchSelector\": {\n                      \"description\": \"MatchSelector is used to select by pod's labels.\",\n                      \"properties\": {\n                       \"matchExpressions\": {\n                        \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n                        \"items\": {\n                         \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n                         \"properties\": {\n                          \"key\": {\n                           \"description\": \"key is the label key that the selector applies to.\",\n                           \"type\": \"string\"\n                          },\n                          \"operator\": {\n                           \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n                           \"type\": \"string\"\n                          },\n                          \"values\": {\n                           \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n                           \"items\": {\n                            \"type\": \"string\"\n                           },\n                           \"type\": \"array\"\n                          }\n                         },\n                         \"required\": [\n                          \"key\",\n                          \"operator\"\n                         ],\n                         \"type\": \"object\"\n                        },\n                        \"type\": \"array\"\n                       },\n                       \"matchLabels\": {\n                        \"additionalProperties\": {\n                         \"type\": \"string\"\n                        },\n                        \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n                        \"type\": \"object\"\n                       }\n                      },\n                      \"type\": \"object\"\n                     },\n                     \"weight\": {\n                      \"description\": \"Weight associated with matching the corresponding matchExpressions, in the range 1-100.\",\n                      \"format\": \"int32\",\n                      \"type\": \"integer\"\n                     }\n                    },\n                    \"required\": [\n                     \"matchSelector\",\n                     \"weight\"\n                    ],\n                    \"type\": \"object\"\n                   },\n                   \"type\": \"array\"\n                  }\n                 },\n                 \"type\": \"object\"\n                }\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": {\n             \"description\": \"Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.\",\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"volumeClaimTemplates\": {\n           \"description\": \"volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. TODO: Define the behavior if a claim already exists with the same name.\",\n           \"format\": \"textarea\",\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"selector\",\n          \"template\"\n         ],\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"spec\"\n       ],\n       \"type\": \"object\"\n      },\n      \"cloneSetTemplate\": {\n       \"description\": \"CloneSet template\",\n       \"properties\": {\n        \"metadata\": {\n         \"format\": \"textarea\",\n         \"type\": \"string\"\n        },\n        \"spec\": {\n         \"description\": \"CloneSetSpec defines the desired state of CloneSet\",\n         \"properties\": {\n          \"lifecycle\": {\n           \"description\": \"Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.\",\n           \"properties\": {\n            \"inPlaceUpdate\": {\n             \"description\": \"InPlaceUpdate is the hook before Pod to update and after Pod has been updated.\",\n             \"properties\": {\n              \"finalizersHandler\": {\n               \"items\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"array\"\n              },\n              \"labelsHandler\": {\n               \"additionalProperties\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"preDelete\": {\n             \"description\": \"PreDelete is the hook before Pod to be deleted.\",\n             \"properties\": {\n              \"finalizersHandler\": {\n               \"items\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"array\"\n              },\n              \"labelsHandler\": {\n               \"additionalProperties\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"object\"\n              }\n             },\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"minReadySeconds\": {\n           \"description\": \"Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          },\n          \"replicas\": {\n           \"description\": \"Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template. If unspecified, defaults to 1.\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          },\n          \"revisionHistoryLimit\": {\n           \"description\": \"RevisionHistoryLimit is the maximum number of revisions that will be maintained in the CloneSet's revision history. The revision history consists of all revisions not represented by a currently applied CloneSetSpec version. The default value is 10.\",\n           \"format\": \"int32\",\n           \"type\": \"integer\"\n          },\n          \"scaleStrategy\": {\n           \"description\": \"ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.\",\n           \"properties\": {\n            \"maxUnavailable\": {\n             \"anyOf\": [\n              {\n               \"type\": \"integer\"\n              },\n              {\n               \"type\": \"string\"\n              }\n             ],\n             \"description\": \"The maximum number of pods that can be unavailable for scaled pods. This field can control the changes rate of replicas for CloneSet so as to minimize the impact for users' service. The scale will fail if the number of unavailable pods were greater than this MaxUnavailable at scaling up. MaxUnavailable works only when scaling up.\",\n             \"x-kubernetes-int-or-string\": true\n            },\n            \"podsToDelete\": {\n             \"description\": \"PodsToDelete is the names of Pod should be deleted. Note that this list will be truncated for non-existing pod names.\",\n             \"items\": {\n              \"type\": \"string\"\n             },\n             \"type\": \"array\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"selector\": {\n           \"description\": \"Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n           \"properties\": {\n            \"matchExpressions\": {\n             \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n             \"items\": {\n              \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n              \"properties\": {\n               \"key\": {\n                \"description\": \"key is the label key that the selector applies to.\",\n                \"type\": \"string\"\n               },\n               \"operator\": {\n                \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n                \"type\": \"string\"\n               },\n               \"values\": {\n                \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n                \"items\": {\n                 \"type\": \"string\"\n                },\n                \"type\": \"array\"\n               }\n              },\n              \"required\": [\n               \"key\",\n               \"operator\"\n              ],\n              \"type\": \"object\"\n             },\n             \"type\": \"array\"\n            },\n            \"matchLabels\": {\n             \"additionalProperties\": {\n              \"type\": \"string\"\n             },\n             \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"template\": {\n           \"description\": \"Template describes the pods that will be created.\",\n           \"format\": \"textarea\",\n           \"type\": \"string\"\n          },\n          \"updateStrategy\": {\n           \"description\": \"UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.\",\n           \"properties\": {\n            \"inPlaceUpdateStrategy\": {\n             \"description\": \"InPlaceUpdateStrategy contains strategies for in-place update.\",\n             \"properties\": {\n              \"gracePeriodSeconds\": {\n               \"description\": \"GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.\",\n               \"format\": \"int32\",\n               \"type\": \"integer\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"maxSurge\": {\n             \"anyOf\": [\n              {\n               \"type\": \"integer\"\n              },\n              {\n               \"type\": \"string\"\n              }\n             ],\n             \"description\": \"The maximum number of pods that can be scheduled above the desired replicas during update or specified delete. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. Defaults to 0.\",\n             \"x-kubernetes-int-or-string\": true\n            },\n            \"maxUnavailable\": {\n             \"anyOf\": [\n              {\n               \"type\": \"integer\"\n              },\n              {\n               \"type\": \"string\"\n              }\n             ],\n             \"description\": \"The maximum number of pods that can be unavailable during update or scale. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. When maxSurge \\u003e 0, absolute number is calculated from percentage by rounding down. Defaults to 20%.\",\n             \"x-kubernetes-int-or-string\": true\n            },\n            \"partition\": {\n             \"anyOf\": [\n              {\n               \"type\": \"integer\"\n              },\n              {\n               \"type\": \"string\"\n              }\n             ],\n             \"description\": \"Partition is the desired number of pods in old revisions. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. It means when partition is set during pods updating, (replicas - partition value) number of pods will be updated. Default value is 0.\",\n             \"x-kubernetes-int-or-string\": true\n            },\n            \"paused\": {\n             \"description\": \"Paused indicates that the CloneSet is paused. Default value is false\",\n             \"type\": \"boolean\"\n            },\n            \"priorityStrategy\": {\n             \"description\": \"Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.\",\n             \"properties\": {\n              \"orderPriority\": {\n               \"description\": \"Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.\",\n               \"items\": {\n                \"description\": \"UpdatePriorityOrder defines order priority.\",\n                \"properties\": {\n                 \"orderedKey\": {\n                  \"description\": \"Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"required\": [\n                 \"orderedKey\"\n                ],\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              },\n              \"weightPriority\": {\n               \"description\": \"Weight priority terms, pods will be sorted by the sum of all terms weight.\",\n               \"items\": {\n                \"description\": \"UpdatePriorityWeightTerm defines weight priority.\",\n                \"properties\": {\n                 \"matchSelector\": {\n                  \"description\": \"MatchSelector is used to select by pod's labels.\",\n                  \"properties\": {\n                   \"matchExpressions\": {\n                    \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n                    \"items\": {\n                     \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n                     \"properties\": {\n                      \"key\": {\n                       \"description\": \"key is the label key that the selector applies to.\",\n                       \"type\": \"string\"\n                      },\n                      \"operator\": {\n                       \"description\": \"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\n                       \"type\": \"string\"\n                      },\n                      \"values\": {\n                       \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n                       \"items\": {\n                        \"type\": \"string\"\n                       },\n                       \"type\": \"array\"\n                      }\n                     },\n                     \"required\": [\n                      \"key\",\n                      \"operator\"\n                     ],\n                     \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                   },\n                   \"matchLabels\": {\n                    \"additionalProperties\": {\n                     \"type\": \"string\"\n                    },\n                    \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n                    \"type\": \"object\"\n                   }\n                  },\n                  \"type\": \"object\"\n                 },\n                 \"weight\": {\n                  \"description\": \"Weight associated with matching the corresponding matchExpressions, in the range 1-100.\",\n                  \"format\": \"int32\",\n                  \"type\": \"integer\"\n                 }\n                },\n                \"required\": [\n                 \"matchSelector\",\n                 \"weight\"\n                ],\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"scatterStrategy\": {\n             \"description\": \"ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.\",\n             \"items\": {\n              \"properties\": {\n               \"key\": {\n                \"type\": \"string\"\n               },\n               \"value\": {\n                \"type\": \"string\"\n               }\n              },\n              \"required\": [\n               \"key\",\n               \"value\"\n              ],\n              \"type\": \"object\"\n             },\n             \"type\": \"array\"\n            },\n            \"type\": {\n             \"description\": \"Type indicates the type of the CloneSetUpdateStrategy. Default is ReCreate.\",\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"volumeClaimTemplates\": {\n           \"description\": \"VolumeClaimTemplates is a list of claims that pods are allowed to reference. Note that PVC will be deleted when its pod has been deleted.\",\n           \"format\": \"textarea\",\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"selector\",\n          \"template\"\n         ],\n         \"type\": \"object\"\n        }\n       },\n       \"required\": [\n        \"spec\"\n       ],\n       \"type\": \"object\"\n      },\n      \"deploymentTemplate\": {\n       \"description\": \"Deployment template\",\n       \"properties\": {\n        \"metadata\": {\n         \"format\": \"textarea\",\n         \"type\": \"string\"\n        },\n        \"spec\": {\n         \"format\": \"textarea\",\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"spec\"\n       ],\n       \"type\": \"object\"\n      },\n      \"statefulSetTemplate\": {\n       \"description\": \"StatefulSet template\",\n       \"properties\": {\n        \"metadata\": {\n         \"format\": \"textarea\",\n         \"type\": \"string\"\n        },\n        \"spec\": {\n         \"format\": \"textarea\",\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"spec\"\n       ],\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"topology\": {\n     \"description\": \"Topology describes the pods distribution detail between each of subsets.\",\n     \"properties\": {\n      \"subsets\": {\n       \"description\": \"Contains the details of each subset. Each element in this array represents one subset which will be provisioned and managed by UnitedDeployment.\",\n       \"items\": {\n        \"description\": \"Subset defines the detail of a subset.\",\n        \"properties\": {\n         \"name\": {\n          \"description\": \"Indicates subset name as a DNS_LABEL, which will be used to generate subset workload name prefix in the format '\\u003cdeployment-name\\u003e-\\u003csubset-name\\u003e-'. Name should be unique between all of the subsets under one UnitedDeployment.\",\n          \"type\": \"string\"\n         },\n         \"nodeSelectorTerm\": {\n          \"description\": \"Indicates the node selector to form the subset. Depending on the node selector, pods provisioned could be distributed across multiple groups of nodes. A subset's nodeSelectorTerm is not allowed to be updated.\",\n          \"properties\": {\n           \"matchExpressions\": {\n            \"description\": \"A list of node selector requirements by node's labels.\",\n            \"items\": {\n             \"description\": \"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n             \"properties\": {\n              \"key\": {\n               \"description\": \"The label key that the selector applies to.\",\n               \"type\": \"string\"\n              },\n              \"operator\": {\n               \"description\": \"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\n               \"type\": \"string\"\n              },\n              \"values\": {\n               \"description\": \"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\n               \"items\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"array\"\n              }\n             },\n             \"required\": [\n              \"key\",\n              \"operator\"\n             ],\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"matchFields\": {\n            \"description\": \"A list of node selector requirements by node's fields.\",\n            \"items\": {\n             \"description\": \"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n             \"properties\": {\n              \"key\": {\n               \"description\": \"The label key that the selector applies to.\",\n               \"type\": \"string\"\n              },\n              \"operator\": {\n               \"description\": \"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\n               \"type\": \"string\"\n              },\n              \"values\": {\n               \"description\": \"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\n               \"items\": {\n                \"type\": \"string\"\n               },\n               \"type\": \"array\"\n              }\n             },\n             \"required\": [\n              \"key\",\n              \"operator\"\n             ],\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"replicas\": {\n          \"anyOf\": [\n           {\n            \"type\": \"integer\"\n           },\n           {\n            \"type\": \"string\"\n           }\n          ],\n          \"description\": \"Indicates the number of the pod to be created under this subset. Replicas could also be percentage like '10%', which means 10% of UnitedDeployment replicas of pods will be distributed under this subset. If nil, the number of replicas in this subset is determined by controller. Controller will try to keep all the subsets with nil replicas have average pods.\",\n          \"x-kubernetes-int-or-string\": true\n         },\n         \"tolerations\": {\n          \"description\": \"Indicates the tolerations the pods under this subset have. A subset's tolerations is not allowed to be updated.\",\n          \"items\": {\n           \"description\": \"The pod this Toleration is attached to tolerates any taint that matches the triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\n           \"properties\": {\n            \"effect\": {\n             \"description\": \"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\n             \"type\": \"string\"\n            },\n            \"key\": {\n             \"description\": \"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\n             \"type\": \"string\"\n            },\n            \"operator\": {\n             \"description\": \"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\",\n             \"type\": \"string\"\n            },\n            \"tolerationSeconds\": {\n             \"description\": \"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\",\n             \"format\": \"int64\",\n             \"type\": \"integer\"\n            },\n            \"value\": {\n             \"description\": \"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\",\n             \"type\": \"string\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"required\": [\n         \"name\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"updateStrategy\": {\n     \"description\": \"UpdateStrategy indicates the strategy the UnitedDeployment use to preform the update, when template is changed.\",\n     \"properties\": {\n      \"manualUpdate\": {\n       \"description\": \"Includes all of the parameters a Manual update strategy needs.\",\n       \"properties\": {\n        \"partitions\": {\n         \"additionalProperties\": {\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n         },\n         \"description\": \"Indicates number of subset partition.\",\n         \"type\": \"object\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"type\": {\n       \"description\": \"Type of UnitedDeployment update strategy. Default is Manual.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"selector\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"United Deployment\",\n \"type\": \"object\"\n}"}