{"kind":"NodeImage","apiVersion":"apps.kruise.io/v1alpha1","displayName":"Node Image","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":false,"logoURL":"","model":"contrail-analytics","modelDisplayName":"Contrail Analytics","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Not Found","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"contrail-analytics","version":"22.2.0-rev0bb9dbbd1","displayName":"Contrail Analytics","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Cloud Native Network","metadata":null},"metadata":{"source_uri":"https://jeffreymarshall.github.io/cn2-analytics-test/contrail-analytics-22.2.0.93.tgz"},"components":null,"relationships":null},"schema":"{\n \"description\": \"NodeImage is the Schema for the nodeimages API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"NodeImageSpec defines the desired state of NodeImage\",\n   \"properties\": {\n    \"images\": {\n     \"additionalProperties\": {\n      \"description\": \"ImageSpec defines the pulling spec of an image\",\n      \"properties\": {\n       \"pullSecrets\": {\n        \"description\": \"PullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.\",\n        \"items\": {\n         \"description\": \"ReferenceObject comprises a resource name, with a mandatory namespace, rendered as \\\"\\u003cnamespace\\u003e/\\u003cname\\u003e\\\".\",\n         \"properties\": {\n          \"name\": {\n           \"type\": \"string\"\n          },\n          \"namespace\": {\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"tags\": {\n        \"description\": \"Tags is a list of versions of this image\",\n        \"items\": {\n         \"description\": \"ImageTagSpec defines the pulling spec of an image tag\",\n         \"properties\": {\n          \"createdAt\": {\n           \"description\": \"Specifies the create time of this tag\",\n           \"format\": \"date-time\",\n           \"type\": \"string\"\n          },\n          \"ownerReferences\": {\n           \"description\": \"List of objects depended by this object. If this image is managed by a controller, then an entry in this list will point to this controller.\",\n           \"items\": {\n            \"description\": \"ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, \\\"must refer only to types A and B\\\" or \\\"UID not honored\\\" or \\\"name must be restricted\\\".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .\",\n            \"properties\": {\n             \"apiVersion\": {\n              \"description\": \"API version of the referent.\",\n              \"type\": \"string\"\n             },\n             \"fieldPath\": {\n              \"description\": \"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\",\n              \"type\": \"string\"\n             },\n             \"kind\": {\n              \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\n              \"type\": \"string\"\n             },\n             \"name\": {\n              \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n              \"type\": \"string\"\n             },\n             \"namespace\": {\n              \"description\": \"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n              \"type\": \"string\"\n             },\n             \"resourceVersion\": {\n              \"description\": \"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\",\n              \"type\": \"string\"\n             },\n             \"uid\": {\n              \"description\": \"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\n              \"type\": \"string\"\n             }\n            },\n            \"type\": \"object\"\n           },\n           \"type\": \"array\"\n          },\n          \"pullPolicy\": {\n           \"description\": \"PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.\",\n           \"properties\": {\n            \"activeDeadlineSeconds\": {\n             \"description\": \"ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the task may be active before the system tries to terminate it; value must be positive integer. if not specified, the system will never terminate it.\",\n             \"format\": \"int64\",\n             \"type\": \"integer\"\n            },\n            \"backoffLimit\": {\n             \"description\": \"Specifies the number of retries before marking the pulling task failed. Defaults to 3\",\n             \"format\": \"int32\",\n             \"type\": \"integer\"\n            },\n            \"timeoutSeconds\": {\n             \"description\": \"Specifies the timeout of the pulling task. Defaults to 600\",\n             \"format\": \"int32\",\n             \"type\": \"integer\"\n            },\n            \"ttlSecondsAfterFinished\": {\n             \"description\": \"TTLSecondsAfterFinished limits the lifetime of a pulling task that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the task finishes, it is eligible to be automatically deleted. If this field is unset, the task won't be automatically deleted. If this field is set to zero, the task becomes eligible to be deleted immediately after it finishes.\",\n             \"format\": \"int32\",\n             \"type\": \"integer\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"tag\": {\n           \"description\": \"Specifies the image tag\",\n           \"type\": \"string\"\n          },\n          \"version\": {\n           \"description\": \"An opaque value that represents the internal version of this tag that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. \\n Populated by the system. Read-only. Value must be treated as opaque by clients and .\",\n           \"format\": \"int64\",\n           \"type\": \"integer\"\n          }\n         },\n         \"required\": [\n          \"tag\"\n         ],\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       }\n      },\n      \"required\": [\n       \"tags\"\n      ],\n      \"type\": \"object\"\n     },\n     \"description\": \"Specifies images to be pulled on this node It can not be more than 256 for each NodeImage\",\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Node Image\",\n \"type\": \"object\"\n}"}