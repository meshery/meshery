{"kind":"KubeFedConfig","apiVersion":"core.kubefed.io/v1beta1","displayName":"Kube Fed Config","format":"JSON","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","metadata":{"capabilities":"","genealogy":"","isAnnotation":false,"isModelAnnotation":"FALSE","isNamespaced":true,"logoURL":"","model":"kubefed","modelDisplayName":"Kubefed","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"","svgComplete":"","svgWhite":""},"model":{"name":"kubefed","version":"0.10.0","displayName":"Kubefed","hostname":"","hostID":"00000000-0000-0000-0000-000000000000","displayhostname":"","category":{"name":"Uncategorized","metadata":null},"metadata":{"source_uri":"https://github.com/kubernetes-sigs/kubefed/releases/download/v0.10.0/kubefed-0.10.0.tgz"},"components":null,"relationships":null},"schema":"{\n \"properties\": {\n  \"spec\": {\n   \"description\": \"KubeFedConfigSpec defines the desired state of KubeFedConfig\",\n   \"properties\": {\n    \"clusterHealthCheck\": {\n     \"properties\": {\n      \"failureThreshold\": {\n       \"description\": \"Minimum consecutive failures for the cluster health to be considered failed after having succeeded.\",\n       \"format\": \"int64\",\n       \"type\": \"integer\"\n      },\n      \"period\": {\n       \"description\": \"How often to monitor the cluster health.\",\n       \"type\": \"string\"\n      },\n      \"successThreshold\": {\n       \"description\": \"Minimum consecutive successes for the cluster health to be considered successful after having failed.\",\n       \"format\": \"int64\",\n       \"type\": \"integer\"\n      },\n      \"timeout\": {\n       \"description\": \"Duration after which the cluster health check times out.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"controllerDuration\": {\n     \"properties\": {\n      \"availableDelay\": {\n       \"description\": \"Time to wait before reconciling on a healthy cluster.\",\n       \"type\": \"string\"\n      },\n      \"cacheSyncTimeout\": {\n       \"description\": \"Time to wait for all caches to sync before exit.\",\n       \"type\": \"string\"\n      },\n      \"unavailableDelay\": {\n       \"description\": \"Time to wait before giving up on an unhealthy cluster.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"featureGates\": {\n     \"items\": {\n      \"properties\": {\n       \"configuration\": {\n        \"type\": \"string\"\n       },\n       \"name\": {\n        \"type\": \"string\"\n       }\n      },\n      \"required\": [\n       \"configuration\",\n       \"name\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"leaderElect\": {\n     \"properties\": {\n      \"leaseDuration\": {\n       \"description\": \"The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.\",\n       \"type\": \"string\"\n      },\n      \"renewDeadline\": {\n       \"description\": \"The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.\",\n       \"type\": \"string\"\n      },\n      \"resourceLock\": {\n       \"description\": \"The type of resource object that is used for locking during leader election. Supported options are `configmaps` (default) and `endpoints`.\",\n       \"type\": \"string\"\n      },\n      \"retryPeriod\": {\n       \"description\": \"The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"scope\": {\n     \"description\": \"The scope of the KubeFed control plane should be either `Namespaced` or `Cluster`. `Namespaced` indicates that the KubeFed namespace will be the only target of the control plane.\",\n     \"type\": \"string\"\n    },\n    \"statusController\": {\n     \"properties\": {\n      \"maxConcurrentReconciles\": {\n       \"description\": \"The maximum number of concurrent Reconciles of status controller which can be run. Defaults to 1.\",\n       \"format\": \"int64\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"syncController\": {\n     \"properties\": {\n      \"adoptResources\": {\n       \"description\": \"Whether to adopt pre-existing resources in member clusters. Defaults to \\\"Enabled\\\".\",\n       \"type\": \"string\"\n      },\n      \"maxConcurrentReconciles\": {\n       \"description\": \"The maximum number of concurrent Reconciles of sync controller which can be run. Defaults to 1.\",\n       \"format\": \"int64\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"scope\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"Kube Fed Config\",\n \"type\": \"object\"\n}"}