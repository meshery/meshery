{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "WorkloadGroup",
   "schema": "{\n \"properties\": {\n  \"spec\": {\n   \"description\": \"`WorkloadGroup` enables specifying the properties of a single workload for bootstrap and provides a template for `WorkloadEntry`, similar to how `Deployment` specifies properties of workloads via `Pod` templates.\",\n   \"properties\": {\n    \"metadata\": {\n     \"description\": \"Metadata that will be used for all corresponding `WorkloadEntries`.\",\n     \"properties\": {\n      \"annotations\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"object\"\n      },\n      \"labels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"probe\": {\n     \"description\": \"`ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.\",\n     \"oneOf\": [\n      {\n       \"not\": {\n        \"anyOf\": [\n         {\n          \"required\": [\n           \"httpGet\"\n          ]\n         },\n         {\n          \"required\": [\n           \"tcpSocket\"\n          ]\n         },\n         {\n          \"required\": [\n           \"exec\"\n          ]\n         }\n        ]\n       }\n      },\n      {\n       \"required\": [\n        \"httpGet\"\n       ]\n      },\n      {\n       \"required\": [\n        \"tcpSocket\"\n       ]\n      },\n      {\n       \"required\": [\n        \"exec\"\n       ]\n      }\n     ],\n     \"properties\": {\n      \"exec\": {\n       \"description\": \"Health is determined by how the command that is executed exited.\",\n       \"properties\": {\n        \"command\": {\n         \"description\": \"Command to run.\",\n         \"items\": {\n          \"type\": \"string\"\n         },\n         \"type\": \"array\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"failureThreshold\": {\n       \"description\": \"Minimum consecutive failures for the probe to be considered failed after having succeeded.\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      },\n      \"httpGet\": {\n       \"description\": \"`httpGet` is performed to a given endpoint and the status/able to connect determines health.\",\n       \"properties\": {\n        \"host\": {\n         \"description\": \"Host name to connect to, defaults to the pod IP.\",\n         \"type\": \"string\"\n        },\n        \"httpHeaders\": {\n         \"description\": \"Headers the proxy will pass on to make the request.\",\n         \"items\": {\n          \"properties\": {\n           \"name\": {\n            \"type\": \"string\"\n           },\n           \"value\": {\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"type\": \"array\"\n        },\n        \"path\": {\n         \"description\": \"Path to access on the HTTP server.\",\n         \"type\": \"string\"\n        },\n        \"port\": {\n         \"description\": \"Port on which the endpoint lives.\",\n         \"maximum\": 4294967295,\n         \"minimum\": 0,\n         \"type\": \"integer\"\n        },\n        \"scheme\": {\n         \"type\": \"string\"\n        }\n       },\n       \"required\": [\n        \"port\"\n       ],\n       \"type\": \"object\"\n      },\n      \"initialDelaySeconds\": {\n       \"description\": \"Number of seconds after the container has started before readiness probes are initiated.\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      },\n      \"periodSeconds\": {\n       \"description\": \"How often (in seconds) to perform the probe.\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      },\n      \"successThreshold\": {\n       \"description\": \"Minimum consecutive successes for the probe to be considered successful after having failed.\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      },\n      \"tcpSocket\": {\n       \"description\": \"Health is determined by if the proxy is able to connect.\",\n       \"properties\": {\n        \"host\": {\n         \"type\": \"string\"\n        },\n        \"port\": {\n         \"maximum\": 4294967295,\n         \"minimum\": 0,\n         \"type\": \"integer\"\n        }\n       },\n       \"required\": [\n        \"port\"\n       ],\n       \"type\": \"object\"\n      },\n      \"timeoutSeconds\": {\n       \"description\": \"Number of seconds after which the probe times out.\",\n       \"format\": \"int32\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"template\": {\n     \"description\": \"Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.\",\n     \"properties\": {\n      \"address\": {\n       \"description\": \"Address associated with the network endpoint without the port.\",\n       \"type\": \"string\"\n      },\n      \"labels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"One or more labels associated with the endpoint.\",\n       \"type\": \"object\"\n      },\n      \"locality\": {\n       \"description\": \"The locality associated with the endpoint.\",\n       \"type\": \"string\"\n      },\n      \"network\": {\n       \"description\": \"Network enables Istio to group endpoints resident in the same L3 domain/network.\",\n       \"type\": \"string\"\n      },\n      \"ports\": {\n       \"additionalProperties\": {\n        \"maximum\": 4294967295,\n        \"minimum\": 0,\n        \"type\": \"integer\"\n       },\n       \"description\": \"Set of ports associated with the endpoint.\",\n       \"type\": \"object\"\n      },\n      \"serviceAccount\": {\n       \"description\": \"The service account associated with the workload if a sidecar is present in the workload.\",\n       \"type\": \"string\"\n      },\n      \"weight\": {\n       \"description\": \"The load balancing weight associated with the endpoint.\",\n       \"maximum\": 4294967295,\n       \"minimum\": 0,\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"template\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Workload Group\",\n \"type\": \"object\"\n}",
   "version": "networking.istio.io/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Workload Group",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false
  },
  "model": {
   "category": {
    "name": "Uncategorized"
   },
   "displayName": "base",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "subCategory": "Uncategorized",
    "svgColor": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 160 240\" fill=\"none\"\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M0 210H160L60 240L0 210Z\" fill=\"#466BB0\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M0 200L60 190V80L0 200Z\" fill=\"#466BB0\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M70 190L160 200L70 0V190Z\" fill=\"#466BB0\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n",
    "svgComplete": "",
    "svgWhite": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"6.386270046234131 3.7419400215148926 18.227430820465088 25.258059978485107\" fill=\"none\" height=\"20\" width=\"20\"\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M6.38627 24.7904L13.2215 23.738V12.1613L6.38627 24.7904Z\" fill=\"white\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M6.38627 25.8427H24.6137L13.2215 29L6.38627 25.8427Z\" fill=\"white\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M14.3608 23.7379L24.6137 24.7904L14.3608 3.74194V23.7379Z\" fill=\"white\"\u003e\u003c/path\u003e\u003c/svg\u003e"
   },
   "model": {
    "version": "1.22.0-alpha.1"
   },
   "name": "base",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "subCategory": "Uncategorized",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "ignored",
  "styles": {
   "primaryColor": "#00B39F",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "\u003csvg width=\"160\" height=\"240\" viewBox=\"0 0 160 240\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\u003cpath d=\"M0 210H160L60 240L0 210Z\" fill=\"#466BB0\"/\u003e\n\u003cpath d=\"M0 200L60 190V80L0 200Z\" fill=\"#466BB0\"/\u003e\n\u003cpath d=\"M70 190L160 200L70 0V190Z\" fill=\"#466BB0\"/\u003e\n\u003c/svg\u003e\n",
   "svgWhite": "\u003csvg viewBox=\"6.386270046234131 3.7419400215148926 18.227430820465088 25.258059978485107\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M6.38627 24.7904L13.2215 23.738V12.1613L6.38627 24.7904Z\" fill=\"white\"/\u003e\u003cpath d=\"M6.38627 25.8427H24.6137L13.2215 29L6.38627 25.8427Z\" fill=\"white\"/\u003e\u003cpath d=\"M14.3608 23.7379L24.6137 24.7904L14.3608 3.74194V23.7379Z\" fill=\"white\"/\u003e\u003c/svg\u003e"
  },
  "version": "v1.0.0"
 }