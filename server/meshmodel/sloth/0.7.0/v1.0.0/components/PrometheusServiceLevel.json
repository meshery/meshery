{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "PrometheusServiceLevel",
   "schema": "{\n \"description\": \"PrometheusServiceLevel is the expected service quality level using Prometheus as the backend used by Sloth.\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"ServiceLevelSpec is the spec for a PrometheusServiceLevel.\",\n   \"properties\": {\n    \"labels\": {\n     \"additionalProperties\": {\n      \"type\": \"string\"\n     },\n     \"description\": \"Labels are the Prometheus labels that will have all the recording and alerting rules generated for the service SLOs.\",\n     \"type\": \"object\"\n    },\n    \"service\": {\n     \"description\": \"Service is the application of the SLOs.\",\n     \"type\": \"string\"\n    },\n    \"slos\": {\n     \"description\": \"SLOs are the SLOs of the service.\",\n     \"items\": {\n      \"description\": \"SLO is the configuration/declaration of the service level objective of a service.\",\n      \"properties\": {\n       \"alerting\": {\n        \"description\": \"Alerting is the configuration with all the things related with the SLO alerts.\",\n        \"properties\": {\n         \"annotations\": {\n          \"additionalProperties\": {\n           \"type\": \"string\"\n          },\n          \"description\": \"Annotations are the Prometheus annotations that will have all the alerts generated by this SLO.\",\n          \"type\": \"object\"\n         },\n         \"labels\": {\n          \"additionalProperties\": {\n           \"type\": \"string\"\n          },\n          \"description\": \"Labels are the Prometheus labels that will have all the alerts generated by this SLO.\",\n          \"type\": \"object\"\n         },\n         \"name\": {\n          \"description\": \"Name is the name used by the alerts generated for this SLO.\",\n          \"type\": \"string\"\n         },\n         \"pageAlert\": {\n          \"description\": \"Page alert refers to the critical alert (check multiwindow-multiburn alerts).\",\n          \"properties\": {\n           \"annotations\": {\n            \"additionalProperties\": {\n             \"type\": \"string\"\n            },\n            \"description\": \"Annotations are the Prometheus annotations for the specific alert.\",\n            \"type\": \"object\"\n           },\n           \"disable\": {\n            \"description\": \"Disable disables the alert and makes Sloth not generating this alert. This can be helpful for example to disable ticket(warning) alerts.\",\n            \"type\": \"boolean\"\n           },\n           \"labels\": {\n            \"additionalProperties\": {\n             \"type\": \"string\"\n            },\n            \"description\": \"Labels are the Prometheus labels for the specific alert. For example can be useful to route the Page alert to specific Slack channel.\",\n            \"type\": \"object\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"ticketAlert\": {\n          \"description\": \"TicketAlert alert refers to the warning alert (check multiwindow-multiburn alerts).\",\n          \"properties\": {\n           \"annotations\": {\n            \"additionalProperties\": {\n             \"type\": \"string\"\n            },\n            \"description\": \"Annotations are the Prometheus annotations for the specific alert.\",\n            \"type\": \"object\"\n           },\n           \"disable\": {\n            \"description\": \"Disable disables the alert and makes Sloth not generating this alert. This can be helpful for example to disable ticket(warning) alerts.\",\n            \"type\": \"boolean\"\n           },\n           \"labels\": {\n            \"additionalProperties\": {\n             \"type\": \"string\"\n            },\n            \"description\": \"Labels are the Prometheus labels for the specific alert. For example can be useful to route the Page alert to specific Slack channel.\",\n            \"type\": \"object\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"description\": {\n        \"description\": \"Description is the description of the SLO.\",\n        \"type\": \"string\"\n       },\n       \"labels\": {\n        \"additionalProperties\": {\n         \"type\": \"string\"\n        },\n        \"description\": \"Labels are the Prometheus labels that will have all the recording and alerting rules for this specific SLO. These labels are merged with the previous level labels.\",\n        \"type\": \"object\"\n       },\n       \"name\": {\n        \"description\": \"Name is the name of the SLO.\",\n        \"maxLength\": 128,\n        \"type\": \"string\"\n       },\n       \"objective\": {\n        \"description\": \"Objective is target of the SLO the percentage (0, 100] (e.g 99.9).\",\n        \"type\": \"number\"\n       },\n       \"sli\": {\n        \"description\": \"SLI is the indicator (service level indicator) for this specific SLO.\",\n        \"properties\": {\n         \"events\": {\n          \"description\": \"Events is the events SLI type.\",\n          \"properties\": {\n           \"errorQuery\": {\n            \"description\": \"ErrorQuery is a Prometheus query that will get the number/count of events that we consider that are bad for the SLO (e.g \\\"http 5xx\\\", \\\"latency \\u003e 250ms\\\"...). Requires the usage of `{{.window}}` template variable.\",\n            \"type\": \"string\"\n           },\n           \"totalQuery\": {\n            \"description\": \"TotalQuery is a Prometheus query that will get the total number/count of events for the SLO (e.g \\\"all http requests\\\"...). Requires the usage of `{{.window}}` template variable.\",\n            \"type\": \"string\"\n           }\n          },\n          \"required\": [\n           \"errorQuery\",\n           \"totalQuery\"\n          ],\n          \"type\": \"object\"\n         },\n         \"plugin\": {\n          \"description\": \"Plugin is the pluggable SLI type.\",\n          \"properties\": {\n           \"id\": {\n            \"description\": \"Name is the name of the plugin that needs to load.\",\n            \"type\": \"string\"\n           },\n           \"options\": {\n            \"additionalProperties\": {\n             \"type\": \"string\"\n            },\n            \"description\": \"Options are the options used for the plugin.\",\n            \"type\": \"object\"\n           }\n          },\n          \"required\": [\n           \"id\"\n          ],\n          \"type\": \"object\"\n         },\n         \"raw\": {\n          \"description\": \"Raw is the raw SLI type.\",\n          \"properties\": {\n           \"errorRatioQuery\": {\n            \"description\": \"ErrorRatioQuery is a Prometheus query that will get the raw error ratio (0-1) for the SLO.\",\n            \"type\": \"string\"\n           }\n          },\n          \"required\": [\n           \"errorRatioQuery\"\n          ],\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"required\": [\n       \"alerting\",\n       \"name\",\n       \"objective\",\n       \"sli\"\n      ],\n      \"type\": \"object\"\n     },\n     \"minItems\": 1,\n     \"type\": \"array\"\n    }\n   },\n   \"required\": [\n    \"service\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Prometheus Service Level\",\n \"type\": \"object\"\n}",
   "version": "sloth.slok.dev/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Prometheus Service Level",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false
  },
  "model": {
   "category": {
    "name": "Uncategorized"
   },
   "displayName": "Sloth",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "primaryColor": "#00B39F",
    "secondaryColor": "#00D3A9",
    "shape": "circle",
    "source_uri": "https://github.com/slok/sloth/releases/download/sloth-helm-chart-0.7.0/sloth-0.7.0.tgz",
    "styleOverrides": "",
    "svgColor": "",
    "svgComplete": "",
    "svgWhite": ""
   },
   "model": {
    "version": "0.7.0"
   },
   "name": "sloth",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "subCategory": "Uncategorized",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#00B39F",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "",
   "svgWhite": ""
  },
  "version": "v1.0.0"
 }