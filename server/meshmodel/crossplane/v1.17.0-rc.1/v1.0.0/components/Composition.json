{
  "capabilities": [
   {
    "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
    "displayName": "Performance Test",
    "entityState": [
     "instance"
    ],
    "key": "",
    "kind": "action",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "perf-test",
    "type": "operator",
    "version": "0.7.0"
   },
   {
    "description": "Configure the workload specific setting of a component",
    "displayName": "Workload Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "config",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure Labels And Annotations for  the component ",
    "displayName": "Labels and Annotations Configuration",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "labels-and-annotations",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View relationships for the component",
    "displayName": "Relationships",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "relationship",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "View Component Definition ",
    "displayName": "Json Schema",
    "entityState": [
     "declaration",
     "instance"
    ],
    "key": "",
    "kind": "view",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "definition",
    "type": "configuration",
    "version": "0.7.0"
   },
   {
    "description": "Configure the visual styles for the component",
    "displayName": "Styling",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Change the shape of the component",
    "displayName": "Change Shape",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "mutate",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "shape",
    "type": "style",
    "version": "0.7.0"
   },
   {
    "description": "Drag and Drop a component into a parent component in graph view",
    "displayName": "Compound Drag And Drop",
    "entityState": [
     "declaration"
    ],
    "key": "",
    "kind": "interaction",
    "metadata": null,
    "schemaVersion": "capability.meshery.io/v1alpha1",
    "status": "enabled",
    "subType": "compoundDnd",
    "type": "graph",
    "version": "0.7.0"
   }
  ],
  "component": {
   "kind": "Composition",
   "schema": "{\n \"description\": \"A Composition defines a collection of managed resources or functions that\\nCrossplane uses to create and manage new composite resources.\\n\\n\\nRead the Crossplane documentation for\\n[more information about Compositions](https://docs.crossplane.io/latest/concepts/compositions).\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"CompositionSpec specifies desired state of a composition.\",\n   \"properties\": {\n    \"compositeTypeRef\": {\n     \"description\": \"CompositeTypeRef specifies the type of composite resource that this\\ncomposition is compatible with.\",\n     \"properties\": {\n      \"apiVersion\": {\n       \"description\": \"APIVersion of the type.\",\n       \"type\": \"string\"\n      },\n      \"kind\": {\n       \"description\": \"Kind of the type.\",\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"apiVersion\",\n      \"kind\"\n     ],\n     \"type\": \"object\",\n     \"x-kubernetes-validations\": [\n      {\n       \"message\": \"Value is immutable\",\n       \"rule\": \"self == oldSelf\"\n      }\n     ]\n    },\n    \"environment\": {\n     \"description\": \"Environment configures the environment in which resources are rendered.\\n\\n\\nTHIS IS AN ALPHA FIELD. Do not use it in production. It is not honored\\nunless the relevant Crossplane feature flag is enabled, and may be\\nchanged or removed without notice.\",\n     \"properties\": {\n      \"defaultData\": {\n       \"additionalProperties\": {\n        \"format\": \"textarea\",\n        \"type\": \"string\"\n       },\n       \"description\": \"DefaultData statically defines the initial state of the environment.\\nIt has the same schema-less structure as the data field in\\nenvironment configs.\\nIt is overwritten by the selected environment configs.\",\n       \"type\": \"object\"\n      },\n      \"environmentConfigs\": {\n       \"description\": \"EnvironmentConfigs selects a list of `EnvironmentConfig`s. The resolved\\nresources are stored in the composite resource at\\n`spec.environmentConfigRefs` and is only updated if it is null.\\n\\n\\nThe list of references is used to compute an in-memory environment at\\ncompose time. The data of all object is merged in the order they are\\nlisted, meaning the values of EnvironmentConfigs with a larger index take\\npriority over ones with smaller indices.\\n\\n\\nThe computed environment can be accessed in a composition using\\n`FromEnvironmentFieldPath` and `CombineFromEnvironment` patches.\",\n       \"items\": {\n        \"description\": \"EnvironmentSource selects a EnvironmentConfig resource.\",\n        \"properties\": {\n         \"ref\": {\n          \"description\": \"Ref is a named reference to a single EnvironmentConfig.\\nEither Ref or Selector is required.\",\n          \"properties\": {\n           \"name\": {\n            \"description\": \"The name of the object.\",\n            \"type\": \"string\"\n           }\n          },\n          \"required\": [\n           \"name\"\n          ],\n          \"type\": \"object\"\n         },\n         \"selector\": {\n          \"description\": \"Selector selects EnvironmentConfig(s) via labels.\",\n          \"properties\": {\n           \"matchLabels\": {\n            \"description\": \"MatchLabels ensures an object with matching labels is selected.\",\n            \"items\": {\n             \"description\": \"An EnvironmentSourceSelectorLabelMatcher acts like a k8s label selector but\\ncan draw the label value from a different path.\",\n             \"properties\": {\n              \"fromFieldPathPolicy\": {\n               \"default\": \"Required\",\n               \"description\": \"FromFieldPathPolicy specifies the policy for the valueFromFieldPath.\\nThe default is Required, meaning that an error will be returned if the\\nfield is not found in the composite resource.\\nOptional means that if the field is not found in the composite resource,\\nthat label pair will just be skipped. N.B. other specified label\\nmatchers will still be used to retrieve the desired\\nenvironment config, if any.\",\n               \"enum\": [\n                \"Optional\",\n                \"Required\"\n               ],\n               \"type\": \"string\"\n              },\n              \"key\": {\n               \"description\": \"Key of the label to match.\",\n               \"type\": \"string\"\n              },\n              \"type\": {\n               \"default\": \"FromCompositeFieldPath\",\n               \"description\": \"Type specifies where the value for a label comes from.\",\n               \"enum\": [\n                \"FromCompositeFieldPath\",\n                \"Value\"\n               ],\n               \"type\": \"string\"\n              },\n              \"value\": {\n               \"description\": \"Value specifies a literal label value.\",\n               \"type\": \"string\"\n              },\n              \"valueFromFieldPath\": {\n               \"description\": \"ValueFromFieldPath specifies the field path to look for the label value.\",\n               \"type\": \"string\"\n              }\n             },\n             \"required\": [\n              \"key\"\n             ],\n             \"type\": \"object\"\n            },\n            \"type\": \"array\"\n           },\n           \"maxMatch\": {\n            \"description\": \"MaxMatch specifies the number of extracted EnvironmentConfigs in Multiple mode, extracts all if nil.\",\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n           },\n           \"minMatch\": {\n            \"description\": \"MinMatch specifies the required minimum of extracted EnvironmentConfigs in Multiple mode.\",\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n           },\n           \"mode\": {\n            \"default\": \"Single\",\n            \"description\": \"Mode specifies retrieval strategy: \\\"Single\\\" or \\\"Multiple\\\".\",\n            \"enum\": [\n             \"Single\",\n             \"Multiple\"\n            ],\n            \"type\": \"string\"\n           },\n           \"sortByFieldPath\": {\n            \"default\": \"metadata.name\",\n            \"description\": \"SortByFieldPath is the path to the field based on which list of EnvironmentConfigs is alphabetically sorted.\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"type\": {\n          \"default\": \"Reference\",\n          \"description\": \"Type specifies the way the EnvironmentConfig is selected.\\nDefault is `Reference`\",\n          \"enum\": [\n           \"Reference\",\n           \"Selector\"\n          ],\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"patches\": {\n       \"description\": \"Patches is a list of environment patches that are executed before a\\ncomposition's resources are composed.\",\n       \"items\": {\n        \"description\": \"EnvironmentPatch is a patch for a Composition environment.\",\n        \"properties\": {\n         \"combine\": {\n          \"description\": \"Combine is the patch configuration for a CombineFromComposite or\\nCombineToComposite patch.\",\n          \"properties\": {\n           \"strategy\": {\n            \"description\": \"Strategy defines the strategy to use to combine the input variable values.\\nCurrently only string is supported.\",\n            \"enum\": [\n             \"string\"\n            ],\n            \"type\": \"string\"\n           },\n           \"string\": {\n            \"description\": \"String declares that input variables should be combined into a single\\nstring, using the relevant settings for formatting purposes.\",\n            \"properties\": {\n             \"fmt\": {\n              \"description\": \"Format the input using a Go format string. See\\nhttps://golang.org/pkg/fmt/ for details.\",\n              \"type\": \"string\"\n             }\n            },\n            \"required\": [\n             \"fmt\"\n            ],\n            \"type\": \"object\"\n           },\n           \"variables\": {\n            \"description\": \"Variables are the list of variables whose values will be retrieved and\\ncombined.\",\n            \"items\": {\n             \"description\": \"A CombineVariable defines the source of a value that is combined with\\nothers to form and patch an output value. Currently, this only supports\\nretrieving values from a field path.\",\n             \"properties\": {\n              \"fromFieldPath\": {\n               \"description\": \"FromFieldPath is the path of the field on the source whose value is\\nto be used as input.\",\n               \"type\": \"string\"\n              }\n             },\n             \"required\": [\n              \"fromFieldPath\"\n             ],\n             \"type\": \"object\"\n            },\n            \"minItems\": 1,\n            \"type\": \"array\"\n           }\n          },\n          \"required\": [\n           \"strategy\",\n           \"variables\"\n          ],\n          \"type\": \"object\"\n         },\n         \"fromFieldPath\": {\n          \"description\": \"FromFieldPath is the path of the field on the resource whose value is\\nto be used as input. Required when type is FromCompositeFieldPath or\\nToCompositeFieldPath.\",\n          \"type\": \"string\"\n         },\n         \"policy\": {\n          \"description\": \"Policy configures the specifics of patching behaviour.\",\n          \"properties\": {\n           \"fromFieldPath\": {\n            \"description\": \"FromFieldPath specifies how to patch from a field path. The default is\\n'Optional', which means the patch will be a no-op if the specified\\nfromFieldPath does not exist. Use 'Required' if the patch should fail if\\nthe specified path does not exist.\",\n            \"enum\": [\n             \"Optional\",\n             \"Required\"\n            ],\n            \"type\": \"string\"\n           },\n           \"mergeOptions\": {\n            \"description\": \"MergeOptions Specifies merge options on a field path.\",\n            \"properties\": {\n             \"appendSlice\": {\n              \"description\": \"Specifies that already existing elements in a merged slice should be preserved\",\n              \"type\": \"boolean\"\n             },\n             \"keepMapValues\": {\n              \"description\": \"Specifies that already existing values in a merged map should be preserved\",\n              \"type\": \"boolean\"\n             }\n            },\n            \"type\": \"object\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"toFieldPath\": {\n          \"description\": \"ToFieldPath is the path of the field on the resource whose value will\\nbe changed with the result of transforms. Leave empty if you'd like to\\npropagate to the same path as fromFieldPath.\",\n          \"type\": \"string\"\n         },\n         \"transforms\": {\n          \"description\": \"Transforms are the list of functions that are used as a FIFO pipe for the\\ninput to be transformed.\",\n          \"items\": {\n           \"description\": \"Transform is a unit of process whose input is transformed into an output with\\nthe supplied configuration.\",\n           \"properties\": {\n            \"convert\": {\n             \"description\": \"Convert is used to cast the input into the given output type.\",\n             \"properties\": {\n              \"format\": {\n               \"description\": \"The expected input format.\\n\\n\\n* `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).\\nOnly used during `string -\\u003e float64` conversions.\\n* `json` - parses the input as a JSON string.\\nOnly used during `string -\\u003e object` or `string -\\u003e list` conversions.\\n\\n\\nIf this property is null, the default conversion is applied.\",\n               \"enum\": [\n                \"none\",\n                \"quantity\",\n                \"json\"\n               ],\n               \"type\": \"string\"\n              },\n              \"toType\": {\n               \"description\": \"ToType is the type of the output of this transform.\",\n               \"enum\": [\n                \"string\",\n                \"int\",\n                \"int64\",\n                \"bool\",\n                \"float64\",\n                \"object\",\n                \"array\"\n               ],\n               \"type\": \"string\"\n              }\n             },\n             \"required\": [\n              \"toType\"\n             ],\n             \"type\": \"object\"\n            },\n            \"map\": {\n             \"additionalProperties\": {\n              \"format\": \"textarea\",\n              \"type\": \"string\"\n             },\n             \"description\": \"Map uses the input as a key in the given map and returns the value.\",\n             \"type\": \"object\"\n            },\n            \"match\": {\n             \"description\": \"Match is a more complex version of Map that matches a list of patterns.\",\n             \"properties\": {\n              \"fallbackTo\": {\n               \"default\": \"Value\",\n               \"description\": \"Determines to what value the transform should fallback if no pattern matches.\",\n               \"enum\": [\n                \"Value\",\n                \"Input\"\n               ],\n               \"type\": \"string\"\n              },\n              \"fallbackValue\": {\n               \"description\": \"The fallback value that should be returned by the transform if now pattern\\nmatches.\",\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"patterns\": {\n               \"description\": \"The patterns that should be tested against the input string.\\nPatterns are tested in order. The value of the first match is used as\\nresult of this transform.\",\n               \"items\": {\n                \"description\": \"MatchTransformPattern is a transform that returns the value that matches a\\npattern.\",\n                \"properties\": {\n                 \"literal\": {\n                  \"description\": \"Literal exactly matches the input string (case sensitive).\\nIs required if `type` is `literal`.\",\n                  \"type\": \"string\"\n                 },\n                 \"regexp\": {\n                  \"description\": \"Regexp to match against the input string.\\nIs required if `type` is `regexp`.\",\n                  \"type\": \"string\"\n                 },\n                 \"result\": {\n                  \"description\": \"The value that is used as result of the transform if the pattern matches.\",\n                  \"format\": \"textarea\",\n                  \"type\": \"string\"\n                 },\n                 \"type\": {\n                  \"default\": \"literal\",\n                  \"description\": \"Type specifies how the pattern matches the input.\\n\\n\\n* `literal` - the pattern value has to exactly match (case sensitive) the\\ninput string. This is the default.\\n\\n\\n* `regexp` - the pattern treated as a regular expression against\\nwhich the input string is tested. Crossplane will throw an error if the\\nkey is not a valid regexp.\",\n                  \"enum\": [\n                   \"literal\",\n                   \"regexp\"\n                  ],\n                  \"type\": \"string\"\n                 }\n                },\n                \"required\": [\n                 \"result\",\n                 \"type\"\n                ],\n                \"type\": \"object\"\n               },\n               \"type\": \"array\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"math\": {\n             \"description\": \"Math is used to transform the input via mathematical operations such as\\nmultiplication.\",\n             \"properties\": {\n              \"clampMax\": {\n               \"description\": \"ClampMax makes sure that the value is not bigger than the given value.\",\n               \"format\": \"int64\",\n               \"type\": \"integer\"\n              },\n              \"clampMin\": {\n               \"description\": \"ClampMin makes sure that the value is not smaller than the given value.\",\n               \"format\": \"int64\",\n               \"type\": \"integer\"\n              },\n              \"multiply\": {\n               \"description\": \"Multiply the value.\",\n               \"format\": \"int64\",\n               \"type\": \"integer\"\n              },\n              \"type\": {\n               \"default\": \"Multiply\",\n               \"description\": \"Type of the math transform to be run.\",\n               \"enum\": [\n                \"Multiply\",\n                \"ClampMin\",\n                \"ClampMax\"\n               ],\n               \"type\": \"string\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"string\": {\n             \"description\": \"String is used to transform the input into a string or a different kind\\nof string. Note that the input does not necessarily need to be a string.\",\n             \"properties\": {\n              \"convert\": {\n               \"description\": \"Optional conversion method to be specified.\\n`ToUpper` and `ToLower` change the letter case of the input string.\\n`ToBase64` and `FromBase64` perform a base64 conversion based on the input string.\\n`ToJson` converts any input value into its raw JSON representation.\\n`ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input\\nconverted to JSON.\\n`ToAdler32` generate a addler32 hash based on the input string.\",\n               \"enum\": [\n                \"ToUpper\",\n                \"ToLower\",\n                \"ToBase64\",\n                \"FromBase64\",\n                \"ToJson\",\n                \"ToSha1\",\n                \"ToSha256\",\n                \"ToSha512\",\n                \"ToAdler32\"\n               ],\n               \"type\": \"string\"\n              },\n              \"fmt\": {\n               \"description\": \"Format the input using a Go format string. See\\nhttps://golang.org/pkg/fmt/ for details.\",\n               \"type\": \"string\"\n              },\n              \"join\": {\n               \"description\": \"Join defines parameters to join a slice of values to a string.\",\n               \"properties\": {\n                \"separator\": {\n                 \"description\": \"Separator defines the character that should separate the values from each\\nother in the joined string.\",\n                 \"type\": \"string\"\n                }\n               },\n               \"required\": [\n                \"separator\"\n               ],\n               \"type\": \"object\"\n              },\n              \"regexp\": {\n               \"description\": \"Extract a match from the input using a regular expression.\",\n               \"properties\": {\n                \"group\": {\n                 \"description\": \"Group number to match. 0 (the default) matches the entire expression.\",\n                 \"type\": \"integer\"\n                },\n                \"match\": {\n                 \"description\": \"Match string. May optionally include submatches, aka capture groups.\\nSee https://pkg.go.dev/regexp/ for details.\",\n                 \"type\": \"string\"\n                }\n               },\n               \"required\": [\n                \"match\"\n               ],\n               \"type\": \"object\"\n              },\n              \"trim\": {\n               \"description\": \"Trim the prefix or suffix from the input\",\n               \"type\": \"string\"\n              },\n              \"type\": {\n               \"default\": \"Format\",\n               \"description\": \"Type of the string transform to be run.\",\n               \"enum\": [\n                \"Format\",\n                \"Convert\",\n                \"TrimPrefix\",\n                \"TrimSuffix\",\n                \"Regexp\",\n                \"Join\"\n               ],\n               \"type\": \"string\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"type\": {\n             \"description\": \"Type of the transform to be run.\",\n             \"enum\": [\n              \"map\",\n              \"match\",\n              \"math\",\n              \"string\",\n              \"convert\"\n             ],\n             \"type\": \"string\"\n            }\n           },\n           \"required\": [\n            \"type\"\n           ],\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"type\": {\n          \"default\": \"FromCompositeFieldPath\",\n          \"description\": \"Type sets the patching behaviour to be used. Each patch type may require\\nits own fields to be set on the Patch object.\",\n          \"enum\": [\n           \"FromCompositeFieldPath\",\n           \"ToCompositeFieldPath\",\n           \"CombineFromComposite\",\n           \"CombineToComposite\"\n          ],\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"policy\": {\n       \"description\": \"Policy represents the Resolve and Resolution policies which apply to\\nall EnvironmentSourceReferences in EnvironmentConfigs list.\",\n       \"properties\": {\n        \"resolution\": {\n         \"default\": \"Required\",\n         \"description\": \"Resolution specifies whether resolution of this reference is required.\\nThe default is 'Required', which means the reconcile will fail if the\\nreference cannot be resolved. 'Optional' means this reference will be\\na no-op if it cannot be resolved.\",\n         \"enum\": [\n          \"Required\",\n          \"Optional\"\n         ],\n         \"type\": \"string\"\n        },\n        \"resolve\": {\n         \"description\": \"Resolve specifies when this reference should be resolved. The default\\nis 'IfNotPresent', which will attempt to resolve the reference only when\\nthe corresponding field is not present. Use 'Always' to resolve the\\nreference on every reconcile.\",\n         \"enum\": [\n          \"Always\",\n          \"IfNotPresent\"\n         ],\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"mode\": {\n     \"default\": \"Resources\",\n     \"description\": \"Mode controls what type or \\\"mode\\\" of Composition will be used.\\n\\n\\n\\\"Pipeline\\\" indicates that a Composition specifies a pipeline of\\nComposition Functions, each of which is responsible for producing\\ncomposed resources that Crossplane should create or update.\\n\\n\\n\\\"Resources\\\" indicates that a Composition uses what is commonly referred\\nto as \\\"Patch \\u0026 Transform\\\" or P\\u0026T composition. This mode of Composition\\nuses an array of resources, each a template for a composed resource.\\n\\n\\nAll Compositions should use Pipeline mode. Resources mode is deprecated.\\nResources mode won't be removed in Crossplane 1.x, and will remain the\\ndefault to avoid breaking legacy Compositions. However, it's no longer\\naccepting new features, and only accepting security related bug fixes.\",\n     \"enum\": [\n      \"Resources\",\n      \"Pipeline\"\n     ],\n     \"type\": \"string\"\n    },\n    \"patchSets\": {\n     \"description\": \"PatchSets define a named set of patches that may be included by any\\nresource in this Composition. PatchSets cannot themselves refer to other\\nPatchSets.\\n\\n\\nPatchSets are only used by the \\\"Resources\\\" mode of Composition. They\\nare ignored by other modes.\\n\\n\\nDeprecated: Use Composition Functions instead.\",\n     \"items\": {\n      \"description\": \"A PatchSet is a set of patches that can be reused from all resources within\\na Composition.\",\n      \"properties\": {\n       \"name\": {\n        \"description\": \"Name of this PatchSet.\",\n        \"type\": \"string\"\n       },\n       \"patches\": {\n        \"description\": \"Patches will be applied as an overlay to the base resource.\",\n        \"items\": {\n         \"description\": \"Patch objects are applied between composite and composed resources. Their\\nbehaviour depends on the Type selected. The default Type,\\nFromCompositeFieldPath, copies a value from the composite resource to\\nthe composed resource, applying any defined transformers.\",\n         \"properties\": {\n          \"combine\": {\n           \"description\": \"Combine is the patch configuration for a CombineFromComposite,\\nCombineFromEnvironment, CombineToComposite or CombineToEnvironment patch.\",\n           \"properties\": {\n            \"strategy\": {\n             \"description\": \"Strategy defines the strategy to use to combine the input variable values.\\nCurrently only string is supported.\",\n             \"enum\": [\n              \"string\"\n             ],\n             \"type\": \"string\"\n            },\n            \"string\": {\n             \"description\": \"String declares that input variables should be combined into a single\\nstring, using the relevant settings for formatting purposes.\",\n             \"properties\": {\n              \"fmt\": {\n               \"description\": \"Format the input using a Go format string. See\\nhttps://golang.org/pkg/fmt/ for details.\",\n               \"type\": \"string\"\n              }\n             },\n             \"required\": [\n              \"fmt\"\n             ],\n             \"type\": \"object\"\n            },\n            \"variables\": {\n             \"description\": \"Variables are the list of variables whose values will be retrieved and\\ncombined.\",\n             \"items\": {\n              \"description\": \"A CombineVariable defines the source of a value that is combined with\\nothers to form and patch an output value. Currently, this only supports\\nretrieving values from a field path.\",\n              \"properties\": {\n               \"fromFieldPath\": {\n                \"description\": \"FromFieldPath is the path of the field on the source whose value is\\nto be used as input.\",\n                \"type\": \"string\"\n               }\n              },\n              \"required\": [\n               \"fromFieldPath\"\n              ],\n              \"type\": \"object\"\n             },\n             \"minItems\": 1,\n             \"type\": \"array\"\n            }\n           },\n           \"required\": [\n            \"strategy\",\n            \"variables\"\n           ],\n           \"type\": \"object\"\n          },\n          \"fromFieldPath\": {\n           \"description\": \"FromFieldPath is the path of the field on the resource whose value is\\nto be used as input. Required when type is FromCompositeFieldPath,\\nFromEnvironmentFieldPath, ToCompositeFieldPath, ToEnvironmentFieldPath.\",\n           \"type\": \"string\"\n          },\n          \"patchSetName\": {\n           \"description\": \"PatchSetName to include patches from. Required when type is PatchSet.\",\n           \"type\": \"string\"\n          },\n          \"policy\": {\n           \"description\": \"Policy configures the specifics of patching behaviour.\",\n           \"properties\": {\n            \"fromFieldPath\": {\n             \"description\": \"FromFieldPath specifies how to patch from a field path. The default is\\n'Optional', which means the patch will be a no-op if the specified\\nfromFieldPath does not exist. Use 'Required' if the patch should fail if\\nthe specified path does not exist.\",\n             \"enum\": [\n              \"Optional\",\n              \"Required\"\n             ],\n             \"type\": \"string\"\n            },\n            \"mergeOptions\": {\n             \"description\": \"MergeOptions Specifies merge options on a field path.\",\n             \"properties\": {\n              \"appendSlice\": {\n               \"description\": \"Specifies that already existing elements in a merged slice should be preserved\",\n               \"type\": \"boolean\"\n              },\n              \"keepMapValues\": {\n               \"description\": \"Specifies that already existing values in a merged map should be preserved\",\n               \"type\": \"boolean\"\n              }\n             },\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"toFieldPath\": {\n           \"description\": \"ToFieldPath is the path of the field on the resource whose value will\\nbe changed with the result of transforms. Leave empty if you'd like to\\npropagate to the same path as fromFieldPath.\",\n           \"type\": \"string\"\n          },\n          \"transforms\": {\n           \"description\": \"Transforms are the list of functions that are used as a FIFO pipe for the\\ninput to be transformed.\",\n           \"items\": {\n            \"description\": \"Transform is a unit of process whose input is transformed into an output with\\nthe supplied configuration.\",\n            \"properties\": {\n             \"convert\": {\n              \"description\": \"Convert is used to cast the input into the given output type.\",\n              \"properties\": {\n               \"format\": {\n                \"description\": \"The expected input format.\\n\\n\\n* `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).\\nOnly used during `string -\\u003e float64` conversions.\\n* `json` - parses the input as a JSON string.\\nOnly used during `string -\\u003e object` or `string -\\u003e list` conversions.\\n\\n\\nIf this property is null, the default conversion is applied.\",\n                \"enum\": [\n                 \"none\",\n                 \"quantity\",\n                 \"json\"\n                ],\n                \"type\": \"string\"\n               },\n               \"toType\": {\n                \"description\": \"ToType is the type of the output of this transform.\",\n                \"enum\": [\n                 \"string\",\n                 \"int\",\n                 \"int64\",\n                 \"bool\",\n                 \"float64\",\n                 \"object\",\n                 \"array\"\n                ],\n                \"type\": \"string\"\n               }\n              },\n              \"required\": [\n               \"toType\"\n              ],\n              \"type\": \"object\"\n             },\n             \"map\": {\n              \"additionalProperties\": {\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"description\": \"Map uses the input as a key in the given map and returns the value.\",\n              \"type\": \"object\"\n             },\n             \"match\": {\n              \"description\": \"Match is a more complex version of Map that matches a list of patterns.\",\n              \"properties\": {\n               \"fallbackTo\": {\n                \"default\": \"Value\",\n                \"description\": \"Determines to what value the transform should fallback if no pattern matches.\",\n                \"enum\": [\n                 \"Value\",\n                 \"Input\"\n                ],\n                \"type\": \"string\"\n               },\n               \"fallbackValue\": {\n                \"description\": \"The fallback value that should be returned by the transform if now pattern\\nmatches.\",\n                \"format\": \"textarea\",\n                \"type\": \"string\"\n               },\n               \"patterns\": {\n                \"description\": \"The patterns that should be tested against the input string.\\nPatterns are tested in order. The value of the first match is used as\\nresult of this transform.\",\n                \"items\": {\n                 \"description\": \"MatchTransformPattern is a transform that returns the value that matches a\\npattern.\",\n                 \"properties\": {\n                  \"literal\": {\n                   \"description\": \"Literal exactly matches the input string (case sensitive).\\nIs required if `type` is `literal`.\",\n                   \"type\": \"string\"\n                  },\n                  \"regexp\": {\n                   \"description\": \"Regexp to match against the input string.\\nIs required if `type` is `regexp`.\",\n                   \"type\": \"string\"\n                  },\n                  \"result\": {\n                   \"description\": \"The value that is used as result of the transform if the pattern matches.\",\n                   \"format\": \"textarea\",\n                   \"type\": \"string\"\n                  },\n                  \"type\": {\n                   \"default\": \"literal\",\n                   \"description\": \"Type specifies how the pattern matches the input.\\n\\n\\n* `literal` - the pattern value has to exactly match (case sensitive) the\\ninput string. This is the default.\\n\\n\\n* `regexp` - the pattern treated as a regular expression against\\nwhich the input string is tested. Crossplane will throw an error if the\\nkey is not a valid regexp.\",\n                   \"enum\": [\n                    \"literal\",\n                    \"regexp\"\n                   ],\n                   \"type\": \"string\"\n                  }\n                 },\n                 \"required\": [\n                  \"result\",\n                  \"type\"\n                 ],\n                 \"type\": \"object\"\n                },\n                \"type\": \"array\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"math\": {\n              \"description\": \"Math is used to transform the input via mathematical operations such as\\nmultiplication.\",\n              \"properties\": {\n               \"clampMax\": {\n                \"description\": \"ClampMax makes sure that the value is not bigger than the given value.\",\n                \"format\": \"int64\",\n                \"type\": \"integer\"\n               },\n               \"clampMin\": {\n                \"description\": \"ClampMin makes sure that the value is not smaller than the given value.\",\n                \"format\": \"int64\",\n                \"type\": \"integer\"\n               },\n               \"multiply\": {\n                \"description\": \"Multiply the value.\",\n                \"format\": \"int64\",\n                \"type\": \"integer\"\n               },\n               \"type\": {\n                \"default\": \"Multiply\",\n                \"description\": \"Type of the math transform to be run.\",\n                \"enum\": [\n                 \"Multiply\",\n                 \"ClampMin\",\n                 \"ClampMax\"\n                ],\n                \"type\": \"string\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"string\": {\n              \"description\": \"String is used to transform the input into a string or a different kind\\nof string. Note that the input does not necessarily need to be a string.\",\n              \"properties\": {\n               \"convert\": {\n                \"description\": \"Optional conversion method to be specified.\\n`ToUpper` and `ToLower` change the letter case of the input string.\\n`ToBase64` and `FromBase64` perform a base64 conversion based on the input string.\\n`ToJson` converts any input value into its raw JSON representation.\\n`ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input\\nconverted to JSON.\\n`ToAdler32` generate a addler32 hash based on the input string.\",\n                \"enum\": [\n                 \"ToUpper\",\n                 \"ToLower\",\n                 \"ToBase64\",\n                 \"FromBase64\",\n                 \"ToJson\",\n                 \"ToSha1\",\n                 \"ToSha256\",\n                 \"ToSha512\",\n                 \"ToAdler32\"\n                ],\n                \"type\": \"string\"\n               },\n               \"fmt\": {\n                \"description\": \"Format the input using a Go format string. See\\nhttps://golang.org/pkg/fmt/ for details.\",\n                \"type\": \"string\"\n               },\n               \"join\": {\n                \"description\": \"Join defines parameters to join a slice of values to a string.\",\n                \"properties\": {\n                 \"separator\": {\n                  \"description\": \"Separator defines the character that should separate the values from each\\nother in the joined string.\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"required\": [\n                 \"separator\"\n                ],\n                \"type\": \"object\"\n               },\n               \"regexp\": {\n                \"description\": \"Extract a match from the input using a regular expression.\",\n                \"properties\": {\n                 \"group\": {\n                  \"description\": \"Group number to match. 0 (the default) matches the entire expression.\",\n                  \"type\": \"integer\"\n                 },\n                 \"match\": {\n                  \"description\": \"Match string. May optionally include submatches, aka capture groups.\\nSee https://pkg.go.dev/regexp/ for details.\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"required\": [\n                 \"match\"\n                ],\n                \"type\": \"object\"\n               },\n               \"trim\": {\n                \"description\": \"Trim the prefix or suffix from the input\",\n                \"type\": \"string\"\n               },\n               \"type\": {\n                \"default\": \"Format\",\n                \"description\": \"Type of the string transform to be run.\",\n                \"enum\": [\n                 \"Format\",\n                 \"Convert\",\n                 \"TrimPrefix\",\n                 \"TrimSuffix\",\n                 \"Regexp\",\n                 \"Join\"\n                ],\n                \"type\": \"string\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"type\": {\n              \"description\": \"Type of the transform to be run.\",\n              \"enum\": [\n               \"map\",\n               \"match\",\n               \"math\",\n               \"string\",\n               \"convert\"\n              ],\n              \"type\": \"string\"\n             }\n            },\n            \"required\": [\n             \"type\"\n            ],\n            \"type\": \"object\"\n           },\n           \"type\": \"array\"\n          },\n          \"type\": {\n           \"default\": \"FromCompositeFieldPath\",\n           \"description\": \"Type sets the patching behaviour to be used. Each patch type may require\\nits own fields to be set on the Patch object.\",\n           \"enum\": [\n            \"FromCompositeFieldPath\",\n            \"FromEnvironmentFieldPath\",\n            \"PatchSet\",\n            \"ToCompositeFieldPath\",\n            \"ToEnvironmentFieldPath\",\n            \"CombineFromEnvironment\",\n            \"CombineFromComposite\",\n            \"CombineToComposite\",\n            \"CombineToEnvironment\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       }\n      },\n      \"required\": [\n       \"name\",\n       \"patches\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"pipeline\": {\n     \"description\": \"Pipeline is a list of composition function steps that will be used when a\\ncomposite resource referring to this composition is created. One of\\nresources and pipeline must be specified - you cannot specify both.\\n\\n\\nThe Pipeline is only used by the \\\"Pipeline\\\" mode of Composition. It is\\nignored by other modes.\",\n     \"items\": {\n      \"description\": \"A PipelineStep in a Composition Function pipeline.\",\n      \"properties\": {\n       \"credentials\": {\n        \"description\": \"Credentials are optional credentials that the Composition Function needs.\",\n        \"items\": {\n         \"description\": \"FunctionCredentials are optional credentials that a Composition Function\\nneeds to run.\",\n         \"properties\": {\n          \"name\": {\n           \"description\": \"Name of this set of credentials.\",\n           \"type\": \"string\"\n          },\n          \"secretRef\": {\n           \"description\": \"A SecretRef is a reference to a secret containing credentials that should\\nbe supplied to the function.\",\n           \"properties\": {\n            \"name\": {\n             \"description\": \"Name of the secret.\",\n             \"type\": \"string\"\n            },\n            \"namespace\": {\n             \"description\": \"Namespace of the secret.\",\n             \"type\": \"string\"\n            }\n           },\n           \"required\": [\n            \"name\",\n            \"namespace\"\n           ],\n           \"type\": \"object\"\n          },\n          \"source\": {\n           \"description\": \"Source of the function credentials.\",\n           \"enum\": [\n            \"None\",\n            \"Secret\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"name\",\n          \"source\"\n         ],\n         \"type\": \"object\"\n        },\n        \"type\": \"array\",\n        \"x-kubernetes-list-map-keys\": [\n         \"name\"\n        ],\n        \"x-kubernetes-list-type\": \"map\"\n       },\n       \"functionRef\": {\n        \"description\": \"FunctionRef is a reference to the Composition Function this step should\\nexecute.\",\n        \"properties\": {\n         \"name\": {\n          \"description\": \"Name of the referenced Function.\",\n          \"type\": \"string\"\n         }\n        },\n        \"required\": [\n         \"name\"\n        ],\n        \"type\": \"object\"\n       },\n       \"input\": {\n        \"description\": \"Input is an optional, arbitrary Kubernetes resource (i.e. a resource\\nwith an apiVersion and kind) that will be passed to the Composition\\nFunction as the 'input' of its RunFunctionRequest.\",\n        \"format\": \"textarea\",\n        \"type\": \"string\",\n        \"x-kubernetes-embedded-resource\": true\n       },\n       \"step\": {\n        \"description\": \"Step name. Must be unique within its Pipeline.\",\n        \"type\": \"string\"\n       }\n      },\n      \"required\": [\n       \"functionRef\",\n       \"step\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\",\n     \"x-kubernetes-list-map-keys\": [\n      \"step\"\n     ],\n     \"x-kubernetes-list-type\": \"map\"\n    },\n    \"publishConnectionDetailsWithStoreConfigRef\": {\n     \"default\": {\n      \"name\": \"default\"\n     },\n     \"description\": \"PublishConnectionDetailsWithStoreConfig specifies the secret store config\\nwith which the connection details of composite resources dynamically\\nprovisioned using this composition will be published.\\n\\n\\nTHIS IS AN ALPHA FIELD. Do not use it in production. It is not honored\\nunless the relevant Crossplane feature flag is enabled, and may be\\nchanged or removed without notice.\",\n     \"properties\": {\n      \"name\": {\n       \"description\": \"Name of the referenced StoreConfig.\",\n       \"type\": \"string\"\n      }\n     },\n     \"required\": [\n      \"name\"\n     ],\n     \"type\": \"object\"\n    },\n    \"resources\": {\n     \"description\": \"Resources is a list of resource templates that will be used when a\\ncomposite resource referring to this composition is created.\\n\\n\\nResources are only used by the \\\"Resources\\\" mode of Composition. They are\\nignored by other modes.\\n\\n\\nDeprecated: Use Composition Functions instead.\",\n     \"items\": {\n      \"description\": \"ComposedTemplate is used to provide information about how the composed resource\\nshould be processed.\",\n      \"properties\": {\n       \"base\": {\n        \"description\": \"Base is the target resource that the patches will be applied on.\",\n        \"format\": \"textarea\",\n        \"type\": \"string\",\n        \"x-kubernetes-embedded-resource\": true\n       },\n       \"connectionDetails\": {\n        \"description\": \"ConnectionDetails lists the propagation secret keys from this target\\nresource to the composition instance connection secret.\",\n        \"items\": {\n         \"description\": \"ConnectionDetail includes the information about the propagation of the connection\\ninformation from one secret to another.\",\n         \"properties\": {\n          \"fromConnectionSecretKey\": {\n           \"description\": \"FromConnectionSecretKey is the key that will be used to fetch the value\\nfrom the composed resource's connection secret.\",\n           \"type\": \"string\"\n          },\n          \"fromFieldPath\": {\n           \"description\": \"FromFieldPath is the path of the field on the composed resource whose\\nvalue to be used as input. Name must be specified if the type is\\nFromFieldPath.\",\n           \"type\": \"string\"\n          },\n          \"name\": {\n           \"description\": \"Name of the connection secret key that will be propagated to the\\nconnection secret of the composition instance. Leave empty if you'd like\\nto use the same key name.\",\n           \"type\": \"string\"\n          },\n          \"type\": {\n           \"description\": \"Type sets the connection detail fetching behaviour to be used. Each\\nconnection detail type may require its own fields to be set on the\\nConnectionDetail object. If the type is omitted Crossplane will attempt\\nto infer it based on which other fields were specified. If multiple\\nfields are specified the order of precedence is:\\n1. FromValue\\n2. FromConnectionSecretKey\\n3. FromFieldPath\",\n           \"enum\": [\n            \"FromConnectionSecretKey\",\n            \"FromFieldPath\",\n            \"FromValue\"\n           ],\n           \"type\": \"string\"\n          },\n          \"value\": {\n           \"description\": \"Value that will be propagated to the connection secret of the composite\\nresource. May be set to inject a fixed, non-sensitive connection secret\\nvalue, for example a well-known port.\",\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"name\": {\n        \"description\": \"A Name uniquely identifies this entry within its Composition's resources\\narray. Names are optional but *strongly* recommended. When all entries in\\nthe resources array are named entries may added, deleted, and reordered\\nas long as their names do not change. When entries are not named the\\nlength and order of the resources array should be treated as immutable.\\nEither all or no entries must be named.\",\n        \"type\": \"string\"\n       },\n       \"patches\": {\n        \"description\": \"Patches will be applied as overlay to the base resource.\",\n        \"items\": {\n         \"description\": \"Patch objects are applied between composite and composed resources. Their\\nbehaviour depends on the Type selected. The default Type,\\nFromCompositeFieldPath, copies a value from the composite resource to\\nthe composed resource, applying any defined transformers.\",\n         \"properties\": {\n          \"combine\": {\n           \"description\": \"Combine is the patch configuration for a CombineFromComposite,\\nCombineFromEnvironment, CombineToComposite or CombineToEnvironment patch.\",\n           \"properties\": {\n            \"strategy\": {\n             \"description\": \"Strategy defines the strategy to use to combine the input variable values.\\nCurrently only string is supported.\",\n             \"enum\": [\n              \"string\"\n             ],\n             \"type\": \"string\"\n            },\n            \"string\": {\n             \"description\": \"String declares that input variables should be combined into a single\\nstring, using the relevant settings for formatting purposes.\",\n             \"properties\": {\n              \"fmt\": {\n               \"description\": \"Format the input using a Go format string. See\\nhttps://golang.org/pkg/fmt/ for details.\",\n               \"type\": \"string\"\n              }\n             },\n             \"required\": [\n              \"fmt\"\n             ],\n             \"type\": \"object\"\n            },\n            \"variables\": {\n             \"description\": \"Variables are the list of variables whose values will be retrieved and\\ncombined.\",\n             \"items\": {\n              \"description\": \"A CombineVariable defines the source of a value that is combined with\\nothers to form and patch an output value. Currently, this only supports\\nretrieving values from a field path.\",\n              \"properties\": {\n               \"fromFieldPath\": {\n                \"description\": \"FromFieldPath is the path of the field on the source whose value is\\nto be used as input.\",\n                \"type\": \"string\"\n               }\n              },\n              \"required\": [\n               \"fromFieldPath\"\n              ],\n              \"type\": \"object\"\n             },\n             \"minItems\": 1,\n             \"type\": \"array\"\n            }\n           },\n           \"required\": [\n            \"strategy\",\n            \"variables\"\n           ],\n           \"type\": \"object\"\n          },\n          \"fromFieldPath\": {\n           \"description\": \"FromFieldPath is the path of the field on the resource whose value is\\nto be used as input. Required when type is FromCompositeFieldPath,\\nFromEnvironmentFieldPath, ToCompositeFieldPath, ToEnvironmentFieldPath.\",\n           \"type\": \"string\"\n          },\n          \"patchSetName\": {\n           \"description\": \"PatchSetName to include patches from. Required when type is PatchSet.\",\n           \"type\": \"string\"\n          },\n          \"policy\": {\n           \"description\": \"Policy configures the specifics of patching behaviour.\",\n           \"properties\": {\n            \"fromFieldPath\": {\n             \"description\": \"FromFieldPath specifies how to patch from a field path. The default is\\n'Optional', which means the patch will be a no-op if the specified\\nfromFieldPath does not exist. Use 'Required' if the patch should fail if\\nthe specified path does not exist.\",\n             \"enum\": [\n              \"Optional\",\n              \"Required\"\n             ],\n             \"type\": \"string\"\n            },\n            \"mergeOptions\": {\n             \"description\": \"MergeOptions Specifies merge options on a field path.\",\n             \"properties\": {\n              \"appendSlice\": {\n               \"description\": \"Specifies that already existing elements in a merged slice should be preserved\",\n               \"type\": \"boolean\"\n              },\n              \"keepMapValues\": {\n               \"description\": \"Specifies that already existing values in a merged map should be preserved\",\n               \"type\": \"boolean\"\n              }\n             },\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"toFieldPath\": {\n           \"description\": \"ToFieldPath is the path of the field on the resource whose value will\\nbe changed with the result of transforms. Leave empty if you'd like to\\npropagate to the same path as fromFieldPath.\",\n           \"type\": \"string\"\n          },\n          \"transforms\": {\n           \"description\": \"Transforms are the list of functions that are used as a FIFO pipe for the\\ninput to be transformed.\",\n           \"items\": {\n            \"description\": \"Transform is a unit of process whose input is transformed into an output with\\nthe supplied configuration.\",\n            \"properties\": {\n             \"convert\": {\n              \"description\": \"Convert is used to cast the input into the given output type.\",\n              \"properties\": {\n               \"format\": {\n                \"description\": \"The expected input format.\\n\\n\\n* `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).\\nOnly used during `string -\\u003e float64` conversions.\\n* `json` - parses the input as a JSON string.\\nOnly used during `string -\\u003e object` or `string -\\u003e list` conversions.\\n\\n\\nIf this property is null, the default conversion is applied.\",\n                \"enum\": [\n                 \"none\",\n                 \"quantity\",\n                 \"json\"\n                ],\n                \"type\": \"string\"\n               },\n               \"toType\": {\n                \"description\": \"ToType is the type of the output of this transform.\",\n                \"enum\": [\n                 \"string\",\n                 \"int\",\n                 \"int64\",\n                 \"bool\",\n                 \"float64\",\n                 \"object\",\n                 \"array\"\n                ],\n                \"type\": \"string\"\n               }\n              },\n              \"required\": [\n               \"toType\"\n              ],\n              \"type\": \"object\"\n             },\n             \"map\": {\n              \"additionalProperties\": {\n               \"format\": \"textarea\",\n               \"type\": \"string\"\n              },\n              \"description\": \"Map uses the input as a key in the given map and returns the value.\",\n              \"type\": \"object\"\n             },\n             \"match\": {\n              \"description\": \"Match is a more complex version of Map that matches a list of patterns.\",\n              \"properties\": {\n               \"fallbackTo\": {\n                \"default\": \"Value\",\n                \"description\": \"Determines to what value the transform should fallback if no pattern matches.\",\n                \"enum\": [\n                 \"Value\",\n                 \"Input\"\n                ],\n                \"type\": \"string\"\n               },\n               \"fallbackValue\": {\n                \"description\": \"The fallback value that should be returned by the transform if now pattern\\nmatches.\",\n                \"format\": \"textarea\",\n                \"type\": \"string\"\n               },\n               \"patterns\": {\n                \"description\": \"The patterns that should be tested against the input string.\\nPatterns are tested in order. The value of the first match is used as\\nresult of this transform.\",\n                \"items\": {\n                 \"description\": \"MatchTransformPattern is a transform that returns the value that matches a\\npattern.\",\n                 \"properties\": {\n                  \"literal\": {\n                   \"description\": \"Literal exactly matches the input string (case sensitive).\\nIs required if `type` is `literal`.\",\n                   \"type\": \"string\"\n                  },\n                  \"regexp\": {\n                   \"description\": \"Regexp to match against the input string.\\nIs required if `type` is `regexp`.\",\n                   \"type\": \"string\"\n                  },\n                  \"result\": {\n                   \"description\": \"The value that is used as result of the transform if the pattern matches.\",\n                   \"format\": \"textarea\",\n                   \"type\": \"string\"\n                  },\n                  \"type\": {\n                   \"default\": \"literal\",\n                   \"description\": \"Type specifies how the pattern matches the input.\\n\\n\\n* `literal` - the pattern value has to exactly match (case sensitive) the\\ninput string. This is the default.\\n\\n\\n* `regexp` - the pattern treated as a regular expression against\\nwhich the input string is tested. Crossplane will throw an error if the\\nkey is not a valid regexp.\",\n                   \"enum\": [\n                    \"literal\",\n                    \"regexp\"\n                   ],\n                   \"type\": \"string\"\n                  }\n                 },\n                 \"required\": [\n                  \"result\",\n                  \"type\"\n                 ],\n                 \"type\": \"object\"\n                },\n                \"type\": \"array\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"math\": {\n              \"description\": \"Math is used to transform the input via mathematical operations such as\\nmultiplication.\",\n              \"properties\": {\n               \"clampMax\": {\n                \"description\": \"ClampMax makes sure that the value is not bigger than the given value.\",\n                \"format\": \"int64\",\n                \"type\": \"integer\"\n               },\n               \"clampMin\": {\n                \"description\": \"ClampMin makes sure that the value is not smaller than the given value.\",\n                \"format\": \"int64\",\n                \"type\": \"integer\"\n               },\n               \"multiply\": {\n                \"description\": \"Multiply the value.\",\n                \"format\": \"int64\",\n                \"type\": \"integer\"\n               },\n               \"type\": {\n                \"default\": \"Multiply\",\n                \"description\": \"Type of the math transform to be run.\",\n                \"enum\": [\n                 \"Multiply\",\n                 \"ClampMin\",\n                 \"ClampMax\"\n                ],\n                \"type\": \"string\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"string\": {\n              \"description\": \"String is used to transform the input into a string or a different kind\\nof string. Note that the input does not necessarily need to be a string.\",\n              \"properties\": {\n               \"convert\": {\n                \"description\": \"Optional conversion method to be specified.\\n`ToUpper` and `ToLower` change the letter case of the input string.\\n`ToBase64` and `FromBase64` perform a base64 conversion based on the input string.\\n`ToJson` converts any input value into its raw JSON representation.\\n`ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input\\nconverted to JSON.\\n`ToAdler32` generate a addler32 hash based on the input string.\",\n                \"enum\": [\n                 \"ToUpper\",\n                 \"ToLower\",\n                 \"ToBase64\",\n                 \"FromBase64\",\n                 \"ToJson\",\n                 \"ToSha1\",\n                 \"ToSha256\",\n                 \"ToSha512\",\n                 \"ToAdler32\"\n                ],\n                \"type\": \"string\"\n               },\n               \"fmt\": {\n                \"description\": \"Format the input using a Go format string. See\\nhttps://golang.org/pkg/fmt/ for details.\",\n                \"type\": \"string\"\n               },\n               \"join\": {\n                \"description\": \"Join defines parameters to join a slice of values to a string.\",\n                \"properties\": {\n                 \"separator\": {\n                  \"description\": \"Separator defines the character that should separate the values from each\\nother in the joined string.\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"required\": [\n                 \"separator\"\n                ],\n                \"type\": \"object\"\n               },\n               \"regexp\": {\n                \"description\": \"Extract a match from the input using a regular expression.\",\n                \"properties\": {\n                 \"group\": {\n                  \"description\": \"Group number to match. 0 (the default) matches the entire expression.\",\n                  \"type\": \"integer\"\n                 },\n                 \"match\": {\n                  \"description\": \"Match string. May optionally include submatches, aka capture groups.\\nSee https://pkg.go.dev/regexp/ for details.\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"required\": [\n                 \"match\"\n                ],\n                \"type\": \"object\"\n               },\n               \"trim\": {\n                \"description\": \"Trim the prefix or suffix from the input\",\n                \"type\": \"string\"\n               },\n               \"type\": {\n                \"default\": \"Format\",\n                \"description\": \"Type of the string transform to be run.\",\n                \"enum\": [\n                 \"Format\",\n                 \"Convert\",\n                 \"TrimPrefix\",\n                 \"TrimSuffix\",\n                 \"Regexp\",\n                 \"Join\"\n                ],\n                \"type\": \"string\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"type\": {\n              \"description\": \"Type of the transform to be run.\",\n              \"enum\": [\n               \"map\",\n               \"match\",\n               \"math\",\n               \"string\",\n               \"convert\"\n              ],\n              \"type\": \"string\"\n             }\n            },\n            \"required\": [\n             \"type\"\n            ],\n            \"type\": \"object\"\n           },\n           \"type\": \"array\"\n          },\n          \"type\": {\n           \"default\": \"FromCompositeFieldPath\",\n           \"description\": \"Type sets the patching behaviour to be used. Each patch type may require\\nits own fields to be set on the Patch object.\",\n           \"enum\": [\n            \"FromCompositeFieldPath\",\n            \"FromEnvironmentFieldPath\",\n            \"PatchSet\",\n            \"ToCompositeFieldPath\",\n            \"ToEnvironmentFieldPath\",\n            \"CombineFromEnvironment\",\n            \"CombineFromComposite\",\n            \"CombineToComposite\",\n            \"CombineToEnvironment\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"readinessChecks\": {\n        \"default\": [\n         {\n          \"matchCondition\": {\n           \"status\": \"True\",\n           \"type\": \"Ready\"\n          },\n          \"type\": \"MatchCondition\"\n         }\n        ],\n        \"description\": \"ReadinessChecks allows users to define custom readiness checks. All checks\\nhave to return true in order for resource to be considered ready. The\\ndefault readiness check is to have the \\\"Ready\\\" condition to be \\\"True\\\".\",\n        \"items\": {\n         \"description\": \"ReadinessCheck is used to indicate how to tell whether a resource is ready\\nfor consumption.\",\n         \"properties\": {\n          \"fieldPath\": {\n           \"description\": \"FieldPath shows the path of the field whose value will be used.\",\n           \"type\": \"string\"\n          },\n          \"matchCondition\": {\n           \"description\": \"MatchCondition specifies the condition you'd like to match if you're using \\\"MatchCondition\\\" type.\",\n           \"properties\": {\n            \"status\": {\n             \"default\": \"True\",\n             \"description\": \"Status is the status of the condition you'd like to match.\",\n             \"type\": \"string\"\n            },\n            \"type\": {\n             \"default\": \"Ready\",\n             \"description\": \"Type indicates the type of condition you'd like to use.\",\n             \"type\": \"string\"\n            }\n           },\n           \"required\": [\n            \"status\",\n            \"type\"\n           ],\n           \"type\": \"object\"\n          },\n          \"matchInteger\": {\n           \"description\": \"MatchInt is the value you'd like to match if you're using \\\"MatchInt\\\" type.\",\n           \"format\": \"int64\",\n           \"type\": \"integer\"\n          },\n          \"matchString\": {\n           \"description\": \"MatchString is the value you'd like to match if you're using \\\"MatchString\\\" type.\",\n           \"type\": \"string\"\n          },\n          \"type\": {\n           \"description\": \"Type indicates the type of probe you'd like to use.\",\n           \"enum\": [\n            \"MatchString\",\n            \"MatchInteger\",\n            \"NonEmpty\",\n            \"MatchCondition\",\n            \"MatchTrue\",\n            \"MatchFalse\",\n            \"None\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\n          \"type\"\n         ],\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       }\n      },\n      \"required\": [\n       \"base\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"writeConnectionSecretsToNamespace\": {\n     \"description\": \"WriteConnectionSecretsToNamespace specifies the namespace in which the\\nconnection secrets of composite resource dynamically provisioned using\\nthis composition will be created.\\nThis field is planned to be replaced in a future release in favor of\\nPublishConnectionDetailsWithStoreConfigRef. Currently, both could be\\nset independently and connection details would be published to both\\nwithout affecting each other as long as related fields at MR level\\nspecified.\",\n     \"type\": \"string\"\n    }\n   },\n   \"required\": [\n    \"compositeTypeRef\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Composition\",\n \"type\": \"object\"\n}",
   "version": "apiextensions.crossplane.io/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Composition",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": false,
   "published": false,
   "source_uri": "git://github.com/crossplane/crossplane/master/cluster/crds"
  },
  "model": {
   "category": {
    "name": "Orchestration \u0026 Management"
   },
   "displayName": "Crossplane",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "primaryColor": "#ffcd3c",
    "secondaryColor": "#35d0ba",
    "shape": "circle",
    "source_uri": "git://github.com/crossplane/crossplane/master/cluster/crds",
    "styleOverrides": "",
    "svgColor": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 900 900\" height=\"20\" width=\"20\"\u003e\u003cdefs xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cstyle xmlns=\"http://www.w3.org/2000/svg\"\u003e.cls-1{fill:none;}.cls-2{clip-path:url(#clip-path);}.cls-3{fill:#f7d186;}.cls-4{clip-path:url(#clip-path-2);}.cls-5{isolation:isolate;}.cls-6{clip-path:url(#clip-path-3);}.cls-7{clip-path:url(#clip-path-4);}.cls-8{clip-path:url(#clip-path-5);}.cls-9{fill:#ffcd3c;}.cls-10{clip-path:url(#clip-path-7);}.cls-11{clip-path:url(#clip-path-8);}.cls-12{fill:#f3807b;}.cls-13{clip-path:url(#clip-path-11);}.cls-14{clip-path:url(#clip-path-12);}.cls-15{fill:#35d0ba;}.cls-16{clip-path:url(#clip-path-14);}.cls-17{fill:#d8ae64;}\u003c/style\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path\"\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" d=\"M447.73,309.78a46.75981,46.75981,0,0,0-46.76,46.76V796.58a46.76,46.76,0,0,0,93.52,0V356.55a46.75555,46.75555,0,0,0-46.76-46.77\"\u003e\u003c/path\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-2\"\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" d=\"M263.62,234.54q-.195,4.305-.2,8.68c0,3.19.07,6.35.24,9.5-.07,1.55-.24,3.08-.24,4.66V563.56c0,58.55,47.91,106.46,106.46,106.46H530.1c58.56,0,106.46-47.91,106.46-106.46V257.37c0-1.78-.18-3.51-.28-5.26.14-2.95.22-5.92.22-8.89,0-2.92-.07-5.8-.2-8.68C631.8,135.53,550.1,56.66,449.98,56.66,349.85,56.66,268.14,135.53,263.62,234.54Z\"\u003e\u003c/path\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-3\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"142.32001\" y=\"97.05\" width=\"606.10999\" height=\"606.10997\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-4\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"121.45167\" y=\"305.6912\" width=\"654.37372\" height=\"195.51814\" transform=\"translate(-153.87924 435.4032) rotate(-45)\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-5\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"260.91\" y=\"50.92997\" width=\"382.11002\" height=\"619.28997\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-7\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"-22.38\" y=\"-67.66\" width=\"639.04998\" height=\"639.05002\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-8\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"-32.95044\" y=\"128.3843\" width=\"654.3837\" height=\"241.17767\" transform=\"translate(-89.86928 280.98264) rotate(-45)\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-11\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"280.67001\" y=\"235.39999\" width=\"606.11002\" height=\"606.11002\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-12\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" x=\"258.77901\" y=\"443.79101\" width=\"654.39197\" height=\"193.81798\" transform=\"translate(-210.70418 572.72293) rotate(-45.00062)\"\u003e\u003c/rect\u003e\u003c/clipPath\u003e\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip-path-14\"\u003e\u003cpolygon xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" points=\"412.96 670.01 494.5 752.9 494.5 670.01 412.96 670.01\"\u003e\u003c/polygon\u003e\u003c/clipPath\u003e\u003c/defs\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-2\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-3\" x=\"368.03\" y=\"276.84\" width=\"159.41\" height=\"599.44003\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-4\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-5\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-6\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-7\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-8\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-9\" x=\"115.65\" y=\"70.36997\" width=\"665.66\" height=\"665.65997\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-4\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-5\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-10\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-11\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-8\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-12\" x=\"-55.32999\" y=\"-100.60001\" width=\"699.14\" height=\"699.14004\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-4\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-5\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-13\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-14\"\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-8\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-15\" x=\"253.14\" y=\"207.87\" width=\"665.65999\" height=\"665.65997\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003cg xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-16\"\u003e\u003crect xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-17\" x=\"380.69\" y=\"636.90997\" width=\"147.02997\" height=\"147.66998\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003c/svg\u003e",
    "svgComplete": "",
    "svgWhite": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 900 900\" height=\"20\" width=\"20\"\u003e\u003cdefs xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cstyle xmlns=\"http://www.w3.org/2000/svg\"\u003e.cls-1{fill:#fff;}\u003c/style\u003e\u003c/defs\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" d=\"M471.22288,669.71789V790.45608c0,16.82419-10.9559,30.52608-24.40691,30.52608-13.46492,0-24.40692-13.68794-24.40692-30.52608V669.71789h48.81383M493.58075,647.36H400.03724V790.45608c0,29.21583,20.93612,52.88395,46.76478,52.88395,25.84261,0,46.76477-23.66812,46.76477-52.88395V647.36Z\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" d=\"M588.56,154.07853a163.28343,163.28343,0,0,1,25.82871,81.41674c.11153,2.53688.18121,5.12948.18121,7.70818,0,2.53688-.06968,5.17131-.19517,7.8615l-.05572,1.10116.05572,1.10116c.04186.64119.08363,1.26844.12549,1.90961.05573.8642.12549,1.68661.12549,2.17446v87.68922L323.736,635.93012a85.29961,85.29961,0,0,1-40.19959-72.39831V459.102L588.56,154.07853m2.2999-32.04539L262.50273,450.40425V563.5458c0,43.9631,27.01347,81.91853,65.24768,98.10154L635.64534,353.75239V257.36533c0-1.78417-.18122-3.51259-.2788-5.26888.13936-2.955.223-5.91007.223-8.893q0-4.36982-.19517-8.67a185.61592,185.61592,0,0,0-44.53447-112.50037Z\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" d=\"M449.04619,56.66c-100.12264,0-181.83209,78.86594-186.3483,177.87349q-.18816,4.3071-.19516,8.67c0,3.192.06967,6.3561.237,9.50629-.06968,1.56115-.237,3.0805-.237,4.65557V450.32058L590.832,121.99132A186.13267,186.13267,0,0,0,449.04619,56.66Z\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"cls-1\" d=\"M368.95361,669.99664H529.1805c58.55706,0,106.46484-47.90777,106.46484-106.45088V353.04148L327.26255,661.42427A105.43227,105.43227,0,0,0,368.95361,669.99664Z\"\u003e\u003c/path\u003e\u003c/svg\u003e"
   },
   "model": {
    "version": "v1.17.0-rc.1"
   },
   "name": "crossplane",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "github",
    "name": "Github",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "ignored",
   "subCategory": "Scheduling \u0026 Orchestration",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "ignored",
  "styles": {
   "primaryColor": "#ffcd3c",
   "secondaryColor": "#35d0ba",
   "shape": "circle",
   "svgColor": "\u003csvg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 900 900\"\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:none;}.cls-2{clip-path:url(#clip-path);}.cls-3{fill:#f7d186;}.cls-4{clip-path:url(#clip-path-2);}.cls-5{isolation:isolate;}.cls-6{clip-path:url(#clip-path-3);}.cls-7{clip-path:url(#clip-path-4);}.cls-8{clip-path:url(#clip-path-5);}.cls-9{fill:#ffcd3c;}.cls-10{clip-path:url(#clip-path-7);}.cls-11{clip-path:url(#clip-path-8);}.cls-12{fill:#f3807b;}.cls-13{clip-path:url(#clip-path-11);}.cls-14{clip-path:url(#clip-path-12);}.cls-15{fill:#35d0ba;}.cls-16{clip-path:url(#clip-path-14);}.cls-17{fill:#d8ae64;}\u003c/style\u003e\u003cclipPath id=\"clip-path\"\u003e\u003cpath class=\"cls-1\" d=\"M447.73,309.78a46.75981,46.75981,0,0,0-46.76,46.76V796.58a46.76,46.76,0,0,0,93.52,0V356.55a46.75555,46.75555,0,0,0-46.76-46.77\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-2\"\u003e\u003cpath class=\"cls-1\" d=\"M263.62,234.54q-.195,4.305-.2,8.68c0,3.19.07,6.35.24,9.5-.07,1.55-.24,3.08-.24,4.66V563.56c0,58.55,47.91,106.46,106.46,106.46H530.1c58.56,0,106.46-47.91,106.46-106.46V257.37c0-1.78-.18-3.51-.28-5.26.14-2.95.22-5.92.22-8.89,0-2.92-.07-5.8-.2-8.68C631.8,135.53,550.1,56.66,449.98,56.66,349.85,56.66,268.14,135.53,263.62,234.54Z\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-3\"\u003e\u003crect class=\"cls-1\" x=\"142.32001\" y=\"97.05\" width=\"606.10999\" height=\"606.10997\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-4\"\u003e\u003crect class=\"cls-1\" x=\"121.45167\" y=\"305.6912\" width=\"654.37372\" height=\"195.51814\" transform=\"translate(-153.87924 435.4032) rotate(-45)\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-5\"\u003e\u003crect class=\"cls-1\" x=\"260.91\" y=\"50.92997\" width=\"382.11002\" height=\"619.28997\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-7\"\u003e\u003crect class=\"cls-1\" x=\"-22.38\" y=\"-67.66\" width=\"639.04998\" height=\"639.05002\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-8\"\u003e\u003crect class=\"cls-1\" x=\"-32.95044\" y=\"128.3843\" width=\"654.3837\" height=\"241.17767\" transform=\"translate(-89.86928 280.98264) rotate(-45)\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-11\"\u003e\u003crect class=\"cls-1\" x=\"280.67001\" y=\"235.39999\" width=\"606.11002\" height=\"606.11002\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-12\"\u003e\u003crect class=\"cls-1\" x=\"258.77901\" y=\"443.79101\" width=\"654.39197\" height=\"193.81798\" transform=\"translate(-210.70418 572.72293) rotate(-45.00062)\"/\u003e\u003c/clipPath\u003e\u003cclipPath id=\"clip-path-14\"\u003e\u003cpolygon class=\"cls-1\" points=\"412.96 670.01 494.5 752.9 494.5 670.01 412.96 670.01\"/\u003e\u003c/clipPath\u003e\u003c/defs\u003e\u003cg class=\"cls-2\"\u003e\u003crect class=\"cls-3\" x=\"368.03\" y=\"276.84\" width=\"159.41\" height=\"599.44003\"/\u003e\u003c/g\u003e\u003cg class=\"cls-4\"\u003e\u003cg class=\"cls-5\"\u003e\u003cg class=\"cls-6\"\u003e\u003cg class=\"cls-7\"\u003e\u003cg class=\"cls-8\"\u003e\u003crect class=\"cls-9\" x=\"115.65\" y=\"70.36997\" width=\"665.66\" height=\"665.65997\"/\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003cg class=\"cls-4\"\u003e\u003cg class=\"cls-5\"\u003e\u003cg class=\"cls-10\"\u003e\u003cg class=\"cls-11\"\u003e\u003cg class=\"cls-8\"\u003e\u003crect class=\"cls-12\" x=\"-55.32999\" y=\"-100.60001\" width=\"699.14\" height=\"699.14004\"/\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003cg class=\"cls-4\"\u003e\u003cg class=\"cls-5\"\u003e\u003cg class=\"cls-13\"\u003e\u003cg class=\"cls-14\"\u003e\u003cg class=\"cls-8\"\u003e\u003crect class=\"cls-15\" x=\"253.14\" y=\"207.87\" width=\"665.65999\" height=\"665.65997\"/\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003cg class=\"cls-16\"\u003e\u003crect class=\"cls-17\" x=\"380.69\" y=\"636.90997\" width=\"147.02997\" height=\"147.66998\"/\u003e\u003c/g\u003e\u003c/svg\u003e",
   "svgWhite": "\u003csvg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 900 900\"\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:#fff;}\u003c/style\u003e\u003c/defs\u003e\u003cpath class=\"cls-1\" d=\"M471.22288,669.71789V790.45608c0,16.82419-10.9559,30.52608-24.40691,30.52608-13.46492,0-24.40692-13.68794-24.40692-30.52608V669.71789h48.81383M493.58075,647.36H400.03724V790.45608c0,29.21583,20.93612,52.88395,46.76478,52.88395,25.84261,0,46.76477-23.66812,46.76477-52.88395V647.36Z\"/\u003e\u003cpath class=\"cls-1\" d=\"M588.56,154.07853a163.28343,163.28343,0,0,1,25.82871,81.41674c.11153,2.53688.18121,5.12948.18121,7.70818,0,2.53688-.06968,5.17131-.19517,7.8615l-.05572,1.10116.05572,1.10116c.04186.64119.08363,1.26844.12549,1.90961.05573.8642.12549,1.68661.12549,2.17446v87.68922L323.736,635.93012a85.29961,85.29961,0,0,1-40.19959-72.39831V459.102L588.56,154.07853m2.2999-32.04539L262.50273,450.40425V563.5458c0,43.9631,27.01347,81.91853,65.24768,98.10154L635.64534,353.75239V257.36533c0-1.78417-.18122-3.51259-.2788-5.26888.13936-2.955.223-5.91007.223-8.893q0-4.36982-.19517-8.67a185.61592,185.61592,0,0,0-44.53447-112.50037Z\"/\u003e\u003cpath class=\"cls-1\" d=\"M449.04619,56.66c-100.12264,0-181.83209,78.86594-186.3483,177.87349q-.18816,4.3071-.19516,8.67c0,3.192.06967,6.3561.237,9.50629-.06968,1.56115-.237,3.0805-.237,4.65557V450.32058L590.832,121.99132A186.13267,186.13267,0,0,0,449.04619,56.66Z\"/\u003e\u003cpath class=\"cls-1\" d=\"M368.95361,669.99664H529.1805c58.55706,0,106.46484-47.90777,106.46484-106.45088V353.04148L327.26255,661.42427A105.43227,105.43227,0,0,0,368.95361,669.99664Z\"/\u003e\u003c/svg\u003e"
  },
  "version": "v1.0.0"
 }