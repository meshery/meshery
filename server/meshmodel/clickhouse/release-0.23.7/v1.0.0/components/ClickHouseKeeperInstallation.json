{
  "capabilities": null,
  "component": {
   "kind": "ClickHouseKeeperInstallation",
   "schema": "{\n \"description\": \"define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one ClickHouse Keeper cluster\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"KeeperSpec defines the desired state of a Keeper cluster\",\n   \"properties\": {\n    \"configuration\": {\n     \"description\": \"allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource\",\n     \"properties\": {\n      \"clusters\": {\n       \"description\": \"describes ClickHouseKeeper clusters layout and allows change settings on cluster-level and replica-level\\n\",\n       \"items\": {\n        \"properties\": {\n         \"layout\": {\n          \"description\": \"describe current cluster layout, how many replicas\\n\",\n          \"properties\": {\n           \"replicasCount\": {\n            \"description\": \"how many replicas in ClickHouseKeeper cluster\",\n            \"type\": \"integer\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"name\": {\n          \"description\": \"cluster name, used to identify set of ClickHouseKeeper servers and wide used during generate names of related Kubernetes resources\",\n          \"maxLength\": 15,\n          \"minLength\": 1,\n          \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"settings\": {\n       \"description\": \"allows configure multiple aspects and behavior for `clickhouse-keeper` instance\",\n       \"format\": \"textarea\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"namespaceDomainPattern\": {\n     \"description\": \"Custom domain pattern which will be used for DNS names of `Service` or `Pod`.\\nTypical use scenario - custom cluster domain in Kubernetes cluster\\nExample: %s.svc.my.test\\n\",\n     \"type\": \"string\"\n    },\n    \"replicas\": {\n     \"description\": \"Replicas is the expected size of the keeper cluster.\\nThe valid range of size is from 1 to 7.\\n\",\n     \"format\": \"int32\",\n     \"maximum\": 7,\n     \"minimum\": 1,\n     \"type\": \"integer\"\n    },\n    \"templates\": {\n     \"description\": \"allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it\",\n     \"properties\": {\n      \"podTemplates\": {\n       \"description\": \"podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone\\nMore information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates\\n\",\n       \"items\": {\n        \"properties\": {\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to Pod\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`\",\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"serviceTemplates\": {\n       \"description\": \"allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level\\n\",\n       \"items\": {\n        \"properties\": {\n         \"metadata\": {\n          \"description\": \"allows pass standard object's metadata from template to Service\\nCould be use for define specificly for Cloud Provider metadata which impact to behavior of service\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside\\nchi-level `chi.spec.defaults.templates.serviceTemplate`\\ncluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`\\n\",\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"describe behavior of generated Service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"volumeClaimTemplates\": {\n       \"description\": \"allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else\",\n       \"items\": {\n        \"properties\": {\n         \"metadata\": {\n          \"description\": \"allows to pass standard object's metadata from template to PVC\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"template name, could use to link inside\\ntop-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,\\ncluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`\\n\",\n          \"type\": \"string\"\n         },\n         \"spec\": {\n          \"description\": \"allows define all aspects of `PVC` resource\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims\\n\",\n          \"format\": \"textarea\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"spec\"\n ],\n \"title\": \"Click House Keeper Installation\",\n \"type\": \"object\"\n}",
   "version": "clickhouse-keeper.altinity.com/v1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Click House Keeper Installation",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "published": false,
   "source_uri": "git://github.com/Altinity/clickhouse-operator/master/deploy/helm/clickhouse-operator/crds"
  },
  "model": {
   "category": {
    "name": "Database"
   },
   "displayName": "ClickHouse",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "isAnnotation": false,
    "primaryColor": "#ffcc00",
    "secondaryColor": "#00D3A9",
    "shape": "circle",
    "source_uri": "git://github.com/Altinity/clickhouse-operator/master/deploy/helm/clickhouse-operator/crds",
    "styleOverrides": "",
    "svgColor": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 0 9 8\" width=\"20\"\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"m0 7h1v1h-1z\" fill=\"#f00\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"m0 0h1v7h-1zm2 0h1v8h-1zm2 0h1v8h-1zm2 0h1v8h-1zm2 3.25h1v1.5h-1z\" fill=\"#fc0\"\u003e\u003c/path\u003e\u003c/svg\u003e",
    "svgComplete": "",
    "svgWhite": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 2500 2222\" style=\"enable-background:new 0 0 2500 2222;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{opacity:0.8;fill:#FFFFFF;}\n\u0026#x9;.st1{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M0.1,1944.2h277.8V2222H0.1V1944.2z\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st1\" d=\"M0.1,0h277.8v1944.2H0.1V0z M555.6,0h277.8v2222H555.6V0z M1111.1,0h277.8v2222h-277.8V0z M1666.6,0h277.8v2222\u0026#xA;\u0026#x9;h-277.8V0z M2222.1,902.7h277.8v416.6h-277.8V902.7z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"
   },
   "model": {
    "version": "release-0.23.7"
   },
   "name": "clickhouse",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "github",
    "name": "Github",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "enabled",
   "subCategory": "App Definition and Development",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#ffcc00",
   "secondaryColor": "#00D3A9",
   "shape": "circle",
   "svgColor": "\u003csvg height=\"2222\" viewBox=\"0 0 9 8\" width=\"2500\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"m0 7h1v1h-1z\" fill=\"#f00\"/\u003e\u003cpath d=\"m0 0h1v7h-1zm2 0h1v8h-1zm2 0h1v8h-1zm2 0h1v8h-1zm2 3.25h1v1.5h-1z\" fill=\"#fc0\"/\u003e\u003c/svg\u003e",
   "svgWhite": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 2500 2222\" style=\"enable-background:new 0 0 2500 2222;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n\t.st0{opacity:0.8;fill:#FFFFFF;}\n\t.st1{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M0.1,1944.2h277.8V2222H0.1V1944.2z\"/\u003e\n\u003cpath class=\"st1\" d=\"M0.1,0h277.8v1944.2H0.1V0z M555.6,0h277.8v2222H555.6V0z M1111.1,0h277.8v2222h-277.8V0z M1666.6,0h277.8v2222\n\th-277.8V0z M2222.1,902.7h277.8v416.6h-277.8V902.7z\"/\u003e\n\u003c/svg\u003e"
  },
  "version": "v1.0.0"
 }