{
  "id": "00000000-0000-0000-0000-000000000000",
  "schemaVersion": "core.meshery.io/v1beta1",
  "version": "v1.0.0",
  "displayName": "Mesh Health Check",
  "description": "",
  "format": "JSON",
  "model": {
   "id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "core.meshery.io/v1beta1",
   "version": "v1.0.0",
   "name": "kong-mesh",
   "displayName": "Kong Mesh",
   "description": "",
   "status": "enabled",
   "hostID": "00000000-0000-0000-0000-000000000000",
   "registrant": {
    "hostname": "artifacthub"
   },
   "category": {
    "name": "Cloud Native Network",
    "metadata": null
   },
   "subCategory": "Service Mesh",
   "metadata": {
    "isAnnotation": false,
    "subCategory": "Service Mesh",
    "svgColor": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e",
    "svgComplete": "",
    "svgWhite": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"Layer_1\" xmlns:_xmlns=\"xmlns\" _xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\" height=\"20\" width=\"20\"\u003e\n\u003cstyle xmlns=\"http://www.w3.org/2000/svg\" type=\"text/css\"\u003e\n\u0026#x9;.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\u0026#xA;\u0026#x9;L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\u0026#xA;\u0026#x9;h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e"
   },
   "model": {
    "version": "2.6.1"
   },
   "components": null,
   "relationships": null
  },
  "metadata": {
   "capabilities": "",
   "defaultData": "",
   "genealogy": "",
   "isAnnotation": false,
   "isNamespaced": true,
   "primaryColor": "#003474",
   "secondaryColor": "",
   "shape": "circle",
   "shapePolygonPoints": "",
   "status": "enabled",
   "styleOverrides": "",
   "styles": "",
   "subCategory": "",
   "svgColor": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e \u003cstyle type=\"text/css\"\u003e .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;} \u003c/style\u003e \u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2 L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32 h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e \u003c/svg\u003e",
   "svgComplete": "",
   "svgWhite": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e \u003cstyle type=\"text/css\"\u003e .st0{fill:#FFFFFF;} \u003c/style\u003e \u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2 L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32 h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e \u003c/svg\u003e"
  },
  "component": {
   "kind": "MeshHealthCheck",
   "version": "kuma.io/v1alpha1",
   "schema": "{\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Spec is the specification of the Kuma MeshHealthCheck resource.\",\n   \"properties\": {\n    \"targetRef\": {\n     \"description\": \"TargetRef is a reference to the resource the policy takes an effect on.\\nThe resource could be either a real store object or virtual resource\\ndefined inplace.\",\n     \"properties\": {\n      \"kind\": {\n       \"description\": \"Kind of the referenced resource\",\n       \"enum\": [\n        \"Mesh\",\n        \"MeshSubset\",\n        \"MeshGateway\",\n        \"MeshService\",\n        \"MeshServiceSubset\",\n        \"MeshHTTPRoute\"\n       ],\n       \"type\": \"string\"\n      },\n      \"mesh\": {\n       \"description\": \"Mesh is reserved for future use to identify cross mesh resources.\",\n       \"type\": \"string\"\n      },\n      \"name\": {\n       \"description\": \"Name of the referenced resource. Can only be used with kinds: `MeshService`,\\n`MeshServiceSubset` and `MeshGatewayRoute`\",\n       \"type\": \"string\"\n      },\n      \"proxyTypes\": {\n       \"description\": \"ProxyTypes specifies the data plane types that are subject to the policy. When not specified,\\nall data plane types are targeted by the policy.\",\n       \"items\": {\n        \"enum\": [\n         \"Sidecar\",\n         \"Gateway\"\n        ],\n        \"type\": \"string\"\n       },\n       \"minItems\": 1,\n       \"type\": \"array\"\n      },\n      \"tags\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Tags used to select a subset of proxies by tags. Can only be used with kinds\\n`MeshSubset` and `MeshServiceSubset`\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"to\": {\n     \"description\": \"To list makes a match between the consumed services and corresponding configurations\",\n     \"items\": {\n      \"properties\": {\n       \"default\": {\n        \"description\": \"Default is a configuration specific to the group of destinations referenced in\\n'targetRef'\",\n        \"properties\": {\n         \"alwaysLogHealthCheckFailures\": {\n          \"description\": \"If set to true, health check failure events will always be logged. If set\\nto false, only the initial health check failure event will be logged. The\\ndefault value is false.\",\n          \"type\": \"boolean\"\n         },\n         \"eventLogPath\": {\n          \"description\": \"Specifies the path to the file where Envoy can log health check events.\\nIf empty, no event log will be written.\",\n          \"type\": \"string\"\n         },\n         \"failTrafficOnPanic\": {\n          \"description\": \"If set to true, Envoy will not consider any hosts when the cluster is in\\n'panic mode'. Instead, the cluster will fail all requests as if all hosts\\nare unhealthy. This can help avoid potentially overwhelming a failing\\nservice.\",\n          \"type\": \"boolean\"\n         },\n         \"grpc\": {\n          \"description\": \"GrpcHealthCheck defines gRPC configuration which will instruct the service\\nthe health check will be made for is a gRPC service.\",\n          \"properties\": {\n           \"authority\": {\n            \"description\": \"The value of the :authority header in the gRPC health check request,\\nby default name of the cluster this health check is associated with\",\n            \"type\": \"string\"\n           },\n           \"disabled\": {\n            \"description\": \"If true the GrpcHealthCheck is disabled\",\n            \"type\": \"boolean\"\n           },\n           \"serviceName\": {\n            \"description\": \"Service name parameter which will be sent to gRPC service\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"healthyPanicThreshold\": {\n          \"anyOf\": [\n           {\n            \"type\": \"integer\"\n           },\n           {\n            \"type\": \"string\"\n           }\n          ],\n          \"description\": \"Allows to configure panic threshold for Envoy cluster. If not specified,\\nthe default is 50%. To disable panic mode, set to 0%.\\nEither int or decimal represented as string.\",\n          \"x-kubernetes-int-or-string\": true\n         },\n         \"healthyThreshold\": {\n          \"default\": 1,\n          \"description\": \"Number of consecutive healthy checks before considering a host healthy.\",\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n         },\n         \"http\": {\n          \"description\": \"HttpHealthCheck defines HTTP configuration which will instruct the service\\nthe health check will be made for is an HTTP service.\",\n          \"properties\": {\n           \"disabled\": {\n            \"description\": \"If true the HttpHealthCheck is disabled\",\n            \"type\": \"boolean\"\n           },\n           \"expectedStatuses\": {\n            \"description\": \"List of HTTP response statuses which are considered healthy\",\n            \"items\": {\n             \"format\": \"int32\",\n             \"type\": \"integer\"\n            },\n            \"type\": \"array\"\n           },\n           \"path\": {\n            \"default\": \"/\",\n            \"description\": \"The HTTP path which will be requested during the health check\\n(ie. /health)\",\n            \"type\": \"string\"\n           },\n           \"requestHeadersToAdd\": {\n            \"description\": \"The list of HTTP headers which should be added to each health check\\nrequest\",\n            \"properties\": {\n             \"add\": {\n              \"items\": {\n               \"properties\": {\n                \"name\": {\n                 \"maxLength\": 256,\n                 \"minLength\": 1,\n                 \"pattern\": \"^[a-z0-9!#$%\\u0026'*+\\\\-.^_\\\\x60|~]+$\",\n                 \"type\": \"string\"\n                },\n                \"value\": {\n                 \"type\": \"string\"\n                }\n               },\n               \"required\": [\n                \"name\",\n                \"value\"\n               ],\n               \"type\": \"object\"\n              },\n              \"maxItems\": 16,\n              \"type\": \"array\",\n              \"x-kubernetes-list-map-keys\": [\n               \"name\"\n              ],\n              \"x-kubernetes-list-type\": \"map\"\n             },\n             \"set\": {\n              \"items\": {\n               \"properties\": {\n                \"name\": {\n                 \"maxLength\": 256,\n                 \"minLength\": 1,\n                 \"pattern\": \"^[a-z0-9!#$%\\u0026'*+\\\\-.^_\\\\x60|~]+$\",\n                 \"type\": \"string\"\n                },\n                \"value\": {\n                 \"type\": \"string\"\n                }\n               },\n               \"required\": [\n                \"name\",\n                \"value\"\n               ],\n               \"type\": \"object\"\n              },\n              \"maxItems\": 16,\n              \"type\": \"array\",\n              \"x-kubernetes-list-map-keys\": [\n               \"name\"\n              ],\n              \"x-kubernetes-list-type\": \"map\"\n             }\n            },\n            \"type\": \"object\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"initialJitter\": {\n          \"description\": \"If specified, Envoy will start health checking after a random time in\\nms between 0 and initialJitter. This only applies to the first health\\ncheck.\",\n          \"type\": \"string\"\n         },\n         \"interval\": {\n          \"default\": \"1m\",\n          \"description\": \"Interval between consecutive health checks.\",\n          \"type\": \"string\"\n         },\n         \"intervalJitter\": {\n          \"description\": \"If specified, during every interval Envoy will add IntervalJitter to the\\nwait time.\",\n          \"type\": \"string\"\n         },\n         \"intervalJitterPercent\": {\n          \"description\": \"If specified, during every interval Envoy will add IntervalJitter *\\nIntervalJitterPercent / 100 to the wait time. If IntervalJitter and\\nIntervalJitterPercent are both set, both of them will be used to\\nincrease the wait time.\",\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n         },\n         \"noTrafficInterval\": {\n          \"description\": \"The \\\"no traffic interval\\\" is a special health check interval that is used\\nwhen a cluster has never had traffic routed to it. This lower interval\\nallows cluster information to be kept up to date, without sending a\\npotentially large amount of active health checking traffic for no reason.\\nOnce a cluster has been used for traffic routing, Envoy will shift back\\nto using the standard health check interval that is defined. Note that\\nthis interval takes precedence over any other. The default value for \\\"no\\ntraffic interval\\\" is 60 seconds.\",\n          \"type\": \"string\"\n         },\n         \"reuseConnection\": {\n          \"description\": \"Reuse health check connection between health checks. Default is true.\",\n          \"type\": \"boolean\"\n         },\n         \"tcp\": {\n          \"description\": \"TcpHealthCheck defines configuration for specifying bytes to send and\\nexpected response during the health check\",\n          \"properties\": {\n           \"disabled\": {\n            \"description\": \"If true the TcpHealthCheck is disabled\",\n            \"type\": \"boolean\"\n           },\n           \"receive\": {\n            \"description\": \"List of Base64 encoded blocks of strings expected as a response. When checking the response,\\n\\\"fuzzy\\\" matching is performed such that each block must be found, and\\nin the order specified, but not necessarily contiguous.\\nIf not provided or empty, checks will be performed as \\\"connect only\\\" and be marked as successful when TCP connection is successfully established.\",\n            \"items\": {\n             \"type\": \"string\"\n            },\n            \"type\": \"array\"\n           },\n           \"send\": {\n            \"description\": \"Base64 encoded content of the message which will be sent during the health check to the target\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"timeout\": {\n          \"default\": \"15s\",\n          \"description\": \"Maximum time to wait for a health check response.\",\n          \"type\": \"string\"\n         },\n         \"unhealthyThreshold\": {\n          \"default\": 5,\n          \"description\": \"Number of consecutive unhealthy checks before considering a host\\nunhealthy.\",\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"targetRef\": {\n        \"description\": \"TargetRef is a reference to the resource that represents a group of\\ndestinations.\",\n        \"properties\": {\n         \"kind\": {\n          \"description\": \"Kind of the referenced resource\",\n          \"enum\": [\n           \"Mesh\",\n           \"MeshSubset\",\n           \"MeshGateway\",\n           \"MeshService\",\n           \"MeshServiceSubset\",\n           \"MeshHTTPRoute\"\n          ],\n          \"type\": \"string\"\n         },\n         \"mesh\": {\n          \"description\": \"Mesh is reserved for future use to identify cross mesh resources.\",\n          \"type\": \"string\"\n         },\n         \"name\": {\n          \"description\": \"Name of the referenced resource. Can only be used with kinds: `MeshService`,\\n`MeshServiceSubset` and `MeshGatewayRoute`\",\n          \"type\": \"string\"\n         },\n         \"proxyTypes\": {\n          \"description\": \"ProxyTypes specifies the data plane types that are subject to the policy. When not specified,\\nall data plane types are targeted by the policy.\",\n          \"items\": {\n           \"enum\": [\n            \"Sidecar\",\n            \"Gateway\"\n           ],\n           \"type\": \"string\"\n          },\n          \"minItems\": 1,\n          \"type\": \"array\"\n         },\n         \"tags\": {\n          \"additionalProperties\": {\n           \"type\": \"string\"\n          },\n          \"description\": \"Tags used to select a subset of proxies by tags. Can only be used with kinds\\n`MeshSubset` and `MeshServiceSubset`\",\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"required\": [\n       \"targetRef\"\n      ],\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    }\n   },\n   \"required\": [\n    \"targetRef\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Mesh Health Check\",\n \"type\": \"object\"\n}"
  }
 }