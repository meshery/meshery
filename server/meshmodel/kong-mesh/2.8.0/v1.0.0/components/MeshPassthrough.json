{
  "capabilities": null,
  "component": {
   "kind": "MeshPassthrough",
   "schema": "{\n \"properties\": {\n  \"spec\": {\n   \"description\": \"Spec is the specification of the Kuma MeshPassthrough resource.\",\n   \"properties\": {\n    \"default\": {\n     \"description\": \"MeshPassthrough configuration.\",\n     \"properties\": {\n      \"appendMatch\": {\n       \"description\": \"AppendMatch is a list of destinations that should be allowed through the sidecar.\",\n       \"items\": {\n        \"properties\": {\n         \"port\": {\n          \"description\": \"Port defines the port to which a user makes a request.\",\n          \"type\": \"integer\"\n         },\n         \"protocol\": {\n          \"default\": \"tcp\",\n          \"description\": \"Protocol defines the communication protocol. Possible values: `tcp`, `tls`, `grpc`, `http`, `http2`.\",\n          \"enum\": [\n           \"tcp\",\n           \"tls\",\n           \"grpc\",\n           \"http\",\n           \"http2\"\n          ],\n          \"type\": \"string\"\n         },\n         \"type\": {\n          \"description\": \"Type of the match, one of `Domain`, `IP` or `CIDR` is available.\",\n          \"enum\": [\n           \"Domain\",\n           \"IP\",\n           \"CIDR\"\n          ],\n          \"type\": \"string\"\n         },\n         \"value\": {\n          \"description\": \"Value for the specified Type.\",\n          \"type\": \"string\"\n         }\n        },\n        \"required\": [\n         \"port\"\n        ],\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"passthroughMode\": {\n       \"default\": \"None\",\n       \"description\": \"Defines the passthrough behavior. Possible values: `All`, `None`, `Matched`\\nWhen `All` or `None` `appendMatch` has no effect.\",\n       \"enum\": [\n        \"All\",\n        \"Matched\",\n        \"None\"\n       ],\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"targetRef\": {\n     \"description\": \"TargetRef is a reference to the resource the policy takes an effect on.\\nThe resource could be either a real store object or virtual resource\\ndefined in-place.\",\n     \"properties\": {\n      \"kind\": {\n       \"description\": \"Kind of the referenced resource\",\n       \"enum\": [\n        \"Mesh\",\n        \"MeshSubset\",\n        \"MeshGateway\",\n        \"MeshService\",\n        \"MeshExternalService\",\n        \"MeshServiceSubset\",\n        \"MeshHTTPRoute\"\n       ],\n       \"type\": \"string\"\n      },\n      \"labels\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Labels are used to select group of MeshServices that match labels. Either Labels or\\nName and Namespace can be used.\",\n       \"type\": \"object\"\n      },\n      \"mesh\": {\n       \"description\": \"Mesh is reserved for future use to identify cross mesh resources.\",\n       \"type\": \"string\"\n      },\n      \"name\": {\n       \"description\": \"Name of the referenced resource. Can only be used with kinds: `MeshService`,\\n`MeshServiceSubset` and `MeshGatewayRoute`\",\n       \"type\": \"string\"\n      },\n      \"namespace\": {\n       \"description\": \"Namespace specifies the namespace of target resource. If empty only resources in policy namespace\\nwill be targeted.\",\n       \"type\": \"string\"\n      },\n      \"proxyTypes\": {\n       \"description\": \"ProxyTypes specifies the data plane types that are subject to the policy. When not specified,\\nall data plane types are targeted by the policy.\",\n       \"items\": {\n        \"enum\": [\n         \"Sidecar\",\n         \"Gateway\"\n        ],\n        \"type\": \"string\"\n       },\n       \"minItems\": 1,\n       \"type\": \"array\"\n      },\n      \"sectionName\": {\n       \"description\": \"SectionName is used to target specific section of resource.\\nFor example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.\",\n       \"type\": \"string\"\n      },\n      \"tags\": {\n       \"additionalProperties\": {\n        \"type\": \"string\"\n       },\n       \"description\": \"Tags used to select a subset of proxies by tags. Can only be used with kinds\\n`MeshSubset` and `MeshServiceSubset`\",\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"targetRef\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Mesh Passthrough\",\n \"type\": \"object\"\n}",
   "version": "kuma.io/v1alpha1"
  },
  "configuration": null,
  "description": "",
  "displayName": "Mesh Passthrough",
  "format": "JSON",
  "id": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "defaultData": "",
   "genealogy": "",
   "isAnnotation": false,
   "published": false,
   "shapePolygonPoints": "",
   "styleOverrides": "",
   "styles": ""
  },
  "model": {
   "category": {
    "name": "Cloud Native Network"
   },
   "displayName": "Kong Mesh",
   "id": "00000000-0000-0000-0000-000000000000",
   "metadata": {
    "defaultData": "",
    "isAnnotation": false,
    "primaryColor": "#003459",
    "secondaryColor": "",
    "shape": "circle",
    "shapePolygonPoints": "",
    "styleOverrides": "",
    "styles": "",
    "svgColor": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n         viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\n        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\n        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e\n\u003c/svg\u003e",
    "svgComplete": "",
    "svgWhite": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n\t.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\n\tL17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\n\th-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e\n\u003c/svg\u003e"
   },
   "model": {
    "version": "2.8.0"
   },
   "name": "kong-mesh",
   "registrant": {
    "created_at": "0001-01-01T00:00:00Z",
    "credential_id": "00000000-0000-0000-0000-000000000000",
    "deleted_at": "0001-01-01T00:00:00Z",
    "id": "00000000-0000-0000-0000-000000000000",
    "kind": "artifacthub",
    "name": "Artifact Hub",
    "status": "discovered",
    "sub_type": "",
    "type": "registry",
    "updated_at": "0001-01-01T00:00:00Z",
    "user_id": "00000000-0000-0000-0000-000000000000"
   },
   "connection_id": "00000000-0000-0000-0000-000000000000",
   "schemaVersion": "models.meshery.io/v1beta1",
   "status": "enabled",
   "subCategory": "Service Mesh",
   "version": "v1.0.0",
   "components": null,
   "relationships": null
  },
  "schemaVersion": "components.meshery.io/v1beta1",
  "status": "enabled",
  "styles": {
   "primaryColor": "#003459",
   "shape": "circle",
   "svgColor": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n         viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n        .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#003459;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\n        L17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\n        h-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e\n\u003c/svg\u003e",
   "svgWhite": "\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 45.3 40.8\" style=\"enable-background:new 0 0 45.3 40.8;\" xml:space=\"preserve\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n\t.st0{fill:#FFFFFF;}\n\u003c/style\u003e\n\u003cpath class=\"st0\" d=\"M14.9,33.6h8.3l4.3,5.4l-0.7,1.9H16l0.3-1.9l-2.5-4L14.9,33.6z M20.8,9.7h4.5l20,23.9l-1.6,7.3h-8.6l0.5-2\n\tL17,16.5L20.8,9.7z M28.7,0L38,7.3l-1.2,1.2l1.6,2.2v2.4L33.8,17L26,7.8h-4.5l1.8-3.4L28.7,0z M9.1,23.4l6.5-5.6l8.6,10.4L21.8,32\n\th-7.9l-5.5,7.2l-1.3,1.7H0V32l6.6-8.6H9.1z\"/\u003e\n\u003c/svg\u003e"
  },
  "version": "v1.0.0"
 }