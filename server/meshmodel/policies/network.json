{
  "apiVersion": "core.meshery.io/v1alpha1",
  "kind": "Network",
  "metadata": {
    "description": "This policy validates the network configuration in a Kubernetes environment, ensuring that service and container ports, protocols, and mappings are correctly defined and consistent. It helps maintain secure and reliable network communication between services and pods, preventing misconfigurations and potential vulnerabilities",
    "name": "Kubernetes Network Policy Validator",
    "version": "v1.0.0"
  },
  "model": {
    "name": "kubernetes",
    "version": "*",
    "displayName": "Kubernetes",
    "category": {
      "name": "Orchestration Management",
      "metadata": null
    },
    "metadata": {}
  },
  "subType": "OPA",
  "expression": "package network_policy\n\n# playground with this policy: https://play.openpolicyagent.org/p/ttJQwNEGQ8\n\n# gets the container pod protocol, default is \"TCP\"\nget_port_protocol(container_ports) = pod_protocol {\n\tnot has_key(container_ports, \"protocol\")\n\tpod_protocol := \"TCP\"\n}\n\nget_port_protocol(container_ports) = pod_protocol {\n\thas_key(container_ports, \"protocol\")\n\tpod_protocol := container_ports.protocol\n}\n\n# checks for key in object\nhas_key(x, k) { _ = x[k] }\n\n# checkServiceToContainerPortMap(service_port, container_port) {\n# \t# the service target-port should be equal to the container port name\n# \tservice_port[\"target Port\"] == container_port.name\n# }\n\ncheckServiceToContainerPortMap(service_port, container_port) {\n\t# the service target-port can be number as well and should be equal to container port in that case\n\tservice_port[\"target Port\"] == container_port[\"container Port\"]\n}\n\ncheckServiceToContainerPortMap(service_port, container_port) {\n\t# or the service port number equals to the the container Port Number\n\tservice_port.port == container_port[\"container Port\"]\n}\n\nservice_pod_relationships[service_name] {\n\t# Select a service resource\n\tservice := input.services[_]\n\n\t# Check if the resource is a Service\n\tservice.type == \"Service\"\n\n\t# Extract the Service spec\n\tservice_spec := service.settings.spec\n\n\t# Extract the Service ports\n\tservice_port := service_spec.ports[_]\n\n\t# Extract the Service protocol\n\tservice_protocol := service_port.protocol\n\n\t# Select a Pod resource with the same name as the Service\n\tpod := input.services[_]\n\n\t# Check if the resource is a Pod\n\tpod.type == \"Pod\"\n\n\t# Extract the Pod spec\n\tpod_spec := pod.settings.spec\n\n\t# Extract the Pod ports\n\tpod_ports := pod_spec.containers[_].ports[_]\n\n\t#pod protocol\n\tpod_protocol := get_port_protocol(pod_ports) \n\n\t# Check if the Service protocol matches the Pod protocol\n\tservice_protocol == pod_protocol\n\n\t# Check if the Service target port matches the Pod port\n\tcheckServiceToContainerPortMap(service_port, pod_ports)\n\n\tsource_id := service.traits.meshmap.id\n\tdestination_id := pod.traits.meshmap.id\n\tservice_name = {\"destination_name\": pod.name, \"source_id\": source_id, \"destination_id\": destination_id, \"source_name\": service.name, \"port\": service_port}\n}\n\nservice_deployment_relationships[service_name] {\n    # Select a service resource\n    service := input.services[_]\n    \n    # Check if the resource is a Service\n    service.type == \"Service\"\n\n    # Extract the Service spec\n    service_spec := service.settings.spec\n\n    # Extract the Service ports\n    service_port := service_spec.ports[_]\n    \n    # Extract the Service protocol\n    service_protocol := service_port.protocol\n\n    # Select a Pod resource with the same name as the Service\n    deployment := input.services[_]\n\n    # Check if the resource is a deployment\n    deployment.type == \"Deployment\"\n\n    # Extract the deployment containers\n    deployment_containers := deployment.settings.spec.template.spec.containers[_]\n\n    # Extract the deployment ports\n    deployment_ports := deployment_containers.ports[_]\n\n    # Check if the Service port matches the deployment port\n    checkServiceToContainerPortMap(service_port, deployment_ports)\n\n    # Define the deployment protocol as \"TCP\" since it is not provided in the data\n    deployment_protocol := get_port_protocol(deployment_ports) \n\n    # Check if the Service protocol matches the deployment protocol\n    service_protocol == deployment_protocol\n\n    source_id := service.traits.meshmap.id\n    destination_id := deployment.traits.meshmap.id\n    \n    service_name = {\"destination_name\": deployment.name, \"source_id\": source_id, \"destination_id\": destination_id, \"source_name\": service.name, \"port\": service_port}\n}\n"
}