{"kind":"ZFSSnapshot","apiVersion":"v1","display-name":"ZFS Snapshot","format":"JSON","metadata":{},"model":{"name":"openebs","version":"3.3.1","display-name":"","category":"","sub-category":""},"schema":"{\n \"description\": \"VolumeInfo defines ZFS volume parameters for all modes in which ZFS volumes can be created like - ZFS volume with filesystem, ZFS Volume exposed as zfs or ZFS volume exposed as raw block device. Some of the parameters can be only set during creation time (as specified in the details of the parameter), and a few are editable. In case of Cloned volumes, the parameters are assigned the same values as the source volume.\",\n \"properties\": {\n  \"capacity\": {\n   \"description\": \"Capacity of the volume\",\n   \"minLength\": 1,\n   \"type\": \"string\"\n  },\n  \"compression\": {\n   \"description\": \"Compression specifies the block-level compression algorithm to be applied to the ZFS Volume. The value \\\"on\\\" indicates ZFS to use the default compression algorithm. The default compression algorithm used by ZFS will be either lzjb or, if the lz4_compress feature is enabled, lz4. Compression property can be edited after the volume has been created. The change will only be applied to the newly-written data. For instance, if the Volume was created with \\\"off\\\" and the next day the compression was modified to \\\"on\\\", the data written prior to setting \\\"on\\\" will not be compressed. Default Value: off.\",\n   \"pattern\": \"^(on|off|lzjb|zstd|gzip|gzip-[1-9]|zle|lz4)$\",\n   \"type\": \"string\"\n  },\n  \"dedup\": {\n   \"description\": \"Deduplication is the process for removing redundant data at the block level, reducing the total amount of data stored. If a file system has the dedup property enabled, duplicate data blocks are removed synchronously. The result is that only unique data is stored and common components are shared among files. Deduplication can consume significant processing power (CPU) and memory as well as generate additional disk IO. Before creating a pool with deduplication enabled, ensure that you have planned your hardware requirements appropriately and implemented appropriate recovery practices, such as regular backups. As an alternative to deduplication consider using compression=lz4, as a less resource-intensive alternative. should be enabled on the zvol. Dedup property can be edited after the volume has been created. Default Value: off.\",\n   \"enum\": [\n    \"on\",\n    \"off\"\n   ],\n   \"type\": \"string\"\n  },\n  \"encryption\": {\n   \"description\": \"Enabling the encryption feature allows for the creation of encrypted filesystems and volumes. ZFS will encrypt file and zvol data, file attributes, ACLs, permission bits, directory listings, FUID mappings, and userused / groupused data. ZFS will not encrypt metadata related to the pool structure, including dataset and snapshot names, dataset hierarchy, properties, file size, file holes, and deduplication tables (though the deduplicated data itself is encrypted). Default Value: off.\",\n   \"pattern\": \"^(on|off|aes-128-[c,g]cm|aes-192-[c,g]cm|aes-256-[c,g]cm)$\",\n   \"type\": \"string\"\n  },\n  \"fsType\": {\n   \"description\": \"FsType specifies filesystem type for the zfs volume/dataset. If FsType is provided as \\\"zfs\\\", then the driver will create a ZFS dataset, formatting is not required as underlying filesystem is ZFS anyway. If FsType is ext2, ext3, ext4 or xfs, then the driver will create a ZVOL and format the volume accordingly. FsType can not be modified once volume has been provisioned. Default Value: ext4.\",\n   \"type\": \"string\"\n  },\n  \"keyformat\": {\n   \"description\": \"KeyFormat specifies format of the encryption key The supported KeyFormats are passphrase, raw, hex.\",\n   \"enum\": [\n    \"passphrase\",\n    \"raw\",\n    \"hex\"\n   ],\n   \"type\": \"string\"\n  },\n  \"keylocation\": {\n   \"description\": \"KeyLocation is the location of key for the encryption\",\n   \"type\": \"string\"\n  },\n  \"ownerNodeID\": {\n   \"description\": \"OwnerNodeID is the Node ID where the ZPOOL is running which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.\",\n   \"minLength\": 1,\n   \"type\": \"string\"\n  },\n  \"poolName\": {\n   \"description\": \"poolName specifies the name of the pool where the volume has been created. PoolName can not be edited after the volume has been provisioned.\",\n   \"minLength\": 1,\n   \"type\": \"string\"\n  },\n  \"recordsize\": {\n   \"description\": \"Specifies a suggested block size for files in the file system. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. RecordSize property can be edited after the volume has been created. Changing the file system's recordsize affects only files created afterward; existing files are unaffected. Default Value: 128k.\",\n   \"minLength\": 1,\n   \"type\": \"string\"\n  },\n  \"shared\": {\n   \"description\": \"Shared specifies whether the volume can be shared among multiple pods. If it is not set to \\\"yes\\\", then the ZFS-LocalPV Driver will not allow the volumes to be mounted by more than one pods.\",\n   \"enum\": [\n    \"yes\",\n    \"no\"\n   ],\n   \"type\": \"string\"\n  },\n  \"snapname\": {\n   \"description\": \"SnapName specifies the name of the snapshot where the volume has been cloned from. Snapname can not be edited after the volume has been provisioned.\",\n   \"type\": \"string\"\n  },\n  \"thinProvision\": {\n   \"description\": \"ThinProvision describes whether space reservation for the source volume is required or not. The value \\\"yes\\\" indicates that volume should be thin provisioned and \\\"no\\\" means thick provisioning of the volume. If thinProvision is set to \\\"yes\\\" then volume can be provisioned even if the ZPOOL does not have the enough capacity. If thinProvision is set to \\\"no\\\" then volume can be provisioned only if the ZPOOL has enough capacity and capacity required by volume can be reserved. ThinProvision can not be modified once volume has been provisioned. Default Value: no.\",\n   \"enum\": [\n    \"yes\",\n    \"no\"\n   ],\n   \"type\": \"string\"\n  },\n  \"volblocksize\": {\n   \"description\": \"VolBlockSize specifies the block size for the zvol. The volsize can only be set to a multiple of volblocksize, and cannot be zero. VolBlockSize can not be edited after the volume has been provisioned. Default Value: 8k.\",\n   \"minLength\": 1,\n   \"type\": \"string\"\n  },\n  \"volumeType\": {\n   \"description\": \"volumeType determines whether the volume is of type \\\"DATASET\\\" or \\\"ZVOL\\\". If fstype provided in the storageclass is \\\"zfs\\\", a volume of type dataset will be created. If \\\"ext4\\\", \\\"ext3\\\", \\\"ext2\\\" or \\\"xfs\\\" is mentioned as fstype in the storageclass, then a volume of type zvol will be created, which will be further formatted as the fstype provided in the storageclass. VolumeType can not be modified once volume has been provisioned.\",\n   \"enum\": [\n    \"ZVOL\",\n    \"DATASET\"\n   ],\n   \"type\": \"string\"\n  }\n },\n \"required\": [\n  \"capacity\",\n  \"ownerNodeID\",\n  \"poolName\",\n  \"volumeType\"\n ],\n \"title\": \"ZFS Snapshot\",\n \"type\": \"object\"\n}"}