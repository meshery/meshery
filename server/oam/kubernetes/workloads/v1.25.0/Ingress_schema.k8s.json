{"$schema":"http://json-schema.org/draft-04/schema","description":"Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.","properties":{"spec":{"description":"IngressSpec describes the Ingress the user wishes to exist.","properties":{"defaultBackend":{"description":"IngressBackend describes all endpoints for a given service and port.","properties":{"resource":{"description":"TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.","properties":{"apiGroup":{"description":"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.","type":"string"},"kind":{"description":"Kind is the type of resource being referenced","type":"string"},"name":{"description":"Name is the name of resource being referenced","type":"string"}},"required":["kind","name"],"type":"object","x-kubernetes-map-type":"atomic"},"service":{"description":"IngressServiceBackend references a Kubernetes Service as a Backend.","properties":{"name":{"description":"Name is the referenced service. The service must exist in the same namespace as the Ingress object.","type":"string"},"port":{"description":"ServiceBackendPort is the service port being referenced.","properties":{"name":{"description":"Name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".","type":"string"},"number":{"description":"Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".","format":"int32","type":"integer"}},"type":"object"}},"required":["name"],"type":"object"}},"type":"object"},"ingressClassName":{"description":"IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -\u003e IngressClass -\u003e Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.","type":"string"},"rules":{"description":"A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.","items":{"description":"IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.","properties":{"host":{"description":"Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.","type":"string"},"http":{"description":"HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.","properties":{"paths":{"description":"A collection of paths that map requests to backends.","items":{"description":"HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.","properties":{"backend":{"description":"IngressBackend describes all endpoints for a given service and port.","properties":{"resource":{"description":"TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.","properties":{"apiGroup":{"description":"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.","type":"string"},"kind":{"description":"Kind is the type of resource being referenced","type":"string"},"name":{"description":"Name is the name of resource being referenced","type":"string"}},"required":["kind","name"],"type":"object","x-kubernetes-map-type":"atomic"},"service":{"description":"IngressServiceBackend references a Kubernetes Service as a Backend.","properties":{"name":{"description":"Name is the referenced service. The service must exist in the same namespace as the Ingress object.","type":"string"},"port":{"description":"ServiceBackendPort is the service port being referenced.","properties":{"name":{"description":"Name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".","type":"string"},"number":{"description":"Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".","format":"int32","type":"integer"}},"type":"object"}},"required":["name"],"type":"object"}},"type":"object"},"path":{"description":"Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".","type":"string"},"pathType":{"description":"PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.","type":"string"}},"required":["pathType","backend"],"type":"object"},"type":"array","x-kubernetes-list-type":"atomic"}},"required":["paths"],"type":"object"}},"type":"object"},"type":"array","x-kubernetes-list-type":"atomic"},"tls":{"description":"TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.","items":{"description":"IngressTLS describes the transport layer security associated with an Ingress.","properties":{"hosts":{"description":"Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.","items":{"type":"string"},"type":"array","x-kubernetes-list-type":"atomic"},"secretName":{"description":"SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.","type":"string"}},"type":"object"},"type":"array","x-kubernetes-list-type":"atomic"}},"type":"object"}},"title":"Ingress","type":"object","x-kubernetes-group-version-kind":[{"group":"networking.k8s.io","kind":"Ingress","version":"v1"}]}