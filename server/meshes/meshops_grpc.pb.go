// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: meshops.proto

package meshes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdapterService_AdapterName_FullMethodName         = "/meshes.AdapterService/AdapterName"
	AdapterService_AdapterVersions_FullMethodName     = "/meshes.AdapterService/AdapterVersions"
	AdapterService_ApplyOperation_FullMethodName      = "/meshes.AdapterService/ApplyOperation"
	AdapterService_SupportedOperations_FullMethodName = "/meshes.AdapterService/SupportedOperations"
	AdapterService_StreamEvents_FullMethodName        = "/meshes.AdapterService/StreamEvents"
	AdapterService_Provision_FullMethodName           = "/meshes.AdapterService/Provision"
	AdapterService_ComponentInfo_FullMethodName       = "/meshes.AdapterService/ComponentInfo"
)

// AdapterServiceClient is the client API for AdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdapterServiceClient interface {
	AdapterName(ctx context.Context, in *AdapterNameRequest, opts ...grpc.CallOption) (*AdapterNameResponse, error)
	AdapterVersions(ctx context.Context, in *AdapterVersionsRequest, opts ...grpc.CallOption) (*AdapterVersionsResponse, error)
	ApplyOperation(ctx context.Context, in *ApplyRuleRequest, opts ...grpc.CallOption) (*ApplyRuleResponse, error)
	SupportedOperations(ctx context.Context, in *SupportedOperationsRequest, opts ...grpc.CallOption) (*SupportedOperationsResponse, error)
	StreamEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventsResponse], error)
	Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error)
	ComponentInfo(ctx context.Context, in *ComponentInfoRequest, opts ...grpc.CallOption) (*ComponentInfoResponse, error)
}

type adapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterServiceClient(cc grpc.ClientConnInterface) AdapterServiceClient {
	return &adapterServiceClient{cc}
}

func (c *adapterServiceClient) AdapterName(ctx context.Context, in *AdapterNameRequest, opts ...grpc.CallOption) (*AdapterNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdapterNameResponse)
	err := c.cc.Invoke(ctx, AdapterService_AdapterName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) AdapterVersions(ctx context.Context, in *AdapterVersionsRequest, opts ...grpc.CallOption) (*AdapterVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdapterVersionsResponse)
	err := c.cc.Invoke(ctx, AdapterService_AdapterVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ApplyOperation(ctx context.Context, in *ApplyRuleRequest, opts ...grpc.CallOption) (*ApplyRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyRuleResponse)
	err := c.cc.Invoke(ctx, AdapterService_ApplyOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SupportedOperations(ctx context.Context, in *SupportedOperationsRequest, opts ...grpc.CallOption) (*SupportedOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportedOperationsResponse)
	err := c.cc.Invoke(ctx, AdapterService_SupportedOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) StreamEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdapterService_ServiceDesc.Streams[0], AdapterService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventsRequest, EventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdapterService_StreamEventsClient = grpc.ServerStreamingClient[EventsResponse]

func (c *adapterServiceClient) Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionResponse)
	err := c.cc.Invoke(ctx, AdapterService_Provision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ComponentInfo(ctx context.Context, in *ComponentInfoRequest, opts ...grpc.CallOption) (*ComponentInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentInfoResponse)
	err := c.cc.Invoke(ctx, AdapterService_ComponentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterServiceServer is the server API for AdapterService service.
// All implementations must embed UnimplementedAdapterServiceServer
// for forward compatibility.
type AdapterServiceServer interface {
	AdapterName(context.Context, *AdapterNameRequest) (*AdapterNameResponse, error)
	AdapterVersions(context.Context, *AdapterVersionsRequest) (*AdapterVersionsResponse, error)
	ApplyOperation(context.Context, *ApplyRuleRequest) (*ApplyRuleResponse, error)
	SupportedOperations(context.Context, *SupportedOperationsRequest) (*SupportedOperationsResponse, error)
	StreamEvents(*EventsRequest, grpc.ServerStreamingServer[EventsResponse]) error
	Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error)
	ComponentInfo(context.Context, *ComponentInfoRequest) (*ComponentInfoResponse, error)
	mustEmbedUnimplementedAdapterServiceServer()
}

// UnimplementedAdapterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdapterServiceServer struct{}

func (UnimplementedAdapterServiceServer) AdapterName(context.Context, *AdapterNameRequest) (*AdapterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdapterName not implemented")
}
func (UnimplementedAdapterServiceServer) AdapterVersions(context.Context, *AdapterVersionsRequest) (*AdapterVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdapterVersions not implemented")
}
func (UnimplementedAdapterServiceServer) ApplyOperation(context.Context, *ApplyRuleRequest) (*ApplyRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOperation not implemented")
}
func (UnimplementedAdapterServiceServer) SupportedOperations(context.Context, *SupportedOperationsRequest) (*SupportedOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedOperations not implemented")
}
func (UnimplementedAdapterServiceServer) StreamEvents(*EventsRequest, grpc.ServerStreamingServer[EventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedAdapterServiceServer) Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provision not implemented")
}
func (UnimplementedAdapterServiceServer) ComponentInfo(context.Context, *ComponentInfoRequest) (*ComponentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComponentInfo not implemented")
}
func (UnimplementedAdapterServiceServer) mustEmbedUnimplementedAdapterServiceServer() {}
func (UnimplementedAdapterServiceServer) testEmbeddedByValue()                        {}

// UnsafeAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterServiceServer will
// result in compilation errors.
type UnsafeAdapterServiceServer interface {
	mustEmbedUnimplementedAdapterServiceServer()
}

func RegisterAdapterServiceServer(s grpc.ServiceRegistrar, srv AdapterServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdapterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdapterService_ServiceDesc, srv)
}

func _AdapterService_AdapterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdapterNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).AdapterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterService_AdapterName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).AdapterName(ctx, req.(*AdapterNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_AdapterVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdapterVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).AdapterVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterService_AdapterVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).AdapterVersions(ctx, req.(*AdapterVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ApplyOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ApplyOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterService_ApplyOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ApplyOperation(ctx, req.(*ApplyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SupportedOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SupportedOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterService_SupportedOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SupportedOperations(ctx, req.(*SupportedOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdapterServiceServer).StreamEvents(m, &grpc.GenericServerStream[EventsRequest, EventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdapterService_StreamEventsServer = grpc.ServerStreamingServer[EventsResponse]

func _AdapterService_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterService_Provision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).Provision(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ComponentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ComponentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterService_ComponentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ComponentInfo(ctx, req.(*ComponentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdapterService_ServiceDesc is the grpc.ServiceDesc for AdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshes.AdapterService",
	HandlerType: (*AdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdapterName",
			Handler:    _AdapterService_AdapterName_Handler,
		},
		{
			MethodName: "AdapterVersions",
			Handler:    _AdapterService_AdapterVersions_Handler,
		},
		{
			MethodName: "ApplyOperation",
			Handler:    _AdapterService_ApplyOperation_Handler,
		},
		{
			MethodName: "SupportedOperations",
			Handler:    _AdapterService_SupportedOperations_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _AdapterService_Provision_Handler,
		},
		{
			MethodName: "ComponentInfo",
			Handler:    _AdapterService_ComponentInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _AdapterService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meshops.proto",
}
